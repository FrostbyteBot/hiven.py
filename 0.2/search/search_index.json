{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":true,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"openhiven.py openhiven.py is an easy, fast and async API wrapper written in Python that provides extensive functionality for the Hiven Swarm and Hiven API. Important Due to this version still being in development, the following listeners are not fully supported (no arguments passed when received): room_create room_update room_delete house_member_join house_member_leave house_member_enter house_member_exit house_member_update house_member_chunk batch_house_member_update house_entity_update relationship_update presence_update message_update typing_start","title":"Home"},{"location":"changelog.html","text":"Changelog \u00b6 All notable changes to the Compiler will be documented in this file. Note that these changes in this file are specifically for the Compiler. The full summary will be in the CHANGELOG.md file the main folder The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . v0.2.dev2 - 2021-08-23 \u00b6 Added \u00b6 Full Properties of Class User are now added to the HivenClient application and account as new properties to BaseUser Changed \u00b6 Made flags the base property as replacement for user_flags . Though user_flags will still exist v0.2.dev1 - 2021-08-13 \u00b6 Rewrite of the base structure. Not all changes will be noted here, but main ones! Added \u00b6 Message-Broker for handling incoming events and distribute them to the listeners. Event-Buffers, which store the events and will one by one execute the events/ call its listeners. This can be changed by setting queue_events in the client to False, which means all tasks are immediately sent to the event-loop and executed in the next cycle if possible. New event_parsers file with a new execution schema, where calling the function will simply add the event with its data, args and kwargs to the buffer. Added HivenEventHandler as a class and interface for listeners and functions related to that. Implementation of SingleDispatchEventListener , which will listen for an event once and execute an assigned coroutine when the event is received. This can be done dynamically using HivenEventHandler.add_single_listener() Implementation of MultiDispatchEventListener , which will listen for an event until the bot is stopped. Will call a coroutine every time the event is received. Creating one can be done dynamically using HivenEventHandler.add_multi_listener() wait_for function in HivenEventHandler , which will dynamically wait for an event. This will under the hood create a simple SingleDispatchEventListener . It will return the data passed to the function as well. dispatch_event function in HivenEventHandler , which will dynamically add a new event to the buffer with the args and kwargs passed. call_listeners to call all listeners for an event based on the passed args and kwargs. This will call them directly and not utilise the message-broker unlike dispatch_event HTTPRateLimitError for receiving http rate-limits (429) and parameter retry_on_rate_limit to raw_request() Parameter remove_listeners to HivenClient.close() , which will, if set to True, remove all listeners created using @client.event(), add_multi_listener() and add_single_listener() Changed \u00b6 Rewrite of the base structure Proper WebSocket structure, with init handling that will delay all other incoming events until the Bot is ready. This means when the Bot enters ready state all cached events are sent to the event-buffer. Base Types for referencing general types in the library Cache implementation using cache.py, which will hold and store values and provide functions for generating data and update the cache correctly. This will remove implementations in the data classes itself. Dot-Env Handling, which will now load the openhivenpy.env file on default and update all variables based on the given input. This will avoid None values when an .env file only updates a few values Removed \u00b6 Old structure (everything not mentioned in changed or added is likely gone) v0.1.3.2 - 2021-04-09 \u00b6 Added \u00b6 Updated validation traceback #69 Updated presence to be a string and removed the deprecated and unneeded class Changed \u00b6 Small code enhancements before v0.2 rewrite Removed \u00b6 Unneeded exception log inside the exception strings and replaced it with from e to have a cleaner traceback v0.1.3.1 - 2021-04-09 \u00b6 Added \u00b6 Error-messages for ValidationError in from_dict() inside type classes Changed \u00b6 Updated MANIFEST.in #68 Fixed with removal of name parameter in asyncio.create_task() which is unsupported in 3.7 Removed \u00b6 Old licensing of FrostbyteSpace and updated the URLs to the latest changes v0.1.3 - 2021-02-16 \u00b6 Added \u00b6 HivenObject as Base for Type Classes more TypeHinting using the module typing ObjectValidation as in #46 using an integration of a @classmethod for object creation as explained in #37. Will likely switch from marshmallow to another library for the sake of speed and more efficiency (or possibly own implementation using @dataclass wait_for_initialisation() and wait_for_ready() to the WebSocket to wait for the initialisation or ready state to be fired op-code constants to the WebSocket Missing Schemas and fully implemented the Validation process client_user to PrivateRoom and PrivateGroupRoom bucket , author_id , exploding_age and device_id to the Message Class Missing CLOSED and CLOSING handlers to the WebSocket Event USER_UPDATE as event and its corresponding event_handler on_user_update Exceptions to object initialisation and validation Changed \u00b6 Fixed HivenClient.close() for closing the HivenClient Connection Updated current docstrings as in #36 Fixed circular Import errors and fixed some Type Errors Fixed WebSocket bug causing events to be fired before the initialisation was successful Fixed bug causing last_message_id sometimes to be a string and not an integer Fixed multiple WebSocket and Instance Construction bugs Removed \u00b6 Deprecated timeout_handler and replaced it with a standard asyncio.wait_for() v0.1.2 - 2021-02-03 \u00b6 Added \u00b6 Traceback to in-code exceptions for easier debugging and testing Proper docs to the HTTP Class, and it's methods json and header with default None as parameters to the HTTP method requests. If they are not overwritten by a passed parameter: param json: Will not get passed to the requests to allow a data field of any type param headers: Will be overwritten by the default headers, and the passed as an argument to the request on_house_delete and on_house_member_leave as events and added correct handling username option for Client.edit(**kwargs) create_private_group_room as method in the class HivenClient Until now missing entity object to the event on_house_entities_update Changed \u00b6 Rewrite of core Websocket Event Handling: Moved handler methods from response_handler to the websocket object itself (Will be changed in the Websocket Rewrite and EventHandling Update) Renamed EventHandler event-function names and changed name prefix to dispatch_{event_name} Rewrote restart handler and moved the instantiation of the loop from Connection.connect() to HivenClient.run() and HivenClient.connect() to not be dependent on the connection object itself. This will avoid that the restart handler is also affected when the connection fails due to an exception. Fixed Client.edit(**kwargs) bug causing issues with data being passed as json without correct formatting. Caused by HTTP.patch() faulty param passing to HTTP.raw_request() Fixed room_create as event and added group room creation Fixed cache lists reference error caused by prior commits (houses, rooms, users etc.) Rewrote create_private_room in HivenClient to take only the user parameter instead of user_id and user Fixed attribute joined_at in the class Member Renamed object Category to Entity to be equivalent to the Hiven API Fixed fetch_invite() and Invite Object Creation bug on_house_member_exit to on_house_member_offline and on_house_member_enter to on_house_member_online Fixed HOUSE_MEMBER_EXIT bug causing members to be removed from houses instead of being set offline Added better traceback for exceptions, including event_listener methods to avoid that asyncio exceptions are thrown and added log_traceback(level='error', msg='Traceback: ', suffix=None) as function to utils Fixed room_create as event and added group room creation Removed \u00b6 joined_at from User ping from the HivenClient (Will be added back later but with better implementation)","title":"Changelog"},{"location":"changelog.html#changelog","text":"All notable changes to the Compiler will be documented in this file. Note that these changes in this file are specifically for the Compiler. The full summary will be in the CHANGELOG.md file the main folder The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog.html#v02dev2-2021-08-23","text":"","title":"v0.2.dev2 - 2021-08-23"},{"location":"changelog.html#added","text":"Full Properties of Class User are now added to the HivenClient application and account as new properties to BaseUser","title":"Added"},{"location":"changelog.html#changed","text":"Made flags the base property as replacement for user_flags . Though user_flags will still exist","title":"Changed"},{"location":"changelog.html#v02dev1-2021-08-13","text":"Rewrite of the base structure. Not all changes will be noted here, but main ones!","title":"v0.2.dev1 - 2021-08-13"},{"location":"changelog.html#added_1","text":"Message-Broker for handling incoming events and distribute them to the listeners. Event-Buffers, which store the events and will one by one execute the events/ call its listeners. This can be changed by setting queue_events in the client to False, which means all tasks are immediately sent to the event-loop and executed in the next cycle if possible. New event_parsers file with a new execution schema, where calling the function will simply add the event with its data, args and kwargs to the buffer. Added HivenEventHandler as a class and interface for listeners and functions related to that. Implementation of SingleDispatchEventListener , which will listen for an event once and execute an assigned coroutine when the event is received. This can be done dynamically using HivenEventHandler.add_single_listener() Implementation of MultiDispatchEventListener , which will listen for an event until the bot is stopped. Will call a coroutine every time the event is received. Creating one can be done dynamically using HivenEventHandler.add_multi_listener() wait_for function in HivenEventHandler , which will dynamically wait for an event. This will under the hood create a simple SingleDispatchEventListener . It will return the data passed to the function as well. dispatch_event function in HivenEventHandler , which will dynamically add a new event to the buffer with the args and kwargs passed. call_listeners to call all listeners for an event based on the passed args and kwargs. This will call them directly and not utilise the message-broker unlike dispatch_event HTTPRateLimitError for receiving http rate-limits (429) and parameter retry_on_rate_limit to raw_request() Parameter remove_listeners to HivenClient.close() , which will, if set to True, remove all listeners created using @client.event(), add_multi_listener() and add_single_listener()","title":"Added"},{"location":"changelog.html#changed_1","text":"Rewrite of the base structure Proper WebSocket structure, with init handling that will delay all other incoming events until the Bot is ready. This means when the Bot enters ready state all cached events are sent to the event-buffer. Base Types for referencing general types in the library Cache implementation using cache.py, which will hold and store values and provide functions for generating data and update the cache correctly. This will remove implementations in the data classes itself. Dot-Env Handling, which will now load the openhivenpy.env file on default and update all variables based on the given input. This will avoid None values when an .env file only updates a few values","title":"Changed"},{"location":"changelog.html#removed","text":"Old structure (everything not mentioned in changed or added is likely gone)","title":"Removed"},{"location":"changelog.html#v0132-2021-04-09","text":"","title":"v0.1.3.2 - 2021-04-09"},{"location":"changelog.html#added_2","text":"Updated validation traceback #69 Updated presence to be a string and removed the deprecated and unneeded class","title":"Added"},{"location":"changelog.html#changed_2","text":"Small code enhancements before v0.2 rewrite","title":"Changed"},{"location":"changelog.html#removed_1","text":"Unneeded exception log inside the exception strings and replaced it with from e to have a cleaner traceback","title":"Removed"},{"location":"changelog.html#v0131-2021-04-09","text":"","title":"v0.1.3.1 - 2021-04-09"},{"location":"changelog.html#added_3","text":"Error-messages for ValidationError in from_dict() inside type classes","title":"Added"},{"location":"changelog.html#changed_3","text":"Updated MANIFEST.in #68 Fixed with removal of name parameter in asyncio.create_task() which is unsupported in 3.7","title":"Changed"},{"location":"changelog.html#removed_2","text":"Old licensing of FrostbyteSpace and updated the URLs to the latest changes","title":"Removed"},{"location":"changelog.html#v013-2021-02-16","text":"","title":"v0.1.3 - 2021-02-16"},{"location":"changelog.html#added_4","text":"HivenObject as Base for Type Classes more TypeHinting using the module typing ObjectValidation as in #46 using an integration of a @classmethod for object creation as explained in #37. Will likely switch from marshmallow to another library for the sake of speed and more efficiency (or possibly own implementation using @dataclass wait_for_initialisation() and wait_for_ready() to the WebSocket to wait for the initialisation or ready state to be fired op-code constants to the WebSocket Missing Schemas and fully implemented the Validation process client_user to PrivateRoom and PrivateGroupRoom bucket , author_id , exploding_age and device_id to the Message Class Missing CLOSED and CLOSING handlers to the WebSocket Event USER_UPDATE as event and its corresponding event_handler on_user_update Exceptions to object initialisation and validation","title":"Added"},{"location":"changelog.html#changed_4","text":"Fixed HivenClient.close() for closing the HivenClient Connection Updated current docstrings as in #36 Fixed circular Import errors and fixed some Type Errors Fixed WebSocket bug causing events to be fired before the initialisation was successful Fixed bug causing last_message_id sometimes to be a string and not an integer Fixed multiple WebSocket and Instance Construction bugs","title":"Changed"},{"location":"changelog.html#removed_3","text":"Deprecated timeout_handler and replaced it with a standard asyncio.wait_for()","title":"Removed"},{"location":"changelog.html#v012-2021-02-03","text":"","title":"v0.1.2 - 2021-02-03"},{"location":"changelog.html#added_5","text":"Traceback to in-code exceptions for easier debugging and testing Proper docs to the HTTP Class, and it's methods json and header with default None as parameters to the HTTP method requests. If they are not overwritten by a passed parameter: param json: Will not get passed to the requests to allow a data field of any type param headers: Will be overwritten by the default headers, and the passed as an argument to the request on_house_delete and on_house_member_leave as events and added correct handling username option for Client.edit(**kwargs) create_private_group_room as method in the class HivenClient Until now missing entity object to the event on_house_entities_update","title":"Added"},{"location":"changelog.html#changed_5","text":"Rewrite of core Websocket Event Handling: Moved handler methods from response_handler to the websocket object itself (Will be changed in the Websocket Rewrite and EventHandling Update) Renamed EventHandler event-function names and changed name prefix to dispatch_{event_name} Rewrote restart handler and moved the instantiation of the loop from Connection.connect() to HivenClient.run() and HivenClient.connect() to not be dependent on the connection object itself. This will avoid that the restart handler is also affected when the connection fails due to an exception. Fixed Client.edit(**kwargs) bug causing issues with data being passed as json without correct formatting. Caused by HTTP.patch() faulty param passing to HTTP.raw_request() Fixed room_create as event and added group room creation Fixed cache lists reference error caused by prior commits (houses, rooms, users etc.) Rewrote create_private_room in HivenClient to take only the user parameter instead of user_id and user Fixed attribute joined_at in the class Member Renamed object Category to Entity to be equivalent to the Hiven API Fixed fetch_invite() and Invite Object Creation bug on_house_member_exit to on_house_member_offline and on_house_member_enter to on_house_member_online Fixed HOUSE_MEMBER_EXIT bug causing members to be removed from houses instead of being set offline Added better traceback for exceptions, including event_listener methods to avoid that asyncio exceptions are thrown and added log_traceback(level='error', msg='Traceback: ', suffix=None) as function to utils Fixed room_create as event and added group room creation","title":"Changed"},{"location":"changelog.html#removed_4","text":"joined_at from User ping from the HivenClient (Will be added back later but with better implementation)","title":"Removed"},{"location":"api_reference/hiven_exceptions.html","text":"Request Exceptions \u00b6 Warning This documentation page is not finished and due to Hiven being not stable yet, changes will and can occur 400 Bad Request - no_auth \u00b6 If you receive this error response that means it is an issue relating the authentication which is either not passed in the headers or is not correct! More info on Authentication Header Example Exception Response: { \"success\" : false , \"error\" : { \"code\" : \"no_auth\" , \"message\" : \"Authorization is required for this route\" } } 400 Bad Request - parent_entity_doesnt_exist \u00b6 The chosen parent_entity in the request does not exist in the house! Example Exception Response: { \"success\" : false , \"error\" : { \"code\" : \"parent_entity_doesnt_exist\" , \"message\" : \"Parent entity does not exist in this house\" } } 404 Not Found - not_found \u00b6 The 404 Exception is a classic exception in the Web-Area and means here the Hiven API did not find the endpoint you specified. Example Exception Response: { \"success\" : false , \"error\" : { \"code\" : \"not_found\" , \"message\" : \"Not found\" } } 415 Unsupported Media Type - internal_server_error \u00b6 If you receive this error, the server encountered an internal error due to a header-issue where some data that you passed, or a specification causes the server to fail to perform the request. Example Exception Response: { \"success\" : false , \"error\" : { \"code\" : \"internal_server_error\" , \"message\" : \"Something went wrong interally\" } }","title":"Request Exceptions"},{"location":"api_reference/hiven_exceptions.html#request-exceptions","text":"Warning This documentation page is not finished and due to Hiven being not stable yet, changes will and can occur","title":"Request Exceptions"},{"location":"api_reference/hiven_exceptions.html#400-bad-request-no_auth","text":"If you receive this error response that means it is an issue relating the authentication which is either not passed in the headers or is not correct! More info on Authentication Header Example Exception Response: { \"success\" : false , \"error\" : { \"code\" : \"no_auth\" , \"message\" : \"Authorization is required for this route\" } }","title":"400 Bad Request - no_auth"},{"location":"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist","text":"The chosen parent_entity in the request does not exist in the house! Example Exception Response: { \"success\" : false , \"error\" : { \"code\" : \"parent_entity_doesnt_exist\" , \"message\" : \"Parent entity does not exist in this house\" } }","title":"400 Bad Request - parent_entity_doesnt_exist"},{"location":"api_reference/hiven_exceptions.html#404-not-found-not_found","text":"The 404 Exception is a classic exception in the Web-Area and means here the Hiven API did not find the endpoint you specified. Example Exception Response: { \"success\" : false , \"error\" : { \"code\" : \"not_found\" , \"message\" : \"Not found\" } }","title":"404 Not Found - not_found"},{"location":"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error","text":"If you receive this error, the server encountered an internal error due to a header-issue where some data that you passed, or a specification causes the server to fail to perform the request. Example Exception Response: { \"success\" : false , \"error\" : { \"code\" : \"internal_server_error\" , \"message\" : \"Something went wrong interally\" } }","title":"415 Unsupported Media Type - internal_server_error"},{"location":"api_reference/hiven_request_endpoints.html","text":"API Request Endpoints \u00b6 Warning This documentation page is not finished and due to Hiven being not stable yet, changes will and can occur Endpoints \u00b6 User Endpoints \u00b6 /users/@me \u00b6 Default user endpoint for accessing the user-data of the owner of the passed token in the header. GET 200 Authorisation was successful and the body contains the requested data Expected Response: { \"success\" : true , \"data\" : { \"id\" : s tr , \"name\" : s tr , \"username\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"flags\" : i nt , \"bot\" : bool | No ne , \"location\" : s tr , \"website\" : s tr , \"bio\" : s tr , \"email\" : s tr , \"email_verified\" : bool , \"mfa_enabled\" : bool } } 400 Authorisation Token is not set or faulty! Check your header if the token was entered correctly! Expected Response: { \"success\" : false , \"error\" : { \"code\" : \"no_auth\" , \"message\" : \"Authorization is required for this route\" } } PATCH Requires body Pass at least one value that should be overwritten { \"location\" : s tr , \"username\" : s tr , \"website\" : s tr , \"bio\" : s tr , \"header\" : u n k n ow n , \"icon\" : u n k n ow n } 200 Patch was successful and the data was changed! The response will containt the updated data of the User { \"success\" : True , \"data\" : { \"id\" : s tr , \"name\" : s tr , \"username\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"flags\" : i nt , \"bot\" : bool | No ne , \"location\" : s tr , \"website\" : s tr , \"bio\" : s tr , \"email\" : s tr , \"email_verified\" : bool , \"mfa_enabled\" : bool } } Warning If you enter an unknown or mistyped variable, it will not be correctly recognised, and the Hiven API Server will change no value. Still the result will be 200 and the user-data will be sent without any changes! 400 Authorisation Token is not set or faulty! Check your header if the token was entered correctly! Expected Response: { \"success\" : false , \"error\" : { \"code\" : \"no_auth\" , \"message\" : \"Authorization is required for this route\" } } Warning Currently there is a bug in the Hiven API causing it to return 200 instead of 400 or 403! 415 The passed content-type is faulty! Expected Response: { \"success\" : false , \"error\" : { \"code\" : \"internal_server_error\" , \"message\" : \"Something went wrong interally\" } } /users/username \u00b6 Endpoint for a specific user based on their username. Will return the user if they were found. Example GET /users/kudo GET 200 Authorisation was successful and the body contains the requested data Expected Response: { \"success\" : true , \"data\" : { \"id\" : s tr , \"name\" : s tr , \"username\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"flags\" : i nt , \"bot\" : bool | No ne , \"location\" : s tr , \"website\" : s tr , \"bio\" : s tr , \"email\" : s tr , \"email_verified\" : bool , \"mfa_enabled\" : bool } } 400 User with that id was not found Expected Response: { \"success\" : false , \"error\" : { \"code\" : \"user_not_found\" , \"message\" : \"That user does not exist\" } } Warning Currently there is a bug in the Hiven API causing it to return 200 instead of 400 or 403! /users/id \u00b6 Endpoint for a specific user based on their id. Will return the user if they were found. Example GET /users/175697072878514388 GET 200 Authorisation was successful and the body contains the requested data Expected Response: { \"success\" : true , \"data\" : { \"id\" : s tr , \"name\" : s tr , \"username\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"flags\" : i nt , \"bot\" : bool | No ne , \"location\" : s tr , \"website\" : s tr , \"bio\" : s tr , \"email\" : s tr , \"email_verified\" : bool , \"mfa_enabled\" : bool } } 400 User with that id was not found Expected Response: { \"success\" : false , \"error\" : { \"code\" : \"user_not_found\" , \"message\" : \"That user does not exist\" } } Warning Currently there is a bug in the Hiven API causing it to return 200 instead of 400 or 403! /streams/@me/mentions \u00b6 Endpoint for fetching your mentions in the Houses and rooms of your scope. GET 200 Returns a list with all mentions wrapped in a message Hiven object Expected Response: { \"success\" : true , \"data\" : [ { \"room_id\" : s tr , \"bucket\" : i nt , \"id\" : s tr , \"attachment\" : u n k n ow n , \"author_id\" : s tr , \"content\" : s tr , \"device_id\" : s tr , \"edited_at\" : s tr , \"embed\" : {}, \"exploding\" : bool , \"exploding_age\" : u n k n ow n , \"mentions\" : [ { // User objec t \"icon\" : s tr | No ne , \"id\" : s tr , \"username\" : s tr , \"name\" : s tr , \"header\" : s tr | No ne , \"flags\" : s tr | i nt | No ne , \"bot\" : bool | No ne } // All me nt io ns i n t he message ], \"metadata\" : u n k n ow n , \"timestamp\" : s tr , \"type\" : i nt , \"author\" : { // User objec t \"icon\" : s tr | No ne , \"id\" : s tr , \"username\" : s tr , \"name\" : s tr , \"header\" : s tr | No ne , \"flags\" : s tr | i nt | No ne , \"bot\" : bool | No ne } }, ... ] } 400 Authorisation Token is not set or faulty! Check your header if the token was entered correctly! Expected Response: { \"success\" : false , \"error\" : { \"code\" : \"no_auth\" , \"message\" : \"Authorization is required for this route\" } } Warning Currently there is a bug in the Hiven API causing it to return 200 instead of 400 or 403! users/@me/rooms \u00b6 Endpoint for private rooms that are not related to any House POST 200 400 House Endpoints \u00b6 Message Endpoints \u00b6 Room Endpoints \u00b6","title":"API Request Endpoints"},{"location":"api_reference/hiven_request_endpoints.html#api-request-endpoints","text":"Warning This documentation page is not finished and due to Hiven being not stable yet, changes will and can occur","title":"API Request Endpoints"},{"location":"api_reference/hiven_request_endpoints.html#endpoints","text":"","title":"Endpoints"},{"location":"api_reference/hiven_request_endpoints.html#user-endpoints","text":"","title":"User Endpoints"},{"location":"api_reference/hiven_request_endpoints.html#usersme","text":"Default user endpoint for accessing the user-data of the owner of the passed token in the header. GET 200 Authorisation was successful and the body contains the requested data Expected Response: { \"success\" : true , \"data\" : { \"id\" : s tr , \"name\" : s tr , \"username\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"flags\" : i nt , \"bot\" : bool | No ne , \"location\" : s tr , \"website\" : s tr , \"bio\" : s tr , \"email\" : s tr , \"email_verified\" : bool , \"mfa_enabled\" : bool } } 400 Authorisation Token is not set or faulty! Check your header if the token was entered correctly! Expected Response: { \"success\" : false , \"error\" : { \"code\" : \"no_auth\" , \"message\" : \"Authorization is required for this route\" } } PATCH Requires body Pass at least one value that should be overwritten { \"location\" : s tr , \"username\" : s tr , \"website\" : s tr , \"bio\" : s tr , \"header\" : u n k n ow n , \"icon\" : u n k n ow n } 200 Patch was successful and the data was changed! The response will containt the updated data of the User { \"success\" : True , \"data\" : { \"id\" : s tr , \"name\" : s tr , \"username\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"flags\" : i nt , \"bot\" : bool | No ne , \"location\" : s tr , \"website\" : s tr , \"bio\" : s tr , \"email\" : s tr , \"email_verified\" : bool , \"mfa_enabled\" : bool } } Warning If you enter an unknown or mistyped variable, it will not be correctly recognised, and the Hiven API Server will change no value. Still the result will be 200 and the user-data will be sent without any changes! 400 Authorisation Token is not set or faulty! Check your header if the token was entered correctly! Expected Response: { \"success\" : false , \"error\" : { \"code\" : \"no_auth\" , \"message\" : \"Authorization is required for this route\" } } Warning Currently there is a bug in the Hiven API causing it to return 200 instead of 400 or 403! 415 The passed content-type is faulty! Expected Response: { \"success\" : false , \"error\" : { \"code\" : \"internal_server_error\" , \"message\" : \"Something went wrong interally\" } }","title":"/users/@me"},{"location":"api_reference/hiven_request_endpoints.html#usersusername","text":"Endpoint for a specific user based on their username. Will return the user if they were found. Example GET /users/kudo GET 200 Authorisation was successful and the body contains the requested data Expected Response: { \"success\" : true , \"data\" : { \"id\" : s tr , \"name\" : s tr , \"username\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"flags\" : i nt , \"bot\" : bool | No ne , \"location\" : s tr , \"website\" : s tr , \"bio\" : s tr , \"email\" : s tr , \"email_verified\" : bool , \"mfa_enabled\" : bool } } 400 User with that id was not found Expected Response: { \"success\" : false , \"error\" : { \"code\" : \"user_not_found\" , \"message\" : \"That user does not exist\" } } Warning Currently there is a bug in the Hiven API causing it to return 200 instead of 400 or 403!","title":"/users/username"},{"location":"api_reference/hiven_request_endpoints.html#usersid","text":"Endpoint for a specific user based on their id. Will return the user if they were found. Example GET /users/175697072878514388 GET 200 Authorisation was successful and the body contains the requested data Expected Response: { \"success\" : true , \"data\" : { \"id\" : s tr , \"name\" : s tr , \"username\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"flags\" : i nt , \"bot\" : bool | No ne , \"location\" : s tr , \"website\" : s tr , \"bio\" : s tr , \"email\" : s tr , \"email_verified\" : bool , \"mfa_enabled\" : bool } } 400 User with that id was not found Expected Response: { \"success\" : false , \"error\" : { \"code\" : \"user_not_found\" , \"message\" : \"That user does not exist\" } } Warning Currently there is a bug in the Hiven API causing it to return 200 instead of 400 or 403!","title":"/users/id"},{"location":"api_reference/hiven_request_endpoints.html#streamsmementions","text":"Endpoint for fetching your mentions in the Houses and rooms of your scope. GET 200 Returns a list with all mentions wrapped in a message Hiven object Expected Response: { \"success\" : true , \"data\" : [ { \"room_id\" : s tr , \"bucket\" : i nt , \"id\" : s tr , \"attachment\" : u n k n ow n , \"author_id\" : s tr , \"content\" : s tr , \"device_id\" : s tr , \"edited_at\" : s tr , \"embed\" : {}, \"exploding\" : bool , \"exploding_age\" : u n k n ow n , \"mentions\" : [ { // User objec t \"icon\" : s tr | No ne , \"id\" : s tr , \"username\" : s tr , \"name\" : s tr , \"header\" : s tr | No ne , \"flags\" : s tr | i nt | No ne , \"bot\" : bool | No ne } // All me nt io ns i n t he message ], \"metadata\" : u n k n ow n , \"timestamp\" : s tr , \"type\" : i nt , \"author\" : { // User objec t \"icon\" : s tr | No ne , \"id\" : s tr , \"username\" : s tr , \"name\" : s tr , \"header\" : s tr | No ne , \"flags\" : s tr | i nt | No ne , \"bot\" : bool | No ne } }, ... ] } 400 Authorisation Token is not set or faulty! Check your header if the token was entered correctly! Expected Response: { \"success\" : false , \"error\" : { \"code\" : \"no_auth\" , \"message\" : \"Authorization is required for this route\" } } Warning Currently there is a bug in the Hiven API causing it to return 200 instead of 400 or 403!","title":"/streams/@me/mentions"},{"location":"api_reference/hiven_request_endpoints.html#usersmerooms","text":"Endpoint for private rooms that are not related to any House POST 200 400","title":"users/@me/rooms"},{"location":"api_reference/hiven_request_endpoints.html#house-endpoints","text":"","title":"House Endpoints"},{"location":"api_reference/hiven_request_endpoints.html#message-endpoints","text":"","title":"Message Endpoints"},{"location":"api_reference/hiven_request_endpoints.html#room-endpoints","text":"","title":"Room Endpoints"},{"location":"api_reference/hiven_restapi.html","text":"Using the REST API \u00b6 Warning This documentation page is not finished and due to Hiven being not stable yet, changes will and can occur The Hiven API uses standard REST endpoints to allow its users to interact with it. Therefore, you can quickly write HTTP-requests for these endpoints as long as you specify the details. We will explain this in-depth through-out the docs for each endpoint. Current API access-point: Host: api.hiven.io Version: v1 URL: https://api.hiven.io/v1/ Authentication Header \u00b6 The Hiven API uses a classic header authorization where your auth-token is passed as a parameter in the header of the request. If you do not have your token yet, getting it is discussed in the docs page Getting a User-token If you already have one and want to make a request to Hiven simply put it as following into the header: { \"Authorization\" : \"enter your token here\" } Writing a Request with a JSON-body \u00b6 Specifying the Content-Type \u00b6 Writing a request that contains data is relatively easy with Hiven and only requires you to specify what datatype the body you sent is, so the server can properly read it and perform the request. In this case the standard type application/json is used which allows us to pass regular data in json format to the Server. Throughout the entire API this is common usage for endpoints. Info After some research, specifying the Content-Type is not required in some cases, but it is nevertheless good practice setting it. Still, if it does more harm than good, you should consider removing it when it is not needed! To specify the application/json datatype, add to the header this line: { \"Content-Type\" : \"application/json\" } Passing values in the body \u00b6 After the content-type was specified, and the configuration works, you only need to write a proper JSON-body, and it should work like wanted! There are exceptions to that of course, since some requests might require some additional information and configuration. Body-Example: { \"data_field\" : \"value\" } Warning Specifying the Content-Type can cause errors if you set it on endpoints that do not expect such datatype. This can be the case with the methods GET or DELETE where the server expects no data except it is specifically requested. Such Configuration can cause the 400 Bad Request HTTP-Exception to be returned when you send a request! Common-Methods for data parsing: POST PUT PATCH","title":"Using the REST API"},{"location":"api_reference/hiven_restapi.html#using-the-rest-api","text":"Warning This documentation page is not finished and due to Hiven being not stable yet, changes will and can occur The Hiven API uses standard REST endpoints to allow its users to interact with it. Therefore, you can quickly write HTTP-requests for these endpoints as long as you specify the details. We will explain this in-depth through-out the docs for each endpoint. Current API access-point: Host: api.hiven.io Version: v1 URL: https://api.hiven.io/v1/","title":"Using the REST API"},{"location":"api_reference/hiven_restapi.html#authentication-header","text":"The Hiven API uses a classic header authorization where your auth-token is passed as a parameter in the header of the request. If you do not have your token yet, getting it is discussed in the docs page Getting a User-token If you already have one and want to make a request to Hiven simply put it as following into the header: { \"Authorization\" : \"enter your token here\" }","title":"Authentication Header"},{"location":"api_reference/hiven_restapi.html#writing-a-request-with-a-json-body","text":"","title":"Writing a Request with a JSON-body"},{"location":"api_reference/hiven_restapi.html#specifying-the-content-type","text":"Writing a request that contains data is relatively easy with Hiven and only requires you to specify what datatype the body you sent is, so the server can properly read it and perform the request. In this case the standard type application/json is used which allows us to pass regular data in json format to the Server. Throughout the entire API this is common usage for endpoints. Info After some research, specifying the Content-Type is not required in some cases, but it is nevertheless good practice setting it. Still, if it does more harm than good, you should consider removing it when it is not needed! To specify the application/json datatype, add to the header this line: { \"Content-Type\" : \"application/json\" }","title":"Specifying the Content-Type"},{"location":"api_reference/hiven_restapi.html#passing-values-in-the-body","text":"After the content-type was specified, and the configuration works, you only need to write a proper JSON-body, and it should work like wanted! There are exceptions to that of course, since some requests might require some additional information and configuration. Body-Example: { \"data_field\" : \"value\" } Warning Specifying the Content-Type can cause errors if you set it on endpoints that do not expect such datatype. This can be the case with the methods GET or DELETE where the server expects no data except it is specifically requested. Such Configuration can cause the 400 Bad Request HTTP-Exception to be returned when you send a request! Common-Methods for data parsing: POST PUT PATCH","title":"Passing values in the body"},{"location":"api_reference/hiven_swarm.html","text":"Using the Hiven Swarm \u00b6 Warning This documentation page is not finished and due to Hiven being not stable yet, changes will and can occur Getting Started using the Hiven Swarm \u00b6 Logging into the Hiven Swarm \u00b6 Lifesignal \u00b6","title":"Using the Hiven Swarm"},{"location":"api_reference/hiven_swarm.html#using-the-hiven-swarm","text":"Warning This documentation page is not finished and due to Hiven being not stable yet, changes will and can occur","title":"Using the Hiven Swarm"},{"location":"api_reference/hiven_swarm.html#getting-started-using-the-hiven-swarm","text":"","title":"Getting Started using the Hiven Swarm"},{"location":"api_reference/hiven_swarm.html#logging-into-the-hiven-swarm","text":"","title":"Logging into the Hiven Swarm"},{"location":"api_reference/hiven_swarm.html#lifesignal","text":"","title":"Lifesignal"},{"location":"api_reference/object_reference.html","text":"JSON Object Reference \u00b6 Warning This documentation page is not finished and due to Hiven being not stable yet, changes will and can occur Default User \u00b6 Full possible data of a User. Usually only visible to the client! { \"account\" : s tr | i nt | No ne , \"username\" : s tr , \"name\" : s tr , \"id\" : s tr , \"flags\" : s tr | i nt | No ne , \"user_flags\" : s tr | i nt | No ne , // depreca te d , rarely available \"bio\" : s tr | No ne , \"email_verified\" : bool | No ne , \"header\" : s tr , // emp t y whe n n o t f illed \"icon\" : s tr , // emp t y whe n n o t f illed \"bot\" : bool | No ne , \"application\" : s tr | i nt | No ne , } Lazy User \u00b6 Base User that is available to everyone. { \"account\" : s tr | i nt | No ne , \"flags\" : s tr | i nt | No ne , \"header\" : s tr , // emp t y whe n n o t f illed \"icon\" : s tr , // emp t y whe n n o t f illed \"id\" : s tr , \"name\" : s tr , \"username\" : s tr } Objects for the Client-User \u00b6 PrivateRoom \u00b6 PrivateRoom for interacting with a Hiven user or users outside a House Note openhiven.py splits the rooms into single and group rooms for easier differentiation { \"default_permission_override\" : i nt , \"description\" : s tr , \"emoji\" : objec t | No ne , \"house_id\" : s tr , \"id\" : s tr , \"last_message_id\" : s tr | No ne , \"name\" : s tr , \"owner_id\" : s tr , \"permission_overrides\" : i nt , \"position\" : i nt , \"recipients\" : [ // Lis t o f users ], \"type\" : i nt } Relationship \u00b6 Relationship with another Hiven User Types: 0 - No Relationship 1 - Outgoing Friend Request 2 - Incoming Friend Request 3 - Friend 4 - Restricted User 5 - Blocked User { \"user_id\" : s tr , \"user\" : { \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"type\" : i nt , \"last_updated_at\" : s tr | No ne } House \u00b6 Member \u00b6 Member of a House { \"user_id\" : s tr , \"user\" : { // User Objec t }, \"roles\" : [ // Lis t o f roles ], \"last_permission_update\" : s tr | No ne , \"joined_at\" : s tr , \"house_id\" : s tr } Room \u00b6 { \"type\" : i nt , \"recipients\" : u n k n ow n , \"position\" : i nt , \"permission_overrides\" : i nt , \"owner_id\" : s tr , \"name\" : s tr , \"last_message_id\" : s tr | No ne , \"id\" : s tr , \"house_id\" : s tr , \"emoji\" : objec t | No ne , \"description\" : s tr , \"default_permission_override\" : i nt } Entity \u00b6 { \"type\" : i nt , \"resource_pointers\" : [ { // Resource Poi nter \"resource_type\" : s tr , \"resource_id\" : s tr } ... ], \"position\" : i nt , \"name\" : s tr , \"id\" : s tr } Role \u00b6 Role of a House that can be assigned to a Member { \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts } Message \u00b6 Embed \u00b6 Attachment \u00b6","title":"JSON Object Reference"},{"location":"api_reference/object_reference.html#json-object-reference","text":"Warning This documentation page is not finished and due to Hiven being not stable yet, changes will and can occur","title":"JSON Object Reference"},{"location":"api_reference/object_reference.html#default-user","text":"Full possible data of a User. Usually only visible to the client! { \"account\" : s tr | i nt | No ne , \"username\" : s tr , \"name\" : s tr , \"id\" : s tr , \"flags\" : s tr | i nt | No ne , \"user_flags\" : s tr | i nt | No ne , // depreca te d , rarely available \"bio\" : s tr | No ne , \"email_verified\" : bool | No ne , \"header\" : s tr , // emp t y whe n n o t f illed \"icon\" : s tr , // emp t y whe n n o t f illed \"bot\" : bool | No ne , \"application\" : s tr | i nt | No ne , }","title":"Default User"},{"location":"api_reference/object_reference.html#lazy-user","text":"Base User that is available to everyone. { \"account\" : s tr | i nt | No ne , \"flags\" : s tr | i nt | No ne , \"header\" : s tr , // emp t y whe n n o t f illed \"icon\" : s tr , // emp t y whe n n o t f illed \"id\" : s tr , \"name\" : s tr , \"username\" : s tr }","title":"Lazy User"},{"location":"api_reference/object_reference.html#objects-for-the-client-user","text":"","title":"Objects for the Client-User"},{"location":"api_reference/object_reference.html#privateroom","text":"PrivateRoom for interacting with a Hiven user or users outside a House Note openhiven.py splits the rooms into single and group rooms for easier differentiation { \"default_permission_override\" : i nt , \"description\" : s tr , \"emoji\" : objec t | No ne , \"house_id\" : s tr , \"id\" : s tr , \"last_message_id\" : s tr | No ne , \"name\" : s tr , \"owner_id\" : s tr , \"permission_overrides\" : i nt , \"position\" : i nt , \"recipients\" : [ // Lis t o f users ], \"type\" : i nt }","title":"PrivateRoom"},{"location":"api_reference/object_reference.html#relationship","text":"Relationship with another Hiven User Types: 0 - No Relationship 1 - Outgoing Friend Request 2 - Incoming Friend Request 3 - Friend 4 - Restricted User 5 - Blocked User { \"user_id\" : s tr , \"user\" : { \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"type\" : i nt , \"last_updated_at\" : s tr | No ne }","title":"Relationship"},{"location":"api_reference/object_reference.html#house","text":"","title":"House"},{"location":"api_reference/object_reference.html#member","text":"Member of a House { \"user_id\" : s tr , \"user\" : { // User Objec t }, \"roles\" : [ // Lis t o f roles ], \"last_permission_update\" : s tr | No ne , \"joined_at\" : s tr , \"house_id\" : s tr }","title":"Member"},{"location":"api_reference/object_reference.html#room","text":"{ \"type\" : i nt , \"recipients\" : u n k n ow n , \"position\" : i nt , \"permission_overrides\" : i nt , \"owner_id\" : s tr , \"name\" : s tr , \"last_message_id\" : s tr | No ne , \"id\" : s tr , \"house_id\" : s tr , \"emoji\" : objec t | No ne , \"description\" : s tr , \"default_permission_override\" : i nt }","title":"Room"},{"location":"api_reference/object_reference.html#entity","text":"{ \"type\" : i nt , \"resource_pointers\" : [ { // Resource Poi nter \"resource_type\" : s tr , \"resource_id\" : s tr } ... ], \"position\" : i nt , \"name\" : s tr , \"id\" : s tr }","title":"Entity"},{"location":"api_reference/object_reference.html#role","text":"Role of a House that can be assigned to a Member { \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts }","title":"Role"},{"location":"api_reference/object_reference.html#message","text":"","title":"Message"},{"location":"api_reference/object_reference.html#embed","text":"","title":"Embed"},{"location":"api_reference/object_reference.html#attachment","text":"","title":"Attachment"},{"location":"api_reference/swarm_events.html","text":"Hiven Swarm Events \u00b6 Warning This documentation page is not finished and due to Hiven being not stable yet, changes will and can occur INIT_STATE \u00b6 Docs \u00b7 on_init() Note This a unique event which does not have a parser! Though a listener is available for simple initialisation. If something listens for this event, the client will wait for it to finish (includes also multiple listeners). Meaning initialisation WILL NOT be done while this listener method has not returned. The user logged successfully into the account, and the init data is sent with it to initialise the client-side (openhiven.py). Expected json-data \"op\" : 0 , \"d\" : { \"user\" : { \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"settings\" : { \"user_id\" : s tr , \"theme\" : No ne , \"room_overrides\" : { // room pre feren ces mapped t o t heir idz \"id\" : { \"notification_preference\" : i nt } }, \"onboarded\" : u n k n ow n , \"enable_desktop_notifications\" : u n k n ow n }, \"relationships\" : { \"id\" : { \"user_id\" : s tr , \"user\" : { \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"type\" : i nt , \"last_updated_at\" : s tr | No ne }, }, \"read_state\" : { \"id\" : { \"message_id\" : s tr , \"mention_count\" : i nt }, }, \"private_rooms\" : [{ \"default_permission_override\" : No ne , \"description\" : s tr , \"emoji\" : objec t | No ne , \"house_id\" : No ne , \"id\" : s tr , \"last_message_id\" : s tr | No ne , \"name\" : s tr , \"owner_id\" : s tr , \"permission_overrides\" : No ne , \"position\" : No ne , \"recipients\" : [{ // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne } ... ], \"type\" : i nt } ... ], \"presences\" : { \"id\" : { \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne } }, \"house_memberships\" : [{ \"id\" : { \"user_id\" : s tr , \"user\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"roles\" : [], \"last_permission_update\" : s tr | No ne , \"joined_at\" : s tr , \"house_id\" : s tr , } } ... ], \"house_ids\" : [ // lis t o f house_ids \"house_id\" , ... ] } } USER_UPDATE \u00b6 Docs \u00b7 on_user_update() Expected json-data \"op\" : 0 , \"d\" : { // User Objec t \"bio\" : s tr , \"bot\" : bool | No ne , \"email_verified\" : bool , \"header\" : s tr | No ne , \"icon\" : s tr | No ne , \"id\" : s tr , \"location\" : s tr , \"name\" : s tr , \"flags\" : i nt , \"username\" : s tr } PRESENCE_UPDATE \u00b6 Docs \u00b7 on_presence_update() Expected json-data \"op\" : 0 , \"d\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne } RELATIONSHIP_UPDATE \u00b6 Docs \u00b7 on_relationship_update() Expected json-data \"op\" : 0 , \"d\" : { \"user\" : { // User Objec t \"website\" : s tr , \"username\" : s tr , \"flags\" : i nt , \"name\" : s tr , \"location\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"bio\" : s tr }, \"type\" : i nt , \"recipient_id\" : s tr , \"id\" : s tr } MESSAGE_CREATE \u00b6 Docs \u00b7 on_message_create() Expected json-data - HOUSE MESSAGE \"op\" : 0 , \"d\" : { \"timestamp\" : i nt , \"room_id\" : s tr , \"mentions\" : [{ // Me nt io n objec t aka. user objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne , \"bot\" : bool | No ne } ... ], \"member\" : { // Member Objec t \"user_id\" : s tr , \"user\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts } ... ], \"last_permission_update\" : s tr | No ne , \"joined_at\" : s tr , \"house_id\" : s tr }, \"id\" : s tr , \"house_id\" : s tr , \"exploding_age\" : i nt | No ne , \"exploding\" : bool , \"device_id\" : s tr , \"content\" : s tr , \"bucket\" : i nt , \"author_id\" : s tr , \"author\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne } \"attachment\" : { // A tta chme nt Objec t \"media_url\" : s tr , \"filename\" : s tr , \"dimensions\" : { \"width\" : i nt , \"type\" : s tr , \"height\" : i nt } } } Expected json-data - HOUSE MESSAGE { \"author\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"author_id\" : s tr , \"bucket\" : i nt , \"content\" : s tr , \"device_id\" : s tr , \"exploding\" : bool , \"exploding_age\" : i nt | No ne , \"id\" : s tr , \"mentions\" : [{ // Me nt io n objec t aka. user objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne , \"bot\" : bool | No ne } ... ], \"recipient_ids\" : [ // Lis t o f user ids - s tr ], \"room_id\" : s tr , \"timestamp\" : i nt } MESSAGE_DELETE \u00b6 Docs \u00b7 on_message_delete() Expected json-data \"op\" : 0 , \"d\" : { \"room_id\" : s tr , \"message_id\" : s tr , \"house_id\" : s tr } MESSAGE_UPDATE \u00b6 Docs \u00b7 on_message_update() Expected json-data \"op\" : 0 , \"d\" : { \"type\" : i nt , \"timestamp\" : s tr , \"room_id\" : s tr , \"metadata\" : u n k n ow n , \"mentions\" : [{ // Me nt io n objec t aka. user objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, ... ], \"id\" : s tr , \"house_id\" : s tr , \"exploding_age\" : i nt | No ne , \"exploding\" : bool , \"embed\" : { // Embed Objec t }, \"edited_at\" : s tr , \"device_id\" : s tr , \"content\" : s tr , \"bucket\" : i nt , \"author_id\" : s tr , \"attachment\" : { // A tta chme nt Objec t \"media_url\" : s tr , \"filename\" : s tr , \"dimensions\" : { \"width\" : i nt , \"type\" : s tr , \"height\" : i nt } } } ROOM_CREATE \u00b6 Docs \u00b7 on_room_create() Expected json-data \"op\" : 0 , \"d\" : { \"house_id\" : s tr , \"id\" : s tr , \"name\" : s tr , \"position\" : i nt , \"type\" : i nt } ROOM_UPDATE \u00b6 Docs \u00b7 on_room_update) Expected json-data \"op\" : 0 , \"d\" : { \"house_id\" : s tr , \"id\" : s tr , \"name\" : s tr , \"position\" : i nt , \"type\" : i nt } ROOM_DELETE \u00b6 Docs \u00b7 on_room_update) Expected json-data \"op\" : 0 , \"d\" : { \"house_id\" : s tr , \"id\" : s tr } HOUSE_JOIN \u00b6 Docs \u00b7 on_house_join() Expected json-data \"op\" : 0 , \"d\" : { \"rooms\" : [{ // Room Objec t \"type\" : i nt , \"recipients\" : No ne , \"position\" : i nt , \"permission_overrides\" : bi ts , \"owner_id\" : s tr , \"name\" : s tr , \"last_message_id\" : s tr | No ne , \"id\" : s tr , \"house_id\" : s tr , \"emoji\" : objec t | No ne , \"description\" : s tr , \"default_permission_override\" : i nt }, ... ], \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts }], \"owner_id\" : s tr , \"name\" : s tr , \"members\" : [{ // Member Objec t \"user_id\" : s tr , \"user\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"roles\" : [ \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts ], \"last_permission_update\" : s tr | No ne , \"joined_at\" : s tr , \"house_id\" : s tr }], \"id\" : s tr , \"icon\" : s tr | No ne , \"entities\" : [{ // E nt i t y Objec t \"type\" : i nt , \"resource_pointers\" : [{ // Resource Poi nter \"resource_type\" : s tr , \"resource_id\" : s tr } ... ], \"position\" : i nt , \"name\" : s tr , \"id\" : s tr } ... ], \"default_permissions\" : i nt , \"banner\" : s tr | No ne } HOUSE_UPDATE \u00b6 Docs \u00b7 on_house_update() Expected json-data \"op\" : 0 , \"d\" : { \"rooms\" : [{ // Room Objec t \"type\" : i nt , \"recipients\" : No ne , \"position\" : i nt , \"permission_overrides\" : bi ts , \"owner_id\" : s tr , \"name\" : s tr , \"last_message_id\" : s tr | No ne , \"id\" : s tr , \"house_id\" : s tr , \"emoji\" : objec t | No ne , \"description\" : s tr , \"default_permission_override\" : i nt }, ... ], \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts }], \"owner_id\" : s tr , \"name\" : s tr , \"members\" : [{ // Member Objec t \"user_id\" : s tr , \"user\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"roles\" : [ \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts ], \"last_permission_update\" : s tr | No ne , \"joined_at\" : s tr , \"house_id\" : s tr }], \"id\" : s tr , \"icon\" : s tr | No ne , \"entities\" : [{ // E nt i t y Objec t \"type\" : i nt , \"resource_pointers\" : [{ // Resource Poi nter \"resource_type\" : s tr , \"resource_id\" : s tr } ... ], \"position\" : i nt , \"name\" : s tr , \"id\" : s tr } ... ], \"default_permissions\" : i nt , \"banner\" : s tr | No ne } HOUSE_LEAVE \u00b6 Docs \u00b7 on_house_remove() Expected json-data \"op\" : 0 , \"d\" : { \"id\" : s tr , \"house_id\" : s tr } HOUSE_MEMBER_JOIN \u00b6 Docs \u00b7 on_house_member_join() Expected json-data \"op\" : 0 , \"d\" : { \"house_id\" : s tr , \"joined_at\" : t imes ta mp , \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts } ... ], \"length\" : i nt \"user\" : { \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne } } HOUSE_MEMBER_LEAVE \u00b6 Docs \u00b7 on_house_member_leave() Expected json-data \"op\" : 0 , \"d\" : { \"house_id\" : s tr , \"id\" : s tr , \"joined_at\" : s tr , \"last_permission_update\" : s tr , \"presence\" : s tr , \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts } ... ], \"user\" : { bo t : bool , id : s tr , na me : s tr , fla gs : s tr , user na me : s tr , }, \"user_id\" : s tr } HOUSE_MEMBER_ENTER \u00b6 Docs \u00b7 on_house_member_online() House member went online. Triggers in every house the client, and the user is in the event! Expected json-data \"op\" : 0 , \"d\" : { \"user_id\" : s tr , \"user\" : { \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"bot\" : bool | No ne , }, \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts } ... ], \"presence\" : s tr | No ne , \"last_permission_update\" : null or s tr , \"joined_at\" : s tr , \"id\" : s tr , \"house_id\" : s tr } HOUSE_MEMBER_EXIT \u00b6 Docs \u00b7 on_house_member_offline() House user went offline. Triggers in every house the client, and the user is in the event Expected json-data \"op\" : 0 , \"d\" : { \"id\" : s tr , \"house_id\" : s tr } HOUSE_MEMBER_UPDATE \u00b6 Docs \u00b7 on_member_update() Expected json-data \"op\" : 0 , \"d\" : { \"user_id\" : s tr , \"user\" : { // User Objec t \"website\" : s tr , \"username\" : s tr , \"flags\" : i nt , \"name\" : s tr , \"location\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"email_verified\" : bool , \"bot\" : bool | No ne , \"bio\" : s tr }, \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts } ... ], \"presence\" : s tr | No ne , \"last_permission_update\" : u n k n ow n , \"joined_at\" : s tr , \"id\" : s tr , \"house_id\" : s tr } HOUSE_MEMBERS_CHUNK \u00b6 Docs \u00b7 on_house_member_chunk() Chunked House Member Update Expected json-data \"op\" : 0 , \"d\" : { \"members\" : [{ \"id\" : { \"user_id\" : s tr , \"user\" : { \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s trstr \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts } ... ], \"last_permission_update\" : s tr | No ne , \"joined_at\" : s tr , \"house_id\" : s tr } } ... ], \"house_id\" : s tr } HOUSE_ENTITIES_UPDATE \u00b6 Docs \u00b7 on_house_entities_update() Expected json-data \"op\" : 0 \"d\" : { \"house_id\" : s tr , \"entities\" : [{ \"type\" : i nt , \"resource_pointers\" : [{ // Resource Poi nter \"resource_type\" : s tr , \"resource_id\" : s tr } ... ], \"position\" : i nt , \"name\" : s tr , \"id\" : s tr } ... ] } BATCH_HOUSE_MEMBER_UPDATE \u00b6 Docs \u00b7 on_batch_house_member_update() Expected json-data \"op\" : 0 , \"d\" : { \"house_id\" : s tr , \"batch_type\" : [], \"batch_size\" : i nt , \"data\" : { // Collec t io n o f Members t ha t are mapped t o t heir id \"id\" : { // Member Objec t \"user_id\" : s tr , \"user\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts } ... ], \"last_permission_update\" : s tr | No ne , \"joined_at\" : s tr , \"house_id\" : s tr } } } HOUSE_ENTITY_UPDATE \u00b6 Docs \u00b7 on_house_entities_update() Expected json-data \"op\" : 0 , \"d\" : { \"entities\" : { // E nt i t y Objec t \"type\" : i nt , \"resource_pointers\" : [{ // Resource Poi nter \"resource_type\" : s tr , \"resource_id\" : s tr } ... ], \"position\" : i nt , \"name\" : s tr , \"id\" : s tr }, \"house_id\" : s tr } HOUSE_DOWN \u00b6 Docs \u00b7 on_house_down / on_house_delete HOUSE_DOWN represents two types of events: House Deletion - A House was entirely deleted. House Downtime - The data of a house failed to load, and the server has issues recovering it. If the given variable unavailable is True , the house with that id is currently down but not deleted. Expected json-data \"op\" : 0 , \"d\" : { \"unavailable\" : bool , \"house_id\" : s tr } TYPING_START \u00b6 Docs \u00b7 on_typing_start() Expected json-data Hiven separates the TYPING_START event into two classifications: House Typing: \"op\" : 0 , \"d\" : { \"timestamp\" : i nt , \"room_id\" : s tr , \"house_id\" : s tr , \"author_id\" : s tr } Private Room Typing: \"op\" : 0 , \"d\" : { \"author_id\" : i nt , \"recipient_ids\" : [ \"user_id\" , ... ] \"room_id\" : s tr , \"timestamp\" : i nt } CALL_CREATE \u00b6 Docs \u00b7 missing Expected json-data \"op\" : 0 , \"d\" : { \"join_token\" : s tr , \"recipients\" : [ \"user_id\" , ... ], \"ringing\" :[ \"user_id\" , ... ], \"room_id\" : s tr , \"rtc_states\" : [], \"uuid\" : s tr , } CALL_UPDATE \u00b6 Docs \u00b7 missing Expected json-data \"op\" : 0 , \"d\" : { \"join_token\" : s tr , \"recipients\" : [ \"user_id\" , ... ], \"ringing\" :[ \"user_id\" , ... ], \"room_id\" : s tr , \"rtc_states\" : [ { // Voice s tatus \"deafened\" : bool , \"joined_at\" : i nt , // U n ix Times ta mp \"muted\" : bool , \"room_id\" : s tr , \"video\" : bool } ], \"uuid\" : s tr , } CALL_DELETE \u00b6 Docs \u00b7 missing Expected json-data \"op\" : 0 , \"d\" : { \"room_id\" : s tr } ROLE_UPDATE \u00b6 Docs \u00b7 missing Expected json-data \"op\" : 0 , \"d\" : { \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : i nt , \"color\" : s tr , // hex \"allow\" : i nt }","title":"Hiven Swarm Events"},{"location":"api_reference/swarm_events.html#hiven-swarm-events","text":"Warning This documentation page is not finished and due to Hiven being not stable yet, changes will and can occur","title":"Hiven Swarm Events"},{"location":"api_reference/swarm_events.html#init_state","text":"Docs \u00b7 on_init() Note This a unique event which does not have a parser! Though a listener is available for simple initialisation. If something listens for this event, the client will wait for it to finish (includes also multiple listeners). Meaning initialisation WILL NOT be done while this listener method has not returned. The user logged successfully into the account, and the init data is sent with it to initialise the client-side (openhiven.py). Expected json-data \"op\" : 0 , \"d\" : { \"user\" : { \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"settings\" : { \"user_id\" : s tr , \"theme\" : No ne , \"room_overrides\" : { // room pre feren ces mapped t o t heir idz \"id\" : { \"notification_preference\" : i nt } }, \"onboarded\" : u n k n ow n , \"enable_desktop_notifications\" : u n k n ow n }, \"relationships\" : { \"id\" : { \"user_id\" : s tr , \"user\" : { \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"type\" : i nt , \"last_updated_at\" : s tr | No ne }, }, \"read_state\" : { \"id\" : { \"message_id\" : s tr , \"mention_count\" : i nt }, }, \"private_rooms\" : [{ \"default_permission_override\" : No ne , \"description\" : s tr , \"emoji\" : objec t | No ne , \"house_id\" : No ne , \"id\" : s tr , \"last_message_id\" : s tr | No ne , \"name\" : s tr , \"owner_id\" : s tr , \"permission_overrides\" : No ne , \"position\" : No ne , \"recipients\" : [{ // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne } ... ], \"type\" : i nt } ... ], \"presences\" : { \"id\" : { \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne } }, \"house_memberships\" : [{ \"id\" : { \"user_id\" : s tr , \"user\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"roles\" : [], \"last_permission_update\" : s tr | No ne , \"joined_at\" : s tr , \"house_id\" : s tr , } } ... ], \"house_ids\" : [ // lis t o f house_ids \"house_id\" , ... ] } }","title":"INIT_STATE"},{"location":"api_reference/swarm_events.html#user_update","text":"Docs \u00b7 on_user_update() Expected json-data \"op\" : 0 , \"d\" : { // User Objec t \"bio\" : s tr , \"bot\" : bool | No ne , \"email_verified\" : bool , \"header\" : s tr | No ne , \"icon\" : s tr | No ne , \"id\" : s tr , \"location\" : s tr , \"name\" : s tr , \"flags\" : i nt , \"username\" : s tr }","title":"USER_UPDATE"},{"location":"api_reference/swarm_events.html#presence_update","text":"Docs \u00b7 on_presence_update() Expected json-data \"op\" : 0 , \"d\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }","title":"PRESENCE_UPDATE"},{"location":"api_reference/swarm_events.html#relationship_update","text":"Docs \u00b7 on_relationship_update() Expected json-data \"op\" : 0 , \"d\" : { \"user\" : { // User Objec t \"website\" : s tr , \"username\" : s tr , \"flags\" : i nt , \"name\" : s tr , \"location\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"bio\" : s tr }, \"type\" : i nt , \"recipient_id\" : s tr , \"id\" : s tr }","title":"RELATIONSHIP_UPDATE"},{"location":"api_reference/swarm_events.html#message_create","text":"Docs \u00b7 on_message_create() Expected json-data - HOUSE MESSAGE \"op\" : 0 , \"d\" : { \"timestamp\" : i nt , \"room_id\" : s tr , \"mentions\" : [{ // Me nt io n objec t aka. user objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne , \"bot\" : bool | No ne } ... ], \"member\" : { // Member Objec t \"user_id\" : s tr , \"user\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts } ... ], \"last_permission_update\" : s tr | No ne , \"joined_at\" : s tr , \"house_id\" : s tr }, \"id\" : s tr , \"house_id\" : s tr , \"exploding_age\" : i nt | No ne , \"exploding\" : bool , \"device_id\" : s tr , \"content\" : s tr , \"bucket\" : i nt , \"author_id\" : s tr , \"author\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne } \"attachment\" : { // A tta chme nt Objec t \"media_url\" : s tr , \"filename\" : s tr , \"dimensions\" : { \"width\" : i nt , \"type\" : s tr , \"height\" : i nt } } } Expected json-data - HOUSE MESSAGE { \"author\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"author_id\" : s tr , \"bucket\" : i nt , \"content\" : s tr , \"device_id\" : s tr , \"exploding\" : bool , \"exploding_age\" : i nt | No ne , \"id\" : s tr , \"mentions\" : [{ // Me nt io n objec t aka. user objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne , \"bot\" : bool | No ne } ... ], \"recipient_ids\" : [ // Lis t o f user ids - s tr ], \"room_id\" : s tr , \"timestamp\" : i nt }","title":"MESSAGE_CREATE"},{"location":"api_reference/swarm_events.html#message_delete","text":"Docs \u00b7 on_message_delete() Expected json-data \"op\" : 0 , \"d\" : { \"room_id\" : s tr , \"message_id\" : s tr , \"house_id\" : s tr }","title":"MESSAGE_DELETE"},{"location":"api_reference/swarm_events.html#message_update","text":"Docs \u00b7 on_message_update() Expected json-data \"op\" : 0 , \"d\" : { \"type\" : i nt , \"timestamp\" : s tr , \"room_id\" : s tr , \"metadata\" : u n k n ow n , \"mentions\" : [{ // Me nt io n objec t aka. user objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, ... ], \"id\" : s tr , \"house_id\" : s tr , \"exploding_age\" : i nt | No ne , \"exploding\" : bool , \"embed\" : { // Embed Objec t }, \"edited_at\" : s tr , \"device_id\" : s tr , \"content\" : s tr , \"bucket\" : i nt , \"author_id\" : s tr , \"attachment\" : { // A tta chme nt Objec t \"media_url\" : s tr , \"filename\" : s tr , \"dimensions\" : { \"width\" : i nt , \"type\" : s tr , \"height\" : i nt } } }","title":"MESSAGE_UPDATE"},{"location":"api_reference/swarm_events.html#room_create","text":"Docs \u00b7 on_room_create() Expected json-data \"op\" : 0 , \"d\" : { \"house_id\" : s tr , \"id\" : s tr , \"name\" : s tr , \"position\" : i nt , \"type\" : i nt }","title":"ROOM_CREATE"},{"location":"api_reference/swarm_events.html#room_update","text":"Docs \u00b7 on_room_update) Expected json-data \"op\" : 0 , \"d\" : { \"house_id\" : s tr , \"id\" : s tr , \"name\" : s tr , \"position\" : i nt , \"type\" : i nt }","title":"ROOM_UPDATE"},{"location":"api_reference/swarm_events.html#room_delete","text":"Docs \u00b7 on_room_update) Expected json-data \"op\" : 0 , \"d\" : { \"house_id\" : s tr , \"id\" : s tr }","title":"ROOM_DELETE"},{"location":"api_reference/swarm_events.html#house_join","text":"Docs \u00b7 on_house_join() Expected json-data \"op\" : 0 , \"d\" : { \"rooms\" : [{ // Room Objec t \"type\" : i nt , \"recipients\" : No ne , \"position\" : i nt , \"permission_overrides\" : bi ts , \"owner_id\" : s tr , \"name\" : s tr , \"last_message_id\" : s tr | No ne , \"id\" : s tr , \"house_id\" : s tr , \"emoji\" : objec t | No ne , \"description\" : s tr , \"default_permission_override\" : i nt }, ... ], \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts }], \"owner_id\" : s tr , \"name\" : s tr , \"members\" : [{ // Member Objec t \"user_id\" : s tr , \"user\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"roles\" : [ \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts ], \"last_permission_update\" : s tr | No ne , \"joined_at\" : s tr , \"house_id\" : s tr }], \"id\" : s tr , \"icon\" : s tr | No ne , \"entities\" : [{ // E nt i t y Objec t \"type\" : i nt , \"resource_pointers\" : [{ // Resource Poi nter \"resource_type\" : s tr , \"resource_id\" : s tr } ... ], \"position\" : i nt , \"name\" : s tr , \"id\" : s tr } ... ], \"default_permissions\" : i nt , \"banner\" : s tr | No ne }","title":"HOUSE_JOIN"},{"location":"api_reference/swarm_events.html#house_update","text":"Docs \u00b7 on_house_update() Expected json-data \"op\" : 0 , \"d\" : { \"rooms\" : [{ // Room Objec t \"type\" : i nt , \"recipients\" : No ne , \"position\" : i nt , \"permission_overrides\" : bi ts , \"owner_id\" : s tr , \"name\" : s tr , \"last_message_id\" : s tr | No ne , \"id\" : s tr , \"house_id\" : s tr , \"emoji\" : objec t | No ne , \"description\" : s tr , \"default_permission_override\" : i nt }, ... ], \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts }], \"owner_id\" : s tr , \"name\" : s tr , \"members\" : [{ // Member Objec t \"user_id\" : s tr , \"user\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"roles\" : [ \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts ], \"last_permission_update\" : s tr | No ne , \"joined_at\" : s tr , \"house_id\" : s tr }], \"id\" : s tr , \"icon\" : s tr | No ne , \"entities\" : [{ // E nt i t y Objec t \"type\" : i nt , \"resource_pointers\" : [{ // Resource Poi nter \"resource_type\" : s tr , \"resource_id\" : s tr } ... ], \"position\" : i nt , \"name\" : s tr , \"id\" : s tr } ... ], \"default_permissions\" : i nt , \"banner\" : s tr | No ne }","title":"HOUSE_UPDATE"},{"location":"api_reference/swarm_events.html#house_leave","text":"Docs \u00b7 on_house_remove() Expected json-data \"op\" : 0 , \"d\" : { \"id\" : s tr , \"house_id\" : s tr }","title":"HOUSE_LEAVE"},{"location":"api_reference/swarm_events.html#house_member_join","text":"Docs \u00b7 on_house_member_join() Expected json-data \"op\" : 0 , \"d\" : { \"house_id\" : s tr , \"joined_at\" : t imes ta mp , \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts } ... ], \"length\" : i nt \"user\" : { \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne } }","title":"HOUSE_MEMBER_JOIN"},{"location":"api_reference/swarm_events.html#house_member_leave","text":"Docs \u00b7 on_house_member_leave() Expected json-data \"op\" : 0 , \"d\" : { \"house_id\" : s tr , \"id\" : s tr , \"joined_at\" : s tr , \"last_permission_update\" : s tr , \"presence\" : s tr , \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts } ... ], \"user\" : { bo t : bool , id : s tr , na me : s tr , fla gs : s tr , user na me : s tr , }, \"user_id\" : s tr }","title":"HOUSE_MEMBER_LEAVE"},{"location":"api_reference/swarm_events.html#house_member_enter","text":"Docs \u00b7 on_house_member_online() House member went online. Triggers in every house the client, and the user is in the event! Expected json-data \"op\" : 0 , \"d\" : { \"user_id\" : s tr , \"user\" : { \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"bot\" : bool | No ne , }, \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts } ... ], \"presence\" : s tr | No ne , \"last_permission_update\" : null or s tr , \"joined_at\" : s tr , \"id\" : s tr , \"house_id\" : s tr }","title":"HOUSE_MEMBER_ENTER"},{"location":"api_reference/swarm_events.html#house_member_exit","text":"Docs \u00b7 on_house_member_offline() House user went offline. Triggers in every house the client, and the user is in the event Expected json-data \"op\" : 0 , \"d\" : { \"id\" : s tr , \"house_id\" : s tr }","title":"HOUSE_MEMBER_EXIT"},{"location":"api_reference/swarm_events.html#house_member_update","text":"Docs \u00b7 on_member_update() Expected json-data \"op\" : 0 , \"d\" : { \"user_id\" : s tr , \"user\" : { // User Objec t \"website\" : s tr , \"username\" : s tr , \"flags\" : i nt , \"name\" : s tr , \"location\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"email_verified\" : bool , \"bot\" : bool | No ne , \"bio\" : s tr }, \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts } ... ], \"presence\" : s tr | No ne , \"last_permission_update\" : u n k n ow n , \"joined_at\" : s tr , \"id\" : s tr , \"house_id\" : s tr }","title":"HOUSE_MEMBER_UPDATE"},{"location":"api_reference/swarm_events.html#house_members_chunk","text":"Docs \u00b7 on_house_member_chunk() Chunked House Member Update Expected json-data \"op\" : 0 , \"d\" : { \"members\" : [{ \"id\" : { \"user_id\" : s tr , \"user\" : { \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s trstr \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts } ... ], \"last_permission_update\" : s tr | No ne , \"joined_at\" : s tr , \"house_id\" : s tr } } ... ], \"house_id\" : s tr }","title":"HOUSE_MEMBERS_CHUNK"},{"location":"api_reference/swarm_events.html#house_entities_update","text":"Docs \u00b7 on_house_entities_update() Expected json-data \"op\" : 0 \"d\" : { \"house_id\" : s tr , \"entities\" : [{ \"type\" : i nt , \"resource_pointers\" : [{ // Resource Poi nter \"resource_type\" : s tr , \"resource_id\" : s tr } ... ], \"position\" : i nt , \"name\" : s tr , \"id\" : s tr } ... ] }","title":"HOUSE_ENTITIES_UPDATE"},{"location":"api_reference/swarm_events.html#batch_house_member_update","text":"Docs \u00b7 on_batch_house_member_update() Expected json-data \"op\" : 0 , \"d\" : { \"house_id\" : s tr , \"batch_type\" : [], \"batch_size\" : i nt , \"data\" : { // Collec t io n o f Members t ha t are mapped t o t heir id \"id\" : { // Member Objec t \"user_id\" : s tr , \"user\" : { // User Objec t \"username\" : s tr , \"flags\" : s tr | i nt | No ne , \"name\" : s tr , \"id\" : s tr , \"icon\" : s tr | No ne , \"header\" : s tr | No ne , \"presence\" : s tr | No ne }, \"roles\" : [{ // Role Objec t \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : bi ts , \"color\" : s tr , // hex \"allow\" : bi ts } ... ], \"last_permission_update\" : s tr | No ne , \"joined_at\" : s tr , \"house_id\" : s tr } } }","title":"BATCH_HOUSE_MEMBER_UPDATE"},{"location":"api_reference/swarm_events.html#house_entity_update","text":"Docs \u00b7 on_house_entities_update() Expected json-data \"op\" : 0 , \"d\" : { \"entities\" : { // E nt i t y Objec t \"type\" : i nt , \"resource_pointers\" : [{ // Resource Poi nter \"resource_type\" : s tr , \"resource_id\" : s tr } ... ], \"position\" : i nt , \"name\" : s tr , \"id\" : s tr }, \"house_id\" : s tr }","title":"HOUSE_ENTITY_UPDATE"},{"location":"api_reference/swarm_events.html#house_down","text":"Docs \u00b7 on_house_down / on_house_delete HOUSE_DOWN represents two types of events: House Deletion - A House was entirely deleted. House Downtime - The data of a house failed to load, and the server has issues recovering it. If the given variable unavailable is True , the house with that id is currently down but not deleted. Expected json-data \"op\" : 0 , \"d\" : { \"unavailable\" : bool , \"house_id\" : s tr }","title":"HOUSE_DOWN"},{"location":"api_reference/swarm_events.html#typing_start","text":"Docs \u00b7 on_typing_start() Expected json-data Hiven separates the TYPING_START event into two classifications: House Typing: \"op\" : 0 , \"d\" : { \"timestamp\" : i nt , \"room_id\" : s tr , \"house_id\" : s tr , \"author_id\" : s tr } Private Room Typing: \"op\" : 0 , \"d\" : { \"author_id\" : i nt , \"recipient_ids\" : [ \"user_id\" , ... ] \"room_id\" : s tr , \"timestamp\" : i nt }","title":"TYPING_START"},{"location":"api_reference/swarm_events.html#call_create","text":"Docs \u00b7 missing Expected json-data \"op\" : 0 , \"d\" : { \"join_token\" : s tr , \"recipients\" : [ \"user_id\" , ... ], \"ringing\" :[ \"user_id\" , ... ], \"room_id\" : s tr , \"rtc_states\" : [], \"uuid\" : s tr , }","title":"CALL_CREATE"},{"location":"api_reference/swarm_events.html#call_update","text":"Docs \u00b7 missing Expected json-data \"op\" : 0 , \"d\" : { \"join_token\" : s tr , \"recipients\" : [ \"user_id\" , ... ], \"ringing\" :[ \"user_id\" , ... ], \"room_id\" : s tr , \"rtc_states\" : [ { // Voice s tatus \"deafened\" : bool , \"joined_at\" : i nt , // U n ix Times ta mp \"muted\" : bool , \"room_id\" : s tr , \"video\" : bool } ], \"uuid\" : s tr , }","title":"CALL_UPDATE"},{"location":"api_reference/swarm_events.html#call_delete","text":"Docs \u00b7 missing Expected json-data \"op\" : 0 , \"d\" : { \"room_id\" : s tr }","title":"CALL_DELETE"},{"location":"api_reference/swarm_events.html#role_update","text":"Docs \u00b7 missing Expected json-data \"op\" : 0 , \"d\" : { \"position\" : i nt , \"name\" : s tr , \"level\" : i nt , \"id\" : s tr , \"house_id\" : s tr , \"deny\" : i nt , \"color\" : s tr , // hex \"allow\" : i nt }","title":"ROLE_UPDATE"},{"location":"getting_started/index.html","text":"Quickstart \u00b6 Welcome to the Quickstart page of openhiven.py! openhiven.py is an easy tool for creating bots and utilising API Functionality of Hiven. Its goal is to be fast but also provide good tools and functionality that can be used to write Hiven Bots easier. Therefore, openhiven.py is not a simple API-Wrapper but adds nice features to make running a bot easier such as: Data Caching for easier object fetching Event listening using parallel execution and a MessageBroker to distribute processes for larger Bots WebSocket event and message handling for easier usage Usage of in-code event listeners to not be dependent on entire functions Info The openhiven.py module is entirely written in async and can therefore only be used in an async event loop and environment. For more info about asyncio look into the Asyncio documentation Environment \u00b6 openhiven.py is a Python module and can currently on be run in environments with Python >= 3.7. This is due to the used module aiohttp which requires Functionality only available in Python 3.7 or higher! Python 2 is entirely not supported, and currently, there is no plan to make the module available for Python 2, since many features are dependent on Python 3 and the modern async module of Python 3 as well as aiohttp! Installation \u00b6 openhiven.py can be easily installed using pip : PyPi Regular Installation python3 -m pip install -U openhivenpy PyPi Specific Version python3 -m pip install -U openhivenpy == version Github Build Warning Can be unstable due to development status! Only use if you need the most recent development version! python3 -m pip install -U https://github.com/Luna-Klatzer/openhiven.py/archive/main.zip Installing openhiven.py will automatically also include its dependencies, which currently are: aiohttp - Async http client/server framework (asyncio) fastjsonschema - Fastest Python implementation of JSON schema yarl - Yet another URL library python-dotenv - Read key-value pairs from a .env file and set them as environment variable Basic Concept \u00b6 The system of openhiven.py is very closely related to the discord.py (Discord Python Wrapper) module and was structured to be similar to it. Therefore, the basic concept is based on an event listener system where events are mapped to user-specified functions and methods. These are user-declared and therefore only what you specify will be executed and utilised, so the handling is up to you. The Hiven Swarm \u00b6 The module uses a aiohttp HTTP Websocket Connection to interact with the Hiven Swarm and react to events that the server sent over it. In case of an event, Hiven will send the corresponding data to you in the form of JSON-wrapped messages which gets automatically handled in openhiven.py. That means the library deals with events, keep-alive, close-frames and handling of the connection, and you only need to configure how to react. So, in this case, the Websocket will then pass the data to the EventHandler where the Hiven Swarm message will get processed, and an event would be triggered if the user declared it. Event listening with the EventHandler \u00b6 The system used here is a classic event listening system where a client listens and waits over the connection for events and triggers specified code when the Websocket received such event. In Web-Languages such as JavaScript, TypeScript, PHP etc. this is common practise and applied for websites, servers and clients. In Python, this is less common, so here it is not already integrated into the language, so openhiven.py uses aiohttp to provide the option for a Connection to Hiven and its own Event Handler , which handles how the Client should react to such events. Now onto actual examples of how that works: To add an event listener, you must declare an async function with the correct name inside the HivenClient. This can be done either by inheriting the Client and then adding the method or using decorators . Async Functions that are tagged with the @client.event() decorator will automatically be registered in the EventHandler and then called whenever an Event is triggered. Note All events that can you can use are listed on the page for the EventHandler . Example with the event on_message_create : import openhivenpy as hiven client = hiven . UserClient ( token = \"\" ) @client . event () async def on_message_create ( msg ): print ( f \" { msg . author . name } send a message: { msg . content } \" ) ... Using openhiven.py \u00b6 Using a UserClient \u00b6 Source Code \u00b7 openhivenpy.UserClient A UserClient object is an object that wraps the default HivenClient , which serves as a bridge between Hiven, and the Program you are using. The HivenClient contains all data and connection-vital information, but is not supposed to be used directly since some methods are not available due to the raw state. These are special methods related to the bot-type that decides based on what type you are using, resulting in various functionality. These two bot-types are here UserClient and BotClient . For the usage of a HivenClient, you are required to pass your token, which it will use to authorise on Hiven and request data. If no token was passed, it will automatically raise an openhivenpy.exceptions.exception.InvalidToken Exception! Usage Examples Regular Note that using a decorator will also automatically add the function as a method to the Event Handler instance itself so it can call it directly from the Event Handler and it doesn't need to reference the origin! import openhivenpy as hiven client = hiven . UserClient ( \"Insert token\" ) @client . event () async def on_ready (): print ( \"Bot is ready\" ) client . run () Inherited Decorators are useful for beginners and for a quick setup, but it is recommended to use a class which inherits the HivenClient, making the Event listener directly find the methods when needed without needing the methods to be registered. This can save time as well as remove unneeded logic import openhivenpy as hiven class Bot ( hiven . UserClient ): def __init__ ( self , token ): self . _token = token # Calling __init__ of the parent class and inheriting all methods and functionality super () . __init__ ( token ) # Not directly needed but protects the token from ever being changed! @property def token ( self ): return self . _token # Methods can be defined directly in the class async def on_ready ( self ): print ( \"Bot is ready!\" ) if __name__ == '__main__' : client = Bot ( token = \"Insert token\" ) client . run () Using a BotClient \u00b6 Source Code \u00b7 openhivenpy.BotClient A Bot Client like the UserClient is a wrapper for the main HivenClient class. It serves as a Class using bot functionality on Hiven. Therefore, it's usage is very similar to the UserClient, but it can specifically utilise Methods and functions related to text-commands and will likely receive in future versions more updates specifically adding that functionality. Hiven-Types \u00b6 Source Code \u00b7 openhivenpy.types You might have already noticed in prior examples that instead of raw data openhiven.py sends entire instances of Classes with the event data as parameters. This is because of the type-system openhiven.py uses where objects are created and initialised parallel to the corresponding Hiven ones, making it easier for usage due to the easy attribute and data access of a Python class. These instances can then be used through methods to interact with the Hiven API directly, instead of you having to write your own requests for fetching the data and having to update the objects accordingly yourself. For each possible request openhiven.py already ships a pre-made method to the class which automatically changes data and returns configured objects if that specific methods returns data. For detailed documentation see Data Types","title":"Quickstart"},{"location":"getting_started/index.html#quickstart","text":"Welcome to the Quickstart page of openhiven.py! openhiven.py is an easy tool for creating bots and utilising API Functionality of Hiven. Its goal is to be fast but also provide good tools and functionality that can be used to write Hiven Bots easier. Therefore, openhiven.py is not a simple API-Wrapper but adds nice features to make running a bot easier such as: Data Caching for easier object fetching Event listening using parallel execution and a MessageBroker to distribute processes for larger Bots WebSocket event and message handling for easier usage Usage of in-code event listeners to not be dependent on entire functions Info The openhiven.py module is entirely written in async and can therefore only be used in an async event loop and environment. For more info about asyncio look into the Asyncio documentation","title":"Quickstart"},{"location":"getting_started/index.html#environment","text":"openhiven.py is a Python module and can currently on be run in environments with Python >= 3.7. This is due to the used module aiohttp which requires Functionality only available in Python 3.7 or higher! Python 2 is entirely not supported, and currently, there is no plan to make the module available for Python 2, since many features are dependent on Python 3 and the modern async module of Python 3 as well as aiohttp!","title":"Environment"},{"location":"getting_started/index.html#installation","text":"openhiven.py can be easily installed using pip : PyPi Regular Installation python3 -m pip install -U openhivenpy PyPi Specific Version python3 -m pip install -U openhivenpy == version Github Build Warning Can be unstable due to development status! Only use if you need the most recent development version! python3 -m pip install -U https://github.com/Luna-Klatzer/openhiven.py/archive/main.zip Installing openhiven.py will automatically also include its dependencies, which currently are: aiohttp - Async http client/server framework (asyncio) fastjsonschema - Fastest Python implementation of JSON schema yarl - Yet another URL library python-dotenv - Read key-value pairs from a .env file and set them as environment variable","title":"Installation"},{"location":"getting_started/index.html#basic-concept","text":"The system of openhiven.py is very closely related to the discord.py (Discord Python Wrapper) module and was structured to be similar to it. Therefore, the basic concept is based on an event listener system where events are mapped to user-specified functions and methods. These are user-declared and therefore only what you specify will be executed and utilised, so the handling is up to you.","title":"Basic Concept"},{"location":"getting_started/index.html#the-hiven-swarm","text":"The module uses a aiohttp HTTP Websocket Connection to interact with the Hiven Swarm and react to events that the server sent over it. In case of an event, Hiven will send the corresponding data to you in the form of JSON-wrapped messages which gets automatically handled in openhiven.py. That means the library deals with events, keep-alive, close-frames and handling of the connection, and you only need to configure how to react. So, in this case, the Websocket will then pass the data to the EventHandler where the Hiven Swarm message will get processed, and an event would be triggered if the user declared it.","title":"The Hiven Swarm"},{"location":"getting_started/index.html#event-listening-with-the-eventhandler","text":"The system used here is a classic event listening system where a client listens and waits over the connection for events and triggers specified code when the Websocket received such event. In Web-Languages such as JavaScript, TypeScript, PHP etc. this is common practise and applied for websites, servers and clients. In Python, this is less common, so here it is not already integrated into the language, so openhiven.py uses aiohttp to provide the option for a Connection to Hiven and its own Event Handler , which handles how the Client should react to such events. Now onto actual examples of how that works: To add an event listener, you must declare an async function with the correct name inside the HivenClient. This can be done either by inheriting the Client and then adding the method or using decorators . Async Functions that are tagged with the @client.event() decorator will automatically be registered in the EventHandler and then called whenever an Event is triggered. Note All events that can you can use are listed on the page for the EventHandler . Example with the event on_message_create : import openhivenpy as hiven client = hiven . UserClient ( token = \"\" ) @client . event () async def on_message_create ( msg ): print ( f \" { msg . author . name } send a message: { msg . content } \" ) ...","title":"Event listening with the EventHandler"},{"location":"getting_started/index.html#using-openhivenpy","text":"","title":"Using openhiven.py"},{"location":"getting_started/index.html#using-a-userclient","text":"Source Code \u00b7 openhivenpy.UserClient A UserClient object is an object that wraps the default HivenClient , which serves as a bridge between Hiven, and the Program you are using. The HivenClient contains all data and connection-vital information, but is not supposed to be used directly since some methods are not available due to the raw state. These are special methods related to the bot-type that decides based on what type you are using, resulting in various functionality. These two bot-types are here UserClient and BotClient . For the usage of a HivenClient, you are required to pass your token, which it will use to authorise on Hiven and request data. If no token was passed, it will automatically raise an openhivenpy.exceptions.exception.InvalidToken Exception! Usage Examples Regular Note that using a decorator will also automatically add the function as a method to the Event Handler instance itself so it can call it directly from the Event Handler and it doesn't need to reference the origin! import openhivenpy as hiven client = hiven . UserClient ( \"Insert token\" ) @client . event () async def on_ready (): print ( \"Bot is ready\" ) client . run () Inherited Decorators are useful for beginners and for a quick setup, but it is recommended to use a class which inherits the HivenClient, making the Event listener directly find the methods when needed without needing the methods to be registered. This can save time as well as remove unneeded logic import openhivenpy as hiven class Bot ( hiven . UserClient ): def __init__ ( self , token ): self . _token = token # Calling __init__ of the parent class and inheriting all methods and functionality super () . __init__ ( token ) # Not directly needed but protects the token from ever being changed! @property def token ( self ): return self . _token # Methods can be defined directly in the class async def on_ready ( self ): print ( \"Bot is ready!\" ) if __name__ == '__main__' : client = Bot ( token = \"Insert token\" ) client . run ()","title":"Using a UserClient"},{"location":"getting_started/index.html#using-a-botclient","text":"Source Code \u00b7 openhivenpy.BotClient A Bot Client like the UserClient is a wrapper for the main HivenClient class. It serves as a Class using bot functionality on Hiven. Therefore, it's usage is very similar to the UserClient, but it can specifically utilise Methods and functions related to text-commands and will likely receive in future versions more updates specifically adding that functionality.","title":"Using a BotClient"},{"location":"getting_started/index.html#hiven-types","text":"Source Code \u00b7 openhivenpy.types You might have already noticed in prior examples that instead of raw data openhiven.py sends entire instances of Classes with the event data as parameters. This is because of the type-system openhiven.py uses where objects are created and initialised parallel to the corresponding Hiven ones, making it easier for usage due to the easy attribute and data access of a Python class. These instances can then be used through methods to interact with the Hiven API directly, instead of you having to write your own requests for fetching the data and having to update the objects accordingly yourself. For each possible request openhiven.py already ships a pre-made method to the class which automatically changes data and returns configured objects if that specific methods returns data. For detailed documentation see Data Types","title":"Hiven-Types"},{"location":"getting_started/deploying_your_first_bot.html","text":"Deploying your first Hiven-Bot \u00b6 Warning This documentation page is not finished yet! Information can be outdated or entirely not available! Deploying a Bot is very easy and quick in openhiven.py while also very customisable. With the ability to pass your own EventHandler and also customise handling and connection attributes you have control on how exactly your Bot should run. Currently, due to the early Development Stage of some features some might fail when using, if such a thing happens please report these on the Github Page. Tip For in-dept docs and information about customisation and functionality refer to the Reference pages, where each object is explained and possible usage-examples are shown. Authentication and Tokens \u00b6 As already shown in examples on the page Intro to openhiven.py to use a bot, you need to pass a Token to authorise and connect to Hiven. This token is a key to the account that the Client will be using to interact with the Hiven Platform. Therefore, openhiven.py cannot run without it, since its features depend on such token. Because of that and the risk of other users taking over your account, it is crucial to keep such a token save and not share it on any platform! Doing that could risk that your entire account getting compromised! So try to keep it save! Getting a User-token \u00b6 Step 1: Open your browsers development options. Step 2: Navigate in your Browser to your Web-Console which should allow code to be passed. Step 3: Execute this code-snippet localStorage['hiven-auth'] . This will automatically fetch your token from the local Storage Step 4: Copy the returned hash-string. This string is the token itself which should have a length of 128 characters. Recommended: As already stated in Authentication and Tokens store the token somewhere secure to avoid the risk of your account getting compromised! Getting a Bot-token \u00b6 Info Currently creating a Bot is rather hard and requires a request directly to the Hiven Staff! Get in touch with the Hiven staff to request a Bot or wait until Bot-Accounts have entered Stable State! Setting up a simple Bot \u00b6 Setting up a simple Bot is relatively easy and quick. Choose the right Client-Type, pass a token, customise events and let the bot run. Still, for each Client-Type there are multiple things to know before running: UserClient A UserClient is a Client specifically made for User-Interaction using a User-Account on Hiven! That means it accesses the entire account and has full access to the Users data. Tip Try and create a Bot account if possible. This will avoid the risk of your account getting compromised in a security leak. To that BotClients are very neat and will have in the future a lot of optimisation and options targeted at long-time Bot Usage! BotClient A BotClient is a Client targeted at Bots! That means it has special functionality directed to Bot-Usage and long time execution! That also means user interaction functionality is missing and classic relationships with Users are not supported! Creating a Bot-Account \u00b6 Setting up a simple EventListener \u00b6","title":"Deploying your first Hiven-Bot"},{"location":"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot","text":"Warning This documentation page is not finished yet! Information can be outdated or entirely not available! Deploying a Bot is very easy and quick in openhiven.py while also very customisable. With the ability to pass your own EventHandler and also customise handling and connection attributes you have control on how exactly your Bot should run. Currently, due to the early Development Stage of some features some might fail when using, if such a thing happens please report these on the Github Page. Tip For in-dept docs and information about customisation and functionality refer to the Reference pages, where each object is explained and possible usage-examples are shown.","title":"Deploying your first Hiven-Bot"},{"location":"getting_started/deploying_your_first_bot.html#authentication-and-tokens","text":"As already shown in examples on the page Intro to openhiven.py to use a bot, you need to pass a Token to authorise and connect to Hiven. This token is a key to the account that the Client will be using to interact with the Hiven Platform. Therefore, openhiven.py cannot run without it, since its features depend on such token. Because of that and the risk of other users taking over your account, it is crucial to keep such a token save and not share it on any platform! Doing that could risk that your entire account getting compromised! So try to keep it save!","title":"Authentication and Tokens"},{"location":"getting_started/deploying_your_first_bot.html#getting-a-user-token","text":"Step 1: Open your browsers development options. Step 2: Navigate in your Browser to your Web-Console which should allow code to be passed. Step 3: Execute this code-snippet localStorage['hiven-auth'] . This will automatically fetch your token from the local Storage Step 4: Copy the returned hash-string. This string is the token itself which should have a length of 128 characters. Recommended: As already stated in Authentication and Tokens store the token somewhere secure to avoid the risk of your account getting compromised!","title":"Getting a User-token"},{"location":"getting_started/deploying_your_first_bot.html#getting-a-bot-token","text":"Info Currently creating a Bot is rather hard and requires a request directly to the Hiven Staff! Get in touch with the Hiven staff to request a Bot or wait until Bot-Accounts have entered Stable State!","title":"Getting a Bot-token"},{"location":"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot","text":"Setting up a simple Bot is relatively easy and quick. Choose the right Client-Type, pass a token, customise events and let the bot run. Still, for each Client-Type there are multiple things to know before running: UserClient A UserClient is a Client specifically made for User-Interaction using a User-Account on Hiven! That means it accesses the entire account and has full access to the Users data. Tip Try and create a Bot account if possible. This will avoid the risk of your account getting compromised in a security leak. To that BotClients are very neat and will have in the future a lot of optimisation and options targeted at long-time Bot Usage! BotClient A BotClient is a Client targeted at Bots! That means it has special functionality directed to Bot-Usage and long time execution! That also means user interaction functionality is missing and classic relationships with Users are not supported!","title":"Setting up a simple Bot"},{"location":"getting_started/deploying_your_first_bot.html#creating-a-bot-account","text":"","title":"Creating a Bot-Account"},{"location":"getting_started/deploying_your_first_bot.html#setting-up-a-simple-eventlistener","text":"","title":"Setting up a simple EventListener"},{"location":"getting_started/event_handling.html","text":"Event Handling \u00b6 Warning This documentation page is not finished yet! Information can be outdated or entirely not available!","title":"Event Handling"},{"location":"getting_started/event_handling.html#event-handling","text":"Warning This documentation page is not finished yet! Information can be outdated or entirely not available!","title":"Event Handling"},{"location":"getting_started/logging.html","text":"Logging and Debugging \u00b6 openhiven.py uses to log and report issues and problems the built-in logging module of Python. With logging can you can easily specify how to log errors and customize the output. Specifying the Log Level \u00b6 The module logging is based on multiple levels of importance that specified on the user input will log issues lower that level. Based on the user input it will log only these errors of its own category and higher than it. That means if WARNING was specified, ERROR and CRITICAL will also be logged. The available levels for logging are: Levels Description CRITICAL Logs only very critical errors ERROR Logs only errors WARNING Logs only warnings and errors in the program INFO Logs only vital information about the program DEBUG Logs every output related to the running program See logging levels for complete docs Simple Example of logging \u00b6 To utilise logging you are only required to import the module and specify the level. That can be done in less than two levels. Example import logging logging . basicConfig ( level = logging . INFO ) This code snippet will activate all logging in the range of the program. That means imported modules would also log their information if they have logging used in their module. The resulting log of the prior example would then look like this: INFO:openhivenpy.gateway.http:[HTTP] Session was successfully created! INFO:openhivenpy.gateway.ws:[WEBSOCKET] >> Authorizing with token INFO:openhivenpy.gateway.ws:[WEBSOCKET] << Connection to Hiven Swarm established INFO:openhivenpy.gateway.ws:[WEBSOCKET] >> Initialization of Client was successful! INFO:openhivenpy.types.hiven_client:[CLIENT] Client loaded all data and is ready for usage! Here, the initialization was successful, and the HivenClient connected itself to Hiven and logged no errors. Info DEBUG is excellent for tracing back issues in the program and also seeing how openhiven.py works in the background. INFO is, on the other hand, handy for deployment and usage where the HivenClient should log only errors and vital information. We recommend sticking to one of these two, since higher levels can possibly hide very important information that you might need later if a bug occurs! Advanced Logging \u00b6 If you want to customise the entire output and also specify time and date, you can easily do that with the logging handlers. These handlers are shipped directly with logging, and you only require to create instances of them and then pass your customisations. import logging logger = logging . getLogger ( \"openhivenpy\" ) logger . setLevel ( logging . INFO ) handler = logging . FileHandler ( filename = 'openhiven.log' , encoding = 'utf-8' , mode = 'w' ) handler . setFormatter ( logging . Formatter ( ' %(asctime)s : %(levelname)s : %(name)s : %(message)s ' )) logger . addHandler ( handler ) With this snippet, time, level, and the name of the file would be logged as an addition to the message. To that with the customised File Handler a log file would be created, which then would be used to save the logs instead of just logging them onto the console. For more customization for the logging.Formatter and logging.FileHandler classes visit the logging documentation!","title":"Logging and Debugging"},{"location":"getting_started/logging.html#logging-and-debugging","text":"openhiven.py uses to log and report issues and problems the built-in logging module of Python. With logging can you can easily specify how to log errors and customize the output.","title":"Logging and Debugging"},{"location":"getting_started/logging.html#specifying-the-log-level","text":"The module logging is based on multiple levels of importance that specified on the user input will log issues lower that level. Based on the user input it will log only these errors of its own category and higher than it. That means if WARNING was specified, ERROR and CRITICAL will also be logged. The available levels for logging are: Levels Description CRITICAL Logs only very critical errors ERROR Logs only errors WARNING Logs only warnings and errors in the program INFO Logs only vital information about the program DEBUG Logs every output related to the running program See logging levels for complete docs","title":"Specifying the Log Level"},{"location":"getting_started/logging.html#simple-example-of-logging","text":"To utilise logging you are only required to import the module and specify the level. That can be done in less than two levels. Example import logging logging . basicConfig ( level = logging . INFO ) This code snippet will activate all logging in the range of the program. That means imported modules would also log their information if they have logging used in their module. The resulting log of the prior example would then look like this: INFO:openhivenpy.gateway.http:[HTTP] Session was successfully created! INFO:openhivenpy.gateway.ws:[WEBSOCKET] >> Authorizing with token INFO:openhivenpy.gateway.ws:[WEBSOCKET] << Connection to Hiven Swarm established INFO:openhivenpy.gateway.ws:[WEBSOCKET] >> Initialization of Client was successful! INFO:openhivenpy.types.hiven_client:[CLIENT] Client loaded all data and is ready for usage! Here, the initialization was successful, and the HivenClient connected itself to Hiven and logged no errors. Info DEBUG is excellent for tracing back issues in the program and also seeing how openhiven.py works in the background. INFO is, on the other hand, handy for deployment and usage where the HivenClient should log only errors and vital information. We recommend sticking to one of these two, since higher levels can possibly hide very important information that you might need later if a bug occurs!","title":"Simple Example of logging"},{"location":"getting_started/logging.html#advanced-logging","text":"If you want to customise the entire output and also specify time and date, you can easily do that with the logging handlers. These handlers are shipped directly with logging, and you only require to create instances of them and then pass your customisations. import logging logger = logging . getLogger ( \"openhivenpy\" ) logger . setLevel ( logging . INFO ) handler = logging . FileHandler ( filename = 'openhiven.log' , encoding = 'utf-8' , mode = 'w' ) handler . setFormatter ( logging . Formatter ( ' %(asctime)s : %(levelname)s : %(name)s : %(message)s ' )) logger . addHandler ( handler ) With this snippet, time, level, and the name of the file would be logged as an addition to the message. To that with the customised File Handler a log file would be created, which then would be used to save the logs instead of just logging them onto the console. For more customization for the logging.Formatter and logging.FileHandler classes visit the logging documentation!","title":"Advanced Logging"},{"location":"home/bug_reporting.html","text":"Bug-Reporting \u00b6 Warning This documentation page is not finished yet! Information can be outdated or entirely not available!","title":"Bug-Reporting"},{"location":"home/bug_reporting.html#bug-reporting","text":"Warning This documentation page is not finished yet! Information can be outdated or entirely not available!","title":"Bug-Reporting"},{"location":"home/contributing.html","text":"Contributing \u00b6 Warning This documentation page is not finished yet! Information can be outdated or entirely not available! Welcome to the Contributing page! If you are here to search for options to share your work and maybe ideas for openhiven.py, we are delighted to hear that! Since openhiven.py is a \"free time\" project of Developers, it is heavily dependent on user-feedback, bug reports and also contributions of other users, so it can steadily improve and also stays up-to-date, since Hiven can change very quickly and therefore, the library needs to also apply promptly to these new changes. Using Github \u00b6 It is relatively easy to contribute if you do it the right way. openhiven.py, in this case, uses Github to host it's the repository and manage the project. Therefore, contributions need to be made on Github since else the Developers are not able to correctly integrate your new changes. If you need a guide for Github, go to the github-guides for git and github. Issue-Page \u00b6 The issue-page is where you can easily report issues and bugs, share your ideas, and ask questions to the developers and other people who also use openhiven.py. So, if you want to contribute, that's the place to go to. Just keep in mind trying to give as much information as possible when reporting something, so the developers who read it can understand the issue or contribution. Note For bug reporting info please go to this page Contributing changes \u00b6 If you found your issue, or your feature you want to work on, make a Fork of the repository and then commit changes to that repository on your account. Later, when you are done with the changes you wanted to make, you can make a pull-request, where we can then see what changes you made. Still, for a successful and fast change, a pull-request should contain multiple things: A summary of changes Motivation and reasoning Possible other solutions Effects of the changes and issues that might be solved by them Summary \u00b6 Committing to OpenSource-projects is essential, and that does not only count for this project but for thousands out there that are dependent on the users helping the project when they can! Therefore, if you already have made improvements, reported some bugs or will share some ideas and improvements to an open-source project, you can be sure the owners of the project will forever be thankful for that as long as you do it right and how they want it.","title":"Contributing"},{"location":"home/contributing.html#contributing","text":"Warning This documentation page is not finished yet! Information can be outdated or entirely not available! Welcome to the Contributing page! If you are here to search for options to share your work and maybe ideas for openhiven.py, we are delighted to hear that! Since openhiven.py is a \"free time\" project of Developers, it is heavily dependent on user-feedback, bug reports and also contributions of other users, so it can steadily improve and also stays up-to-date, since Hiven can change very quickly and therefore, the library needs to also apply promptly to these new changes.","title":"Contributing"},{"location":"home/contributing.html#using-github","text":"It is relatively easy to contribute if you do it the right way. openhiven.py, in this case, uses Github to host it's the repository and manage the project. Therefore, contributions need to be made on Github since else the Developers are not able to correctly integrate your new changes. If you need a guide for Github, go to the github-guides for git and github.","title":"Using Github"},{"location":"home/contributing.html#issue-page","text":"The issue-page is where you can easily report issues and bugs, share your ideas, and ask questions to the developers and other people who also use openhiven.py. So, if you want to contribute, that's the place to go to. Just keep in mind trying to give as much information as possible when reporting something, so the developers who read it can understand the issue or contribution. Note For bug reporting info please go to this page","title":"Issue-Page"},{"location":"home/contributing.html#contributing-changes","text":"If you found your issue, or your feature you want to work on, make a Fork of the repository and then commit changes to that repository on your account. Later, when you are done with the changes you wanted to make, you can make a pull-request, where we can then see what changes you made. Still, for a successful and fast change, a pull-request should contain multiple things: A summary of changes Motivation and reasoning Possible other solutions Effects of the changes and issues that might be solved by them","title":"Contributing changes"},{"location":"home/contributing.html#summary","text":"Committing to OpenSource-projects is essential, and that does not only count for this project but for thousands out there that are dependent on the users helping the project when they can! Therefore, if you already have made improvements, reported some bugs or will share some ideas and improvements to an open-source project, you can be sure the owners of the project will forever be thankful for that as long as you do it right and how they want it.","title":"Summary"},{"location":"home/license.html","text":"License \u00b6 MIT License Copyright (c) 2020 - 2021 Luna Klatzer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"home/license.html#license","text":"MIT License Copyright (c) 2020 - 2021 Luna Klatzer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"home/troubleshooting.html","text":"Troubleshooting \u00b6 Warning This documentation page is not finished yet! Information can be outdated or entirely not available! Important Before even starting troubleshooting and testing, it is strongly recommended to activate logging as already shown in Logging ! Issues Downloading the Module \u00b6 If you encounter issues or warnings with downloading openhiven.py, there can be multiple reasons for that. Here is a small list of known issues and possible solutions to solve them: Failed to build wheel This error is a very popular in the Python area where since PEP 427 wheels are used to install python packages more efficiently and effectively! This can be caused by many different issues but here are some possible solutions to them: If wheel or setuptools are missing or outdated install the most recent version of them and also pip just to be sure using: pip install --upgrade pip setuptools wheel If you are using linux or the gcc-compiler try installing the newest version of the gcc compiler which should automatically be used for the building of the wheels. For Linux refer to your Package Manager or Respositor manager where you can install gcc If you are using Windows check if the Microsoft C++ Build Tools are working properly Using legacy 'setup.py install' for {package}, since package 'wheel' is not installed. This warning is caused due to no installation of the package wheel which is required to build and install packages using wheel with pip. To solve simple install wheel using: pip install wheel Unexpected behavior \u00b6 If you encounter unexpected behavior and functionality that is not working like wanted this can either be of a bug of openhiven.py, Connection Problem, Hiven Server error or an issue due to the configuration. If you receive results different from those in the documentation, we first recommend you looking into the logs and activate DEBUG mode to see extended logs about the Bot. If you are using a function, or a method that executes a request there might be an issue with the HTTP request. If this is not the case try to look into the input, debug the program and inspect data for possible issues. If there are no issues found with the data and everything seems fine, please open an issue on the GitHub page for further investigation. We will try to help you and also possibly find the error that caused that issue.","title":"Troubleshooting"},{"location":"home/troubleshooting.html#troubleshooting","text":"Warning This documentation page is not finished yet! Information can be outdated or entirely not available! Important Before even starting troubleshooting and testing, it is strongly recommended to activate logging as already shown in Logging !","title":"Troubleshooting"},{"location":"home/troubleshooting.html#issues-downloading-the-module","text":"If you encounter issues or warnings with downloading openhiven.py, there can be multiple reasons for that. Here is a small list of known issues and possible solutions to solve them: Failed to build wheel This error is a very popular in the Python area where since PEP 427 wheels are used to install python packages more efficiently and effectively! This can be caused by many different issues but here are some possible solutions to them: If wheel or setuptools are missing or outdated install the most recent version of them and also pip just to be sure using: pip install --upgrade pip setuptools wheel If you are using linux or the gcc-compiler try installing the newest version of the gcc compiler which should automatically be used for the building of the wheels. For Linux refer to your Package Manager or Respositor manager where you can install gcc If you are using Windows check if the Microsoft C++ Build Tools are working properly Using legacy 'setup.py install' for {package}, since package 'wheel' is not installed. This warning is caused due to no installation of the package wheel which is required to build and install packages using wheel with pip. To solve simple install wheel using: pip install wheel","title":"Issues Downloading the Module"},{"location":"home/troubleshooting.html#unexpected-behavior","text":"If you encounter unexpected behavior and functionality that is not working like wanted this can either be of a bug of openhiven.py, Connection Problem, Hiven Server error or an issue due to the configuration. If you receive results different from those in the documentation, we first recommend you looking into the logs and activate DEBUG mode to see extended logs about the Bot. If you are using a function, or a method that executes a request there might be an issue with the HTTP request. If this is not the case try to look into the input, debug the program and inspect data for possible issues. If there are no issues found with the data and everything seems fine, please open an issue on the GitHub page for further investigation. We will try to help you and also possibly find the error that caused that issue.","title":"Unexpected behavior"},{"location":"reference/cache.html","text":"Client Cache \u00b6 openhivenpy.client.cache.ClientCache \u00b6 Client Cache Class used for storing all data of the Client. Emulates a dictionary and contains additional functions to interact with the Client cache more easily and use functions for better readability. Methods \u00b6 __init__ ( self , client , ** kwargs ) special \u00b6 Source code in openhivenpy\\client\\cache.py def __init__ ( self , client : HivenClient , ** kwargs ): super ( ClientCache , self ) . __init__ ( ** kwargs ) self . client = client self . update ( # Updating the passed dict as well to avoid data being overwritten # that were passed with args or kwargs utils . update_and_return ( create_default_cache (), ** kwargs ) ) add_or_update_entity ( self , item_data ) \u00b6 Adds or updates a entity to the cache and updates the storage appropriately Returns: Type Description dict The validated data using format_obj_data of the Entity class Source code in openhivenpy\\client\\cache.py def add_or_update_entity ( self , item_data : dict ) -> dict : \"\"\" Adds or updates a entity to the cache and updates the storage appropriately :return: The validated data using `format_obj_data` of the Entity class \"\"\" self . check_if_initialised () try : data = deepcopy ( item_data ) id_ = data [ 'id' ] data = types . Entity . format_obj_data ( data ) if self [ 'entities' ] . get ( id_ ) is None : self [ 'entities' ][ id_ ] = data else : self [ 'entities' ][ id_ ] . update ( data ) return data except Exception as e : utils . log_traceback ( brief = f \"Failed to add a new entity to the Client cache:\" , exc_info = sys . exc_info () ) raise InvalidPassedDataError ( \"Failed to update the cache due to faulty data being passed\" , data = item_data ) from e add_or_update_house ( self , item_data ) \u00b6 Adds or updates a house to the cache and updates the storage appropriately Returns: Type Description dict The validated data using format_obj_data of the House class Source code in openhivenpy\\client\\cache.py def add_or_update_house ( self , item_data : dict ) -> dict : \"\"\" Adds or updates a house to the cache and updates the storage appropriately :return: The validated data using `format_obj_data` of the House class \"\"\" self . check_if_initialised () try : data = deepcopy ( item_data ) id_ = data [ 'id' ] for room in data [ 'rooms' ]: room [ 'house_id' ] = id_ self . add_or_update_room ( room ) for member in data [ 'members' ]: member [ 'house_id' ] = id_ # Adding the users already user = types . User . format_obj_data ( member [ 'user' ]) self . add_or_update_user ( user ) for entity in data [ 'entities' ]: entity [ 'house_id' ] = id_ self . add_or_update_entity ( entity ) data = types . House . format_obj_data ( data ) data [ 'client_member' ] = data [ 'members' ][ self [ 'client_user' ][ 'id' ]] if self [ 'houses' ] . get ( id_ ) is None : # Checking whether id does not already exist # On init house_ids is already populated using the event # INIT_STATE, though HOUSE_JOIN triggers this function, meaning # we have to avoid creating duplicates on initialisation if id_ not in self [ 'house_ids' ]: self [ 'house_ids' ] . append ( id_ ) self [ 'houses' ][ id_ ] = data else : self [ 'houses' ][ id_ ] . update ( data ) # After the House was created altering the cached data for member in data [ 'members' ] . values (): self . add_or_update_house_member ( member ) return data except Exception as e : utils . log_traceback ( brief = f \"Failed to add a new house to the Client cache:\" , exc_info = sys . exc_info () ) raise InvalidPassedDataError ( \"Failed to update the cache due to faulty data being passed\" , data = item_data ) from e add_or_update_house_member ( self , item_data ) \u00b6 Adds or updates a member inside a House storage Returns: Type Description dict The validated data using format_obj_data of the Member class Source code in openhivenpy\\client\\cache.py def add_or_update_house_member ( self , item_data : dict ) -> dict : \"\"\" Adds or updates a member inside a House storage :return: The validated data using `format_obj_data` of the Member class \"\"\" self . check_if_initialised () try : # If not dict -> User property was replaced - # house.format_obj_data() replaced it with the ids of the # corresponding users if type ( item_data [ 'user' ]) is not dict : item_data [ 'user' ] = self . client . find_user ( item_data [ 'user' ]) member = types . Member . format_obj_data ( item_data ) mem_id = item_data [ 'user_id' ] if item_data . get ( 'user_id' ) \\ else item_data . get ( 'user' , {}) . get ( 'id' ) house_id = item_data [ 'house_id' ] if mem_id in self [ 'houses' ][ house_id ][ 'members' ] . keys (): self [ 'houses' ][ house_id ][ 'members' ][ mem_id ] . update ( member ) else : self [ 'houses' ][ house_id ][ 'members' ][ mem_id ] = member user = types . User . format_obj_data ( item_data [ 'user' ]) self . add_or_update_user ( user ) return member except Exception as e : utils . log_traceback ( brief = f \"Failed to add a new member to the Client cache:\" , exc_info = sys . exc_info () ) raise InvalidPassedDataError ( \"Failed to update the cache due to faulty data being passed\" , data = item_data ) from e add_or_update_private_room ( self , item_data ) \u00b6 Adds or updates a private room to the cache and updates the storage appropriately Returns: Type Description dict The validated data using format_obj_data of the Private_*Room class Source code in openhivenpy\\client\\cache.py def add_or_update_private_room ( self , item_data : dict ) -> dict : \"\"\" Adds or updates a private room to the cache and updates the storage appropriately :return: The validated data using `format_obj_data` of the Private_*Room class \"\"\" self . check_if_initialised () try : data = deepcopy ( item_data ) id_ = data [ 'id' ] if int ( data [ 'type' ]) == 1 : types . PrivateRoom . format_obj_data ( data ) if self [ 'rooms' ][ 'private' ][ 'single' ] . get ( id_ ) is None : self [ 'rooms' ][ 'private' ][ 'single' ][ id_ ] = data else : self [ 'rooms' ][ 'private' ][ 'single' ][ id_ ] . update ( data ) elif int ( data [ 'type' ]) == 2 : types . PrivateGroupRoom . format_obj_data ( data ) if self [ 'rooms' ][ 'private' ][ 'group' ] . get ( id_ ) is None : self [ 'rooms' ][ 'private' ][ 'group' ][ id_ ] = data else : self [ 'rooms' ][ 'private' ][ 'group' ][ id_ ] . update ( data ) else : raise ValueError ( \"Data does not contain correct type-id\" ) return data except Exception as e : utils . log_traceback ( brief = f \"Failed to add a new private room to the Client cache:\" , exc_info = sys . exc_info () ) raise InvalidPassedDataError ( \"Failed to update the cache due to faulty data being passed\" , data = item_data ) from e add_or_update_relationship ( self , item_data ) \u00b6 Adds or updates a client relationship to the cache and updates the storage appropriately Returns: Type Description dict The validated data using format_obj_data of the Relationship class Source code in openhivenpy\\client\\cache.py def add_or_update_relationship ( self , item_data : dict ) -> dict : \"\"\" Adds or updates a client relationship to the cache and updates the storage appropriately :return: The validated data using `format_obj_data` of the Relationship class \"\"\" self . check_if_initialised () try : data = deepcopy ( item_data ) if 'user_id' in data . keys (): id_ = data [ 'user_id' ] elif 'id' in data . keys (): id_ = data [ 'id' ] elif data . get ( 'user' ): id_ = data [ 'user' ][ 'id' ] else : raise InvalidPassedDataError ( \"The data does not contain any correct id item\" \" or user field\" , data = data ) # how? if data . get ( 'user' ): self . add_or_update_user ( data [ 'user' ]) data = types . Relationship . format_obj_data ( data ) if self [ 'relationships' ] . get ( id_ ) is None : self [ 'relationships' ][ id_ ] = data else : self [ 'relationships' ][ id_ ] . update ( data ) return data except Exception as e : utils . log_traceback ( brief = f \"Failed to add a new relationship to the Client cache:\" , exc_info = sys . exc_info () ) raise InvalidPassedDataError ( \"Failed to update the cache due to faulty data being passed\" , data = item_data ) from e add_or_update_room ( self , item_data ) \u00b6 Adds or updates a room to the cache and updates the storage appropriately Returns: Type Description dict The validated data using format_obj_data of the Room class Source code in openhivenpy\\client\\cache.py def add_or_update_room ( self , item_data : dict ) -> dict : \"\"\" Adds or updates a room to the cache and updates the storage appropriately :return: The validated data using `format_obj_data` of the Room class \"\"\" self . check_if_initialised () try : data = deepcopy ( item_data ) id_ = data [ 'id' ] data = types . TextRoom . format_obj_data ( data ) if self [ 'rooms' ][ 'house' ] . get ( id_ ) is None : self [ 'rooms' ][ 'house' ][ id_ ] = data else : self [ 'rooms' ][ 'house' ][ id_ ] . update ( data ) return data except Exception as e : utils . log_traceback ( brief = f \"Failed to add a new room to the Client cache:\" , exc_info = sys . exc_info () ) raise InvalidPassedDataError ( \"Failed to update the cache due to faulty data being passed\" , data = item_data ) from e add_or_update_user ( self , item_data ) \u00b6 Adds or updates a user to the cache and updates the storage appropriately Returns: Type Description dict The validated data using format_obj_data of the User class Source code in openhivenpy\\client\\cache.py def add_or_update_user ( self , item_data : dict ) -> dict : \"\"\" Adds or updates a user to the cache and updates the storage appropriately :return: The validated data using `format_obj_data` of the User class \"\"\" self . check_if_initialised () try : data = deepcopy ( item_data ) id_ = data [ 'id' ] data = types . User . format_obj_data ( data ) if id_ == self [ 'client_user' ] . get ( 'id' ): self . update_client_user ( data ) if self [ 'users' ] . get ( id_ ) is None : self [ 'users' ][ id_ ] = data else : self [ 'users' ][ id_ ] . update ( data ) return data except Exception as e : utils . log_traceback ( brief = f \"Failed to add a new user to the Client cache:\" , exc_info = sys . exc_info () ) raise InvalidPassedDataError ( \"Failed to update the cache due to faulty data being passed\" , data = item_data ) from e check_if_initialised ( self ) \u00b6 Checks whether the client has initialised Exceptions: Type Description ValueError If the client_user is not initialised Source code in openhivenpy\\client\\cache.py def check_if_initialised ( self ) -> bool : \"\"\" Checks whether the client has initialised :raises ValueError: If the client_user is not initialised \"\"\" if self . get ( 'client_user' ): return True else : raise ValueError ( \"Updates require an initialised Hiven Client!\" ) closing_cleanup ( self ) \u00b6 Cleans all remaining data after the client exited. Not supposed to be called outside of the intended HivenClient.close() method! Source code in openhivenpy\\client\\cache.py def closing_cleanup ( self ) -> None : \"\"\" Cleans all remaining data after the client exited. Not supposed to be called outside of the intended HivenClient.close() method! \"\"\" self . update ( create_default_cache ()) init_client_user_obj ( self ) \u00b6 Initialises the client user based on the cached data Source code in openhivenpy\\client\\cache.py def init_client_user_obj ( self ) -> types . User : \"\"\" Initialises the client user based on the cached data \"\"\" return types . User ( self [ 'client_user' ], self . client ) remove_entity ( self , _id ) \u00b6 Removes an entity from the cache Source code in openhivenpy\\client\\cache.py def remove_entity ( self , _id : str ) -> None : \"\"\" Removes an entity from the cache \"\"\" self . check_if_initialised () del self [ 'entities' ][ _id ] remove_house ( self , _id ) \u00b6 Removes a house from the cache Source code in openhivenpy\\client\\cache.py def remove_house ( self , _id : str ) -> None : \"\"\" Removes a house from the cache \"\"\" self . check_if_initialised () for room in self [ 'houses' ][ _id ][ 'rooms' ]: room : str self . remove_room ( room ) for entity in self [ 'houses' ][ _id ][ 'entities' ]: entity : str self . remove_entity ( entity ) del self [ 'houses' ][ _id ] self [ 'house_ids' ]: list self [ 'house_ids' ] . remove ( _id ) remove_house_member ( self , member_id , house_id ) \u00b6 Removes a house from the cache Source code in openhivenpy\\client\\cache.py def remove_house_member ( self , member_id : str , house_id : str ) -> None : \"\"\" Removes a house from the cache \"\"\" self . check_if_initialised () del self [ 'houses' ][ house_id ][ 'members' ][ member_id ] remove_private_room ( self , _id ) \u00b6 Removes a private-room from the cache Source code in openhivenpy\\client\\cache.py def remove_private_room ( self , _id : str ) -> None : \"\"\" Removes a private-room from the cache \"\"\" self . check_if_initialised () for i in self [ 'rooms' ][ 'private' ][ 'group' ]: if i . get ( 'id' ) == _id : del self [ 'rooms' ][ 'private' ][ 'group' ][ _id ] return for i in self [ 'rooms' ][ 'private' ][ 'single' ]: if i . get ( 'id' ) == _id : del self [ 'rooms' ][ 'private' ][ 'single' ][ _id ] remove_relationship ( self , _id ) \u00b6 Removes a relationship from the cache Source code in openhivenpy\\client\\cache.py def remove_relationship ( self , _id : str ) -> None : \"\"\" Removes a relationship from the cache \"\"\" self . check_if_initialised () del self [ 'relationships' ][ _id ] remove_room ( self , _id ) \u00b6 Removes a room from the cache Source code in openhivenpy\\client\\cache.py def remove_room ( self , _id : str ) -> None : \"\"\" Removes a room from the cache \"\"\" self . check_if_initialised () del self [ 'rooms' ][ 'house' ][ _id ] remove_user ( self , _id ) \u00b6 Removes a user from the cache Source code in openhivenpy\\client\\cache.py def remove_user ( self , _id : str ) -> None : \"\"\" Removes a user from the cache \"\"\" self . check_if_initialised () del self [ 'users' ][ _id ] update_client_user ( self , item_data ) \u00b6 Updating the Client Cache Data from the passed data dict Returns: Type Description dict The validated data using format_obj_data of the User class Source code in openhivenpy\\client\\cache.py def update_client_user ( self , item_data : dict ) -> dict : \"\"\" Updating the Client Cache Data from the passed data dict :return: The validated data using `format_obj_data` of the User class \"\"\" data = deepcopy ( item_data ) client_user = types . User . format_obj_data ( data ) self [ 'client_user' ] . update ( client_user ) if self [ 'users' ] . get ( data [ 'id' ]) is not None : self [ 'users' ][ data [ 'id' ]] . update ( client_user ) else : self [ 'users' ][ data [ 'id' ]] = client_user return client_user update_primary_data ( self , item_data ) \u00b6 Updates in the cache the following data: - List of all House Memberships - List of all House Ids - The Client settings of the user - The read state of messages - All open Private Rooms - All Relationships of the user Source code in openhivenpy\\client\\cache.py def update_primary_data ( self , item_data : dict ) -> None : \"\"\" Updates in the cache the following data: - List of all House Memberships - List of all House Ids - The Client settings of the user - The read state of messages - All open Private Rooms - All Relationships of the user \"\"\" data = deepcopy ( item_data ) self [ 'house_ids' ] = data . get ( 'house_ids' , []) self [ 'settings' ] = data . get ( 'settings' , {}) self [ 'init_read_state' ] = data . get ( 'read_state' , {}) self . update_client_user ( data . get ( 'user' )) for r in data . get ( 'private_rooms' , []): self . add_or_update_private_room ( r ) for key , data in data . get ( 'relationships' , []) . items (): self . add_or_update_relationship ( data )","title":"Client Cache"},{"location":"reference/cache.html#client-cache","text":"","title":"Client Cache"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache","text":"Client Cache Class used for storing all data of the Client. Emulates a dictionary and contains additional functions to interact with the Client cache more easily and use functions for better readability.","title":"ClientCache"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache-methods","text":"","title":"Methods"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__","text":"Source code in openhivenpy\\client\\cache.py def __init__ ( self , client : HivenClient , ** kwargs ): super ( ClientCache , self ) . __init__ ( ** kwargs ) self . client = client self . update ( # Updating the passed dict as well to avoid data being overwritten # that were passed with args or kwargs utils . update_and_return ( create_default_cache (), ** kwargs ) )","title":"__init__()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity","text":"Adds or updates a entity to the cache and updates the storage appropriately Returns: Type Description dict The validated data using format_obj_data of the Entity class Source code in openhivenpy\\client\\cache.py def add_or_update_entity ( self , item_data : dict ) -> dict : \"\"\" Adds or updates a entity to the cache and updates the storage appropriately :return: The validated data using `format_obj_data` of the Entity class \"\"\" self . check_if_initialised () try : data = deepcopy ( item_data ) id_ = data [ 'id' ] data = types . Entity . format_obj_data ( data ) if self [ 'entities' ] . get ( id_ ) is None : self [ 'entities' ][ id_ ] = data else : self [ 'entities' ][ id_ ] . update ( data ) return data except Exception as e : utils . log_traceback ( brief = f \"Failed to add a new entity to the Client cache:\" , exc_info = sys . exc_info () ) raise InvalidPassedDataError ( \"Failed to update the cache due to faulty data being passed\" , data = item_data ) from e","title":"add_or_update_entity()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house","text":"Adds or updates a house to the cache and updates the storage appropriately Returns: Type Description dict The validated data using format_obj_data of the House class Source code in openhivenpy\\client\\cache.py def add_or_update_house ( self , item_data : dict ) -> dict : \"\"\" Adds or updates a house to the cache and updates the storage appropriately :return: The validated data using `format_obj_data` of the House class \"\"\" self . check_if_initialised () try : data = deepcopy ( item_data ) id_ = data [ 'id' ] for room in data [ 'rooms' ]: room [ 'house_id' ] = id_ self . add_or_update_room ( room ) for member in data [ 'members' ]: member [ 'house_id' ] = id_ # Adding the users already user = types . User . format_obj_data ( member [ 'user' ]) self . add_or_update_user ( user ) for entity in data [ 'entities' ]: entity [ 'house_id' ] = id_ self . add_or_update_entity ( entity ) data = types . House . format_obj_data ( data ) data [ 'client_member' ] = data [ 'members' ][ self [ 'client_user' ][ 'id' ]] if self [ 'houses' ] . get ( id_ ) is None : # Checking whether id does not already exist # On init house_ids is already populated using the event # INIT_STATE, though HOUSE_JOIN triggers this function, meaning # we have to avoid creating duplicates on initialisation if id_ not in self [ 'house_ids' ]: self [ 'house_ids' ] . append ( id_ ) self [ 'houses' ][ id_ ] = data else : self [ 'houses' ][ id_ ] . update ( data ) # After the House was created altering the cached data for member in data [ 'members' ] . values (): self . add_or_update_house_member ( member ) return data except Exception as e : utils . log_traceback ( brief = f \"Failed to add a new house to the Client cache:\" , exc_info = sys . exc_info () ) raise InvalidPassedDataError ( \"Failed to update the cache due to faulty data being passed\" , data = item_data ) from e","title":"add_or_update_house()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member","text":"Adds or updates a member inside a House storage Returns: Type Description dict The validated data using format_obj_data of the Member class Source code in openhivenpy\\client\\cache.py def add_or_update_house_member ( self , item_data : dict ) -> dict : \"\"\" Adds or updates a member inside a House storage :return: The validated data using `format_obj_data` of the Member class \"\"\" self . check_if_initialised () try : # If not dict -> User property was replaced - # house.format_obj_data() replaced it with the ids of the # corresponding users if type ( item_data [ 'user' ]) is not dict : item_data [ 'user' ] = self . client . find_user ( item_data [ 'user' ]) member = types . Member . format_obj_data ( item_data ) mem_id = item_data [ 'user_id' ] if item_data . get ( 'user_id' ) \\ else item_data . get ( 'user' , {}) . get ( 'id' ) house_id = item_data [ 'house_id' ] if mem_id in self [ 'houses' ][ house_id ][ 'members' ] . keys (): self [ 'houses' ][ house_id ][ 'members' ][ mem_id ] . update ( member ) else : self [ 'houses' ][ house_id ][ 'members' ][ mem_id ] = member user = types . User . format_obj_data ( item_data [ 'user' ]) self . add_or_update_user ( user ) return member except Exception as e : utils . log_traceback ( brief = f \"Failed to add a new member to the Client cache:\" , exc_info = sys . exc_info () ) raise InvalidPassedDataError ( \"Failed to update the cache due to faulty data being passed\" , data = item_data ) from e","title":"add_or_update_house_member()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room","text":"Adds or updates a private room to the cache and updates the storage appropriately Returns: Type Description dict The validated data using format_obj_data of the Private_*Room class Source code in openhivenpy\\client\\cache.py def add_or_update_private_room ( self , item_data : dict ) -> dict : \"\"\" Adds or updates a private room to the cache and updates the storage appropriately :return: The validated data using `format_obj_data` of the Private_*Room class \"\"\" self . check_if_initialised () try : data = deepcopy ( item_data ) id_ = data [ 'id' ] if int ( data [ 'type' ]) == 1 : types . PrivateRoom . format_obj_data ( data ) if self [ 'rooms' ][ 'private' ][ 'single' ] . get ( id_ ) is None : self [ 'rooms' ][ 'private' ][ 'single' ][ id_ ] = data else : self [ 'rooms' ][ 'private' ][ 'single' ][ id_ ] . update ( data ) elif int ( data [ 'type' ]) == 2 : types . PrivateGroupRoom . format_obj_data ( data ) if self [ 'rooms' ][ 'private' ][ 'group' ] . get ( id_ ) is None : self [ 'rooms' ][ 'private' ][ 'group' ][ id_ ] = data else : self [ 'rooms' ][ 'private' ][ 'group' ][ id_ ] . update ( data ) else : raise ValueError ( \"Data does not contain correct type-id\" ) return data except Exception as e : utils . log_traceback ( brief = f \"Failed to add a new private room to the Client cache:\" , exc_info = sys . exc_info () ) raise InvalidPassedDataError ( \"Failed to update the cache due to faulty data being passed\" , data = item_data ) from e","title":"add_or_update_private_room()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship","text":"Adds or updates a client relationship to the cache and updates the storage appropriately Returns: Type Description dict The validated data using format_obj_data of the Relationship class Source code in openhivenpy\\client\\cache.py def add_or_update_relationship ( self , item_data : dict ) -> dict : \"\"\" Adds or updates a client relationship to the cache and updates the storage appropriately :return: The validated data using `format_obj_data` of the Relationship class \"\"\" self . check_if_initialised () try : data = deepcopy ( item_data ) if 'user_id' in data . keys (): id_ = data [ 'user_id' ] elif 'id' in data . keys (): id_ = data [ 'id' ] elif data . get ( 'user' ): id_ = data [ 'user' ][ 'id' ] else : raise InvalidPassedDataError ( \"The data does not contain any correct id item\" \" or user field\" , data = data ) # how? if data . get ( 'user' ): self . add_or_update_user ( data [ 'user' ]) data = types . Relationship . format_obj_data ( data ) if self [ 'relationships' ] . get ( id_ ) is None : self [ 'relationships' ][ id_ ] = data else : self [ 'relationships' ][ id_ ] . update ( data ) return data except Exception as e : utils . log_traceback ( brief = f \"Failed to add a new relationship to the Client cache:\" , exc_info = sys . exc_info () ) raise InvalidPassedDataError ( \"Failed to update the cache due to faulty data being passed\" , data = item_data ) from e","title":"add_or_update_relationship()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room","text":"Adds or updates a room to the cache and updates the storage appropriately Returns: Type Description dict The validated data using format_obj_data of the Room class Source code in openhivenpy\\client\\cache.py def add_or_update_room ( self , item_data : dict ) -> dict : \"\"\" Adds or updates a room to the cache and updates the storage appropriately :return: The validated data using `format_obj_data` of the Room class \"\"\" self . check_if_initialised () try : data = deepcopy ( item_data ) id_ = data [ 'id' ] data = types . TextRoom . format_obj_data ( data ) if self [ 'rooms' ][ 'house' ] . get ( id_ ) is None : self [ 'rooms' ][ 'house' ][ id_ ] = data else : self [ 'rooms' ][ 'house' ][ id_ ] . update ( data ) return data except Exception as e : utils . log_traceback ( brief = f \"Failed to add a new room to the Client cache:\" , exc_info = sys . exc_info () ) raise InvalidPassedDataError ( \"Failed to update the cache due to faulty data being passed\" , data = item_data ) from e","title":"add_or_update_room()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user","text":"Adds or updates a user to the cache and updates the storage appropriately Returns: Type Description dict The validated data using format_obj_data of the User class Source code in openhivenpy\\client\\cache.py def add_or_update_user ( self , item_data : dict ) -> dict : \"\"\" Adds or updates a user to the cache and updates the storage appropriately :return: The validated data using `format_obj_data` of the User class \"\"\" self . check_if_initialised () try : data = deepcopy ( item_data ) id_ = data [ 'id' ] data = types . User . format_obj_data ( data ) if id_ == self [ 'client_user' ] . get ( 'id' ): self . update_client_user ( data ) if self [ 'users' ] . get ( id_ ) is None : self [ 'users' ][ id_ ] = data else : self [ 'users' ][ id_ ] . update ( data ) return data except Exception as e : utils . log_traceback ( brief = f \"Failed to add a new user to the Client cache:\" , exc_info = sys . exc_info () ) raise InvalidPassedDataError ( \"Failed to update the cache due to faulty data being passed\" , data = item_data ) from e","title":"add_or_update_user()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised","text":"Checks whether the client has initialised Exceptions: Type Description ValueError If the client_user is not initialised Source code in openhivenpy\\client\\cache.py def check_if_initialised ( self ) -> bool : \"\"\" Checks whether the client has initialised :raises ValueError: If the client_user is not initialised \"\"\" if self . get ( 'client_user' ): return True else : raise ValueError ( \"Updates require an initialised Hiven Client!\" )","title":"check_if_initialised()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup","text":"Cleans all remaining data after the client exited. Not supposed to be called outside of the intended HivenClient.close() method! Source code in openhivenpy\\client\\cache.py def closing_cleanup ( self ) -> None : \"\"\" Cleans all remaining data after the client exited. Not supposed to be called outside of the intended HivenClient.close() method! \"\"\" self . update ( create_default_cache ())","title":"closing_cleanup()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj","text":"Initialises the client user based on the cached data Source code in openhivenpy\\client\\cache.py def init_client_user_obj ( self ) -> types . User : \"\"\" Initialises the client user based on the cached data \"\"\" return types . User ( self [ 'client_user' ], self . client )","title":"init_client_user_obj()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity","text":"Removes an entity from the cache Source code in openhivenpy\\client\\cache.py def remove_entity ( self , _id : str ) -> None : \"\"\" Removes an entity from the cache \"\"\" self . check_if_initialised () del self [ 'entities' ][ _id ]","title":"remove_entity()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house","text":"Removes a house from the cache Source code in openhivenpy\\client\\cache.py def remove_house ( self , _id : str ) -> None : \"\"\" Removes a house from the cache \"\"\" self . check_if_initialised () for room in self [ 'houses' ][ _id ][ 'rooms' ]: room : str self . remove_room ( room ) for entity in self [ 'houses' ][ _id ][ 'entities' ]: entity : str self . remove_entity ( entity ) del self [ 'houses' ][ _id ] self [ 'house_ids' ]: list self [ 'house_ids' ] . remove ( _id )","title":"remove_house()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member","text":"Removes a house from the cache Source code in openhivenpy\\client\\cache.py def remove_house_member ( self , member_id : str , house_id : str ) -> None : \"\"\" Removes a house from the cache \"\"\" self . check_if_initialised () del self [ 'houses' ][ house_id ][ 'members' ][ member_id ]","title":"remove_house_member()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room","text":"Removes a private-room from the cache Source code in openhivenpy\\client\\cache.py def remove_private_room ( self , _id : str ) -> None : \"\"\" Removes a private-room from the cache \"\"\" self . check_if_initialised () for i in self [ 'rooms' ][ 'private' ][ 'group' ]: if i . get ( 'id' ) == _id : del self [ 'rooms' ][ 'private' ][ 'group' ][ _id ] return for i in self [ 'rooms' ][ 'private' ][ 'single' ]: if i . get ( 'id' ) == _id : del self [ 'rooms' ][ 'private' ][ 'single' ][ _id ]","title":"remove_private_room()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship","text":"Removes a relationship from the cache Source code in openhivenpy\\client\\cache.py def remove_relationship ( self , _id : str ) -> None : \"\"\" Removes a relationship from the cache \"\"\" self . check_if_initialised () del self [ 'relationships' ][ _id ]","title":"remove_relationship()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room","text":"Removes a room from the cache Source code in openhivenpy\\client\\cache.py def remove_room ( self , _id : str ) -> None : \"\"\" Removes a room from the cache \"\"\" self . check_if_initialised () del self [ 'rooms' ][ 'house' ][ _id ]","title":"remove_room()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user","text":"Removes a user from the cache Source code in openhivenpy\\client\\cache.py def remove_user ( self , _id : str ) -> None : \"\"\" Removes a user from the cache \"\"\" self . check_if_initialised () del self [ 'users' ][ _id ]","title":"remove_user()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user","text":"Updating the Client Cache Data from the passed data dict Returns: Type Description dict The validated data using format_obj_data of the User class Source code in openhivenpy\\client\\cache.py def update_client_user ( self , item_data : dict ) -> dict : \"\"\" Updating the Client Cache Data from the passed data dict :return: The validated data using `format_obj_data` of the User class \"\"\" data = deepcopy ( item_data ) client_user = types . User . format_obj_data ( data ) self [ 'client_user' ] . update ( client_user ) if self [ 'users' ] . get ( data [ 'id' ]) is not None : self [ 'users' ][ data [ 'id' ]] . update ( client_user ) else : self [ 'users' ][ data [ 'id' ]] = client_user return client_user","title":"update_client_user()"},{"location":"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data","text":"Updates in the cache the following data: - List of all House Memberships - List of all House Ids - The Client settings of the user - The read state of messages - All open Private Rooms - All Relationships of the user Source code in openhivenpy\\client\\cache.py def update_primary_data ( self , item_data : dict ) -> None : \"\"\" Updates in the cache the following data: - List of all House Memberships - List of all House Ids - The Client settings of the user - The read state of messages - All open Private Rooms - All Relationships of the user \"\"\" data = deepcopy ( item_data ) self [ 'house_ids' ] = data . get ( 'house_ids' , []) self [ 'settings' ] = data . get ( 'settings' , {}) self [ 'init_read_state' ] = data . get ( 'read_state' , {}) self . update_client_user ( data . get ( 'user' )) for r in data . get ( 'private_rooms' , []): self . add_or_update_private_room ( r ) for key , data in data . get ( 'relationships' , []) . items (): self . add_or_update_relationship ( data )","title":"update_primary_data()"},{"location":"reference/events.html","text":"HivenEventHandler and Listeners \u00b6 Important DispatchEventListener is the base Class for SingleDispatchEventListener and MultiDispatchEventListener , which should not be used openhivenpy.events.DispatchEventListener \u00b6 Base Class for all DispatchEventListeners awaitable : Union [ Awaitable , Callable ] property readonly \u00b6 client : HivenClient property readonly \u00b6 event_name : str property readonly \u00b6 Methods \u00b6 __call__ ( self , * args , ** kwargs ) special \u00b6 Returns the dispatch function of the class itself Parameters: Name Type Description Default event_data Data of the received event required args Args that will be passed to the coroutine () kwargs Kwargs that will be passed to the coroutine {} Returns: Type Description Union[Coroutine, Awaitable] The coroutine instance which can be used in an await expression or asyncio functions Source code in openhivenpy\\events\\__init__.py def __call__ ( self , * args , ** kwargs ) -> Union [ Coroutine , Awaitable ]: \"\"\" Returns the dispatch function of the class itself :param event_data: Data of the received event :param args: Args that will be passed to the coroutine :param kwargs: Kwargs that will be passed to the coroutine :return: The coroutine instance which can be used in an await expression or asyncio functions \"\"\" dispatch : Union [ Callable , Union [ Awaitable , Callable ]] = getattr ( self , 'dispatch' ) return dispatch ( * args , ** kwargs ) __init__ ( self , client , event_name , awaitable ) special \u00b6 Source code in openhivenpy\\events\\__init__.py def __init__ ( self , client : HivenClient , event_name : str , awaitable : Union [ Awaitable , Callable ] ): self . _client = client self . _event_name = event_name self . _awaitable : Optional [ Awaitable ] = None self . set_awaitable ( awaitable ) self . _client . add_listener ( self ) __repr__ ( self ) special \u00b6 Source code in openhivenpy\\events\\__init__.py def __repr__ ( self ): info = [ ( 'event_name' , getattr ( self , 'event_name' , None )), ( 'awaitable' , getattr ( self , 'awaitable' , None )) ] return '<MultiDispatchEventListener {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ) ) __str__ ( self ) special \u00b6 Source code in openhivenpy\\events\\__init__.py def __str__ ( self ): return f \"< { self . __class__ . __name__ } for event { self . event_name } >\" dispatch ( self ) async \u00b6 Source code in openhivenpy\\events\\__init__.py async def dispatch ( self ) -> None : ... set_awaitable ( self , awaitable ) \u00b6 Sets the coroutine of the event_listener, which will be called when ws-events are received Parameters: Name Type Description Default awaitable Union[Awaitable, Callable] Awaitable (Coroutine Function). Can NOT be a initialised coroutine, since parameters will be passed on Runtime and coroutines are limited to a one-time execution. Coroutine functions or standard asyncio awaitable functions are defined using the async def syntax required Source code in openhivenpy\\events\\__init__.py def set_awaitable ( self , awaitable : Union [ Awaitable , Callable ]) -> None : \"\"\" Sets the coroutine of the event_listener, which will be called when ws-events are received :param awaitable: Awaitable (Coroutine Function). Can NOT be a initialised coroutine, since parameters will be passed on Runtime and coroutines are limited to a one-time execution. Coroutine functions or standard asyncio awaitable functions are defined using the `async def` syntax \"\"\" if inspect . isawaitable ( awaitable ) \\ or inspect . iscoroutinefunction ( awaitable ): self . _awaitable = awaitable else : raise RuntimeError ( f \"Expected awaitable, but got { type ( awaitable ) } \" ) Important Usage classes, which represent DispatchEventListener openhivenpy.events.MultiDispatchEventListener \u00b6 EventListener Class that is used primarily for EventListeners that will be called multiple times Methods \u00b6 dispatch ( self , * args , ** kwargs ) async \u00b6 Dispatches the EventListener and calls a coroutine if one was passed. Does not raise exceptions but silences them! Parameters: Name Type Description Default args Args that will be passed to the coroutine () kwargs Kwargs that will be passed to the coroutine {} Source code in openhivenpy\\events\\__init__.py async def dispatch ( self , * args , ** kwargs ) -> None : \"\"\" Dispatches the EventListener and calls a coroutine if one was passed. Does not raise exceptions but silences them! :param args: Args that will be passed to the coroutine :param kwargs: Kwargs that will be passed to the coroutine \"\"\" try : await self . awaitable ( * args , ** kwargs ) except Exception as e : utils . log_traceback ( brief = f \"[EVENTS] Ignoring exception in { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise RuntimeError ( f \"Failed to execute assigned coroutine \" f \"' { self . awaitable . __name__ } '\" ) from e openhivenpy.events.SingleDispatchEventListener \u00b6 EventListener Class that will be called only once and will store the events data, args and kwargs args : tuple property readonly \u00b6 dispatched : bool property readonly \u00b6 kwargs : dict property readonly \u00b6 Methods \u00b6 __init__ ( self , client , event_name , awaitable ) special \u00b6 Source code in openhivenpy\\events\\__init__.py def __init__ ( self , client : HivenClient , event_name : str , awaitable : Union [ Awaitable , Callable ]): self . _dispatched = False self . _event_data = None self . _args = None self . _kwargs = None super () . __init__ ( client , event_name , awaitable ) __repr__ ( self ) special \u00b6 Source code in openhivenpy\\events\\__init__.py def __repr__ ( self ): info = [ ( 'event_name' , getattr ( self , 'event_name' , None )), ( 'dispatched' , self . dispatched ), ( 'awaitable' , getattr ( self , 'awaitable' , None )) ] return '<SingleDispatchEventListener {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ) ) dispatch ( self , * args , ** kwargs ) async \u00b6 Dispatches the EventListener and calls a coroutine if one was passed Parameters: Name Type Description Default args Args that will be passed to the coroutine () kwargs Kwargs that will be passed to the coroutine {} Returns: Type Description None Returns the passed event_data Source code in openhivenpy\\events\\__init__.py async def dispatch ( self , * args , ** kwargs ) -> None : \"\"\" Dispatches the EventListener and calls a coroutine if one was passed :param args: Args that will be passed to the coroutine :param kwargs: Kwargs that will be passed to the coroutine :return: Returns the passed event_data \"\"\" try : self . _args = args self . _kwargs = kwargs await self . awaitable ( * args , ** kwargs ) except Exception as e : utils . log_traceback ( brief = f \"[EVENTS] Ignoring exception in { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise RuntimeError ( f \"Failed to execute assigned coroutine \" f \"' { self . awaitable . __name__ } '\" ) from e self . _dispatched = True self . client . remove_listener ( self ) Important The HivenEventHandler is already inherited in the standard client ( HivenClient ), so all properties and methods can be used there as well. openhivenpy.events.HivenEventHandler \u00b6 Events class used to register the main event listeners. Is inherited by the HivenClient for easier access. active_listeners : Dict [ str , List [ DispatchEventListener ]] property readonly \u00b6 available_events : List [ str ] property readonly \u00b6 non_buffer_events : List [ str ] property readonly \u00b6 Methods \u00b6 __init__ ( self , client , parsers ) special \u00b6 Source code in openhivenpy\\events\\__init__.py def __init__ ( self , client : HivenClient , parsers : HivenParsers ): self . parsers = parsers self . _client = client self . _active_listeners = {} self . _available_events = EVENTS self . _non_buffer_events = NON_BUFFER_EVENTS # Searching through the HivenClient to find all async functions that # were registered for event_listening Regular functions will NOT be # registered and only if they are async! This will avoid that errors # are thrown when trying to call the functions using 'await' for listener in inspect . getmembers ( self , predicate = inspect . iscoroutinefunction ): func_name = listener [ 0 ] . replace ( 'on_' , '' ) awaitable = listener [ 1 ] if func_name in self . _available_events : self . add_multi_listener ( func_name , awaitable ) logger . debug ( f \"[EVENTS] Event { listener [ 0 ] } registered\" ) add_listener ( self , listener ) \u00b6 Adds the listener to the client cache and will create a new list if the event_name does not exist yet! Parameters: Name Type Description Default listener DispatchEventListener The Listener that will be added required Source code in openhivenpy\\events\\__init__.py def add_listener ( self , listener : DispatchEventListener ) -> None : \"\"\" Adds the listener to the client cache and will create a new list if the event_name does not exist yet! :param listener: The Listener that will be added \"\"\" if self . active_listeners . get ( listener . event_name ): self . active_listeners [ listener . event_name ] . append ( listener ) else : self . active_listeners [ listener . event_name ] = [ listener ] add_multi_listener ( self , event_name , awaitable ) \u00b6 Adds a new event listener to the list of active listeners Parameters: Name Type Description Default event_name str The key/name of the event the EventListener should be listening to required awaitable Union[Callable, Awaitable] Coroutine that should be called when the EventListener was dispatched required Returns: Type Description MultiDispatchEventListener The newly created EventListener Source code in openhivenpy\\events\\__init__.py def add_multi_listener ( self , event_name : str , awaitable : Union [ Callable , Awaitable ] ) -> MultiDispatchEventListener : \"\"\" Adds a new event listener to the list of active listeners :param event_name: The key/name of the event the EventListener should be listening to :param awaitable: Coroutine that should be called when the EventListener was dispatched :return: The newly created EventListener \"\"\" event_name = event_name . replace ( 'on_' , '' ) if event_name not in self . available_events : raise UnknownEventError ( \"The passed event type is invalid/does not exist\" ) if self . _active_listeners . get ( event_name ) is None : self . _active_listeners [ event_name ] = [] return MultiDispatchEventListener ( self . _client , event_name , awaitable ) add_single_listener ( self , event_name , awaitable ) \u00b6 Adds a new single dispatch event listener to the list of active listeners Parameters: Name Type Description Default event_name str The key/name of the event the EventListener should be listening to required awaitable Union[Callable, Coroutine] Coroutine that should be called when the EventListener was dispatched required Returns: Type Description SingleDispatchEventListener The newly created EventListener Source code in openhivenpy\\events\\__init__.py def add_single_listener ( self , event_name : str , awaitable : Union [ Callable , Coroutine ] ) -> SingleDispatchEventListener : \"\"\" Adds a new single dispatch event listener to the list of active listeners :param event_name: The key/name of the event the EventListener should be listening to :param awaitable: Coroutine that should be called when the EventListener was dispatched :return: The newly created EventListener \"\"\" event_name = event_name . replace ( 'on_' , '' ) if event_name not in self . available_events : raise UnknownEventError ( \"The passed event type is invalid/does not exist\" ) if self . _active_listeners . get ( event_name ) is None : self . _active_listeners [ event_name ] = [] return SingleDispatchEventListener ( self . _client , event_name , awaitable ) call_listeners ( self , event_name , args , kwargs ) async \u00b6 Dispatches all active EventListeners for the specified event. Does not call the parsers but the function directly and requires the args, kwargs passed Will run all tasks before returning! Only supposed to be called in cases of special events! Parameters: Name Type Description Default event_name str The name of the event that should be triggered required args tuple Args that will be passed to the coroutines required kwargs dict Kwargs that will be passed to the coroutines required Source code in openhivenpy\\events\\__init__.py async def call_listeners ( self , event_name : str , args : tuple , kwargs : dict ) -> None : \"\"\" Dispatches all active EventListeners for the specified event. Does not call the parsers but the function directly and requires the args, kwargs passed Will run all tasks before returning! Only supposed to be called in cases of special events! :param event_name: The name of the event that should be triggered :param args: Args that will be passed to the coroutines :param kwargs: Kwargs that will be passed to the coroutines \"\"\" listeners : List [ DispatchEventListener ] = self . _active_listeners . get ( event_name . lower () . replace ( 'on_' , '' ) ) if listeners : tasks = [ listener ( * args , ** kwargs ) for listener in listeners ] await asyncio . gather ( * tasks ) cleanup_listeners ( self ) \u00b6 Cleanups the listeners and empties all active listeners Source code in openhivenpy\\events\\__init__.py def cleanup_listeners ( self ) -> None : \"\"\" Cleanups the listeners and empties all active listeners \"\"\" self . _active_listeners = {} dispatch_event ( self , event_name , args , kwargs ) \u00b6 Manually adds an event to the event_buffer and triggers all listeners. Will return immediately and does not require asyncio unlike call_listeners which only calls the listeners; Note that this will NOT call the event parsers but manually directly pass the args and kwargs to the functions! Parameters: Name Type Description Default event_name str The name of the event that should be triggered required args tuple Args that will be passed to the coroutines required kwargs dict Kwargs that will be passed to the coroutines required Source code in openhivenpy\\events\\__init__.py def dispatch_event ( self , event_name : str , args : tuple , kwargs : dict ) -> None : \"\"\" Manually adds an event to the event_buffer and triggers all listeners. Will return immediately and does not require asyncio unlike call_listeners which only calls the listeners; Note that this will NOT call the event parsers but manually directly pass the args and kwargs to the functions! :param event_name: The name of the event that should be triggered :param args: Args that will be passed to the coroutines :param kwargs: Kwargs that will be passed to the coroutines \"\"\" self . _validate_existence_of_event ( event_name ) _ : MessageBroker = getattr ( self , 'message_broker' ) buffer = _ . get_buffer ( event_name ) buffer . add_new_event ( { \"callee\" : event_name , \"caller\" : \"client\" , \"time\" : time . time () }, args , kwargs ) event ( self , awaitable = None ) \u00b6 Decorator used for registering Client Events Parameters: Name Type Description Default awaitable Union[Callable, Coroutine] Function that should be wrapped and registered None Source code in openhivenpy\\events\\__init__.py def event ( self , awaitable : Union [ Callable , Coroutine ] = None ) -> Callable : \"\"\" Decorator used for registering Client Events :param awaitable: Function that should be wrapped and registered \"\"\" def decorator ( awaitable : Union [ Callable , Coroutine ]) -> Callable : if not inspect . iscoroutinefunction ( awaitable ): raise TypeError ( f \"A coroutine was expected, got { type ( awaitable ) } \" ) self . _validate_existence_of_event ( awaitable . __name__ ) func_name = awaitable . __name__ . replace ( 'on_' , '' ) self . add_multi_listener ( func_name , awaitable ) logger . debug ( f \"[EVENTS] Event { func_name } registered\" ) # func can still be used normally outside the event listening # process return awaitable if awaitable is None : return decorator else : return decorator ( awaitable ) remove_listener ( self , listener ) \u00b6 Removes the listener from the client cache Parameters: Name Type Description Default listener DispatchEventListener The Listener that will be removed required Exceptions: Type Description KeyError If the listener does not exist in the cache Source code in openhivenpy\\events\\__init__.py def remove_listener ( self , listener : DispatchEventListener ) -> None : \"\"\" Removes the listener from the client cache :param listener: The Listener that will be removed :raises KeyError: If the listener does not exist in the cache \"\"\" if self . active_listeners . get ( listener . event_name ): self . active_listeners [ listener . event_name ] . remove ( listener ) else : raise KeyError ( \"The listener does not exist in the cache\" ) wait_for ( self , event_name , awaitable = None ) async \u00b6 Waits for an event to be triggered and then returns the args and *kwargs passed Parameters: Name Type Description Default event_name str Name of the event to wait for required awaitable Union[Callable, Coroutine, None] Coroutine that can be passed to be additionally triggered when received None Returns: Type Description Tuple[tuple, dict] A tuple of the args and kwargs => (args, kwargs) Exceptions: Type Description UnknownEventError If the event does not exist Source code in openhivenpy\\events\\__init__.py async def wait_for ( self , event_name : str , awaitable : Union [ Callable , Coroutine , None ] = None ) -> Tuple [ tuple , dict ]: \"\"\" Waits for an event to be triggered and then returns the *args and **kwargs passed :param event_name: Name of the event to wait for :param awaitable: Coroutine that can be passed to be additionally triggered when received :raises UnknownEventError: If the event does not exist :return: A tuple of the args and kwargs => (args, kwargs) \"\"\" event_name = event_name . replace ( 'on_' , '' ) if event_name not in self . available_events : raise UnknownEventError ( \"The passed event type is invalid/does not exist\" ) if awaitable is None : async def _empty ( * args , ** kwargs ): ... awaitable = _empty listener = self . add_single_listener ( event_name , awaitable ) while not listener . dispatched : await asyncio . sleep ( . 05 ) return listener . args , listener . kwargs","title":"HivenEventHandler and Listeners"},{"location":"reference/events.html#hiveneventhandler-and-listeners","text":"Important DispatchEventListener is the base Class for SingleDispatchEventListener and MultiDispatchEventListener , which should not be used","title":"HivenEventHandler and Listeners"},{"location":"reference/events.html#openhivenpy.events.DispatchEventListener","text":"Base Class for all DispatchEventListeners","title":"DispatchEventListener"},{"location":"reference/events.html#openhivenpy.events.DispatchEventListener.awaitable","text":"","title":"awaitable"},{"location":"reference/events.html#openhivenpy.events.DispatchEventListener.client","text":"","title":"client"},{"location":"reference/events.html#openhivenpy.events.DispatchEventListener.event_name","text":"","title":"event_name"},{"location":"reference/events.html#openhivenpy.events.DispatchEventListener-methods","text":"","title":"Methods"},{"location":"reference/events.html#openhivenpy.events.DispatchEventListener.__call__","text":"Returns the dispatch function of the class itself Parameters: Name Type Description Default event_data Data of the received event required args Args that will be passed to the coroutine () kwargs Kwargs that will be passed to the coroutine {} Returns: Type Description Union[Coroutine, Awaitable] The coroutine instance which can be used in an await expression or asyncio functions Source code in openhivenpy\\events\\__init__.py def __call__ ( self , * args , ** kwargs ) -> Union [ Coroutine , Awaitable ]: \"\"\" Returns the dispatch function of the class itself :param event_data: Data of the received event :param args: Args that will be passed to the coroutine :param kwargs: Kwargs that will be passed to the coroutine :return: The coroutine instance which can be used in an await expression or asyncio functions \"\"\" dispatch : Union [ Callable , Union [ Awaitable , Callable ]] = getattr ( self , 'dispatch' ) return dispatch ( * args , ** kwargs )","title":"__call__()"},{"location":"reference/events.html#openhivenpy.events.DispatchEventListener.__init__","text":"Source code in openhivenpy\\events\\__init__.py def __init__ ( self , client : HivenClient , event_name : str , awaitable : Union [ Awaitable , Callable ] ): self . _client = client self . _event_name = event_name self . _awaitable : Optional [ Awaitable ] = None self . set_awaitable ( awaitable ) self . _client . add_listener ( self )","title":"__init__()"},{"location":"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__","text":"Source code in openhivenpy\\events\\__init__.py def __repr__ ( self ): info = [ ( 'event_name' , getattr ( self , 'event_name' , None )), ( 'awaitable' , getattr ( self , 'awaitable' , None )) ] return '<MultiDispatchEventListener {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ) )","title":"__repr__()"},{"location":"reference/events.html#openhivenpy.events.DispatchEventListener.__str__","text":"Source code in openhivenpy\\events\\__init__.py def __str__ ( self ): return f \"< { self . __class__ . __name__ } for event { self . event_name } >\"","title":"__str__()"},{"location":"reference/events.html#openhivenpy.events.DispatchEventListener.dispatch","text":"Source code in openhivenpy\\events\\__init__.py async def dispatch ( self ) -> None : ...","title":"dispatch()"},{"location":"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable","text":"Sets the coroutine of the event_listener, which will be called when ws-events are received Parameters: Name Type Description Default awaitable Union[Awaitable, Callable] Awaitable (Coroutine Function). Can NOT be a initialised coroutine, since parameters will be passed on Runtime and coroutines are limited to a one-time execution. Coroutine functions or standard asyncio awaitable functions are defined using the async def syntax required Source code in openhivenpy\\events\\__init__.py def set_awaitable ( self , awaitable : Union [ Awaitable , Callable ]) -> None : \"\"\" Sets the coroutine of the event_listener, which will be called when ws-events are received :param awaitable: Awaitable (Coroutine Function). Can NOT be a initialised coroutine, since parameters will be passed on Runtime and coroutines are limited to a one-time execution. Coroutine functions or standard asyncio awaitable functions are defined using the `async def` syntax \"\"\" if inspect . isawaitable ( awaitable ) \\ or inspect . iscoroutinefunction ( awaitable ): self . _awaitable = awaitable else : raise RuntimeError ( f \"Expected awaitable, but got { type ( awaitable ) } \" ) Important Usage classes, which represent DispatchEventListener","title":"set_awaitable()"},{"location":"reference/events.html#openhivenpy.events.MultiDispatchEventListener","text":"EventListener Class that is used primarily for EventListeners that will be called multiple times","title":"MultiDispatchEventListener"},{"location":"reference/events.html#openhivenpy.events.MultiDispatchEventListener-methods","text":"","title":"Methods"},{"location":"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch","text":"Dispatches the EventListener and calls a coroutine if one was passed. Does not raise exceptions but silences them! Parameters: Name Type Description Default args Args that will be passed to the coroutine () kwargs Kwargs that will be passed to the coroutine {} Source code in openhivenpy\\events\\__init__.py async def dispatch ( self , * args , ** kwargs ) -> None : \"\"\" Dispatches the EventListener and calls a coroutine if one was passed. Does not raise exceptions but silences them! :param args: Args that will be passed to the coroutine :param kwargs: Kwargs that will be passed to the coroutine \"\"\" try : await self . awaitable ( * args , ** kwargs ) except Exception as e : utils . log_traceback ( brief = f \"[EVENTS] Ignoring exception in { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise RuntimeError ( f \"Failed to execute assigned coroutine \" f \"' { self . awaitable . __name__ } '\" ) from e","title":"dispatch()"},{"location":"reference/events.html#openhivenpy.events.SingleDispatchEventListener","text":"EventListener Class that will be called only once and will store the events data, args and kwargs","title":"SingleDispatchEventListener"},{"location":"reference/events.html#openhivenpy.events.SingleDispatchEventListener.args","text":"","title":"args"},{"location":"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatched","text":"","title":"dispatched"},{"location":"reference/events.html#openhivenpy.events.SingleDispatchEventListener.kwargs","text":"","title":"kwargs"},{"location":"reference/events.html#openhivenpy.events.SingleDispatchEventListener-methods","text":"","title":"Methods"},{"location":"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__","text":"Source code in openhivenpy\\events\\__init__.py def __init__ ( self , client : HivenClient , event_name : str , awaitable : Union [ Awaitable , Callable ]): self . _dispatched = False self . _event_data = None self . _args = None self . _kwargs = None super () . __init__ ( client , event_name , awaitable )","title":"__init__()"},{"location":"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__","text":"Source code in openhivenpy\\events\\__init__.py def __repr__ ( self ): info = [ ( 'event_name' , getattr ( self , 'event_name' , None )), ( 'dispatched' , self . dispatched ), ( 'awaitable' , getattr ( self , 'awaitable' , None )) ] return '<SingleDispatchEventListener {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ) )","title":"__repr__()"},{"location":"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch","text":"Dispatches the EventListener and calls a coroutine if one was passed Parameters: Name Type Description Default args Args that will be passed to the coroutine () kwargs Kwargs that will be passed to the coroutine {} Returns: Type Description None Returns the passed event_data Source code in openhivenpy\\events\\__init__.py async def dispatch ( self , * args , ** kwargs ) -> None : \"\"\" Dispatches the EventListener and calls a coroutine if one was passed :param args: Args that will be passed to the coroutine :param kwargs: Kwargs that will be passed to the coroutine :return: Returns the passed event_data \"\"\" try : self . _args = args self . _kwargs = kwargs await self . awaitable ( * args , ** kwargs ) except Exception as e : utils . log_traceback ( brief = f \"[EVENTS] Ignoring exception in { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise RuntimeError ( f \"Failed to execute assigned coroutine \" f \"' { self . awaitable . __name__ } '\" ) from e self . _dispatched = True self . client . remove_listener ( self ) Important The HivenEventHandler is already inherited in the standard client ( HivenClient ), so all properties and methods can be used there as well.","title":"dispatch()"},{"location":"reference/events.html#openhivenpy.events.HivenEventHandler","text":"Events class used to register the main event listeners. Is inherited by the HivenClient for easier access.","title":"HivenEventHandler"},{"location":"reference/events.html#openhivenpy.events.HivenEventHandler.active_listeners","text":"","title":"active_listeners"},{"location":"reference/events.html#openhivenpy.events.HivenEventHandler.available_events","text":"","title":"available_events"},{"location":"reference/events.html#openhivenpy.events.HivenEventHandler.non_buffer_events","text":"","title":"non_buffer_events"},{"location":"reference/events.html#openhivenpy.events.HivenEventHandler-methods","text":"","title":"Methods"},{"location":"reference/events.html#openhivenpy.events.HivenEventHandler.__init__","text":"Source code in openhivenpy\\events\\__init__.py def __init__ ( self , client : HivenClient , parsers : HivenParsers ): self . parsers = parsers self . _client = client self . _active_listeners = {} self . _available_events = EVENTS self . _non_buffer_events = NON_BUFFER_EVENTS # Searching through the HivenClient to find all async functions that # were registered for event_listening Regular functions will NOT be # registered and only if they are async! This will avoid that errors # are thrown when trying to call the functions using 'await' for listener in inspect . getmembers ( self , predicate = inspect . iscoroutinefunction ): func_name = listener [ 0 ] . replace ( 'on_' , '' ) awaitable = listener [ 1 ] if func_name in self . _available_events : self . add_multi_listener ( func_name , awaitable ) logger . debug ( f \"[EVENTS] Event { listener [ 0 ] } registered\" )","title":"__init__()"},{"location":"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener","text":"Adds the listener to the client cache and will create a new list if the event_name does not exist yet! Parameters: Name Type Description Default listener DispatchEventListener The Listener that will be added required Source code in openhivenpy\\events\\__init__.py def add_listener ( self , listener : DispatchEventListener ) -> None : \"\"\" Adds the listener to the client cache and will create a new list if the event_name does not exist yet! :param listener: The Listener that will be added \"\"\" if self . active_listeners . get ( listener . event_name ): self . active_listeners [ listener . event_name ] . append ( listener ) else : self . active_listeners [ listener . event_name ] = [ listener ]","title":"add_listener()"},{"location":"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener","text":"Adds a new event listener to the list of active listeners Parameters: Name Type Description Default event_name str The key/name of the event the EventListener should be listening to required awaitable Union[Callable, Awaitable] Coroutine that should be called when the EventListener was dispatched required Returns: Type Description MultiDispatchEventListener The newly created EventListener Source code in openhivenpy\\events\\__init__.py def add_multi_listener ( self , event_name : str , awaitable : Union [ Callable , Awaitable ] ) -> MultiDispatchEventListener : \"\"\" Adds a new event listener to the list of active listeners :param event_name: The key/name of the event the EventListener should be listening to :param awaitable: Coroutine that should be called when the EventListener was dispatched :return: The newly created EventListener \"\"\" event_name = event_name . replace ( 'on_' , '' ) if event_name not in self . available_events : raise UnknownEventError ( \"The passed event type is invalid/does not exist\" ) if self . _active_listeners . get ( event_name ) is None : self . _active_listeners [ event_name ] = [] return MultiDispatchEventListener ( self . _client , event_name , awaitable )","title":"add_multi_listener()"},{"location":"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener","text":"Adds a new single dispatch event listener to the list of active listeners Parameters: Name Type Description Default event_name str The key/name of the event the EventListener should be listening to required awaitable Union[Callable, Coroutine] Coroutine that should be called when the EventListener was dispatched required Returns: Type Description SingleDispatchEventListener The newly created EventListener Source code in openhivenpy\\events\\__init__.py def add_single_listener ( self , event_name : str , awaitable : Union [ Callable , Coroutine ] ) -> SingleDispatchEventListener : \"\"\" Adds a new single dispatch event listener to the list of active listeners :param event_name: The key/name of the event the EventListener should be listening to :param awaitable: Coroutine that should be called when the EventListener was dispatched :return: The newly created EventListener \"\"\" event_name = event_name . replace ( 'on_' , '' ) if event_name not in self . available_events : raise UnknownEventError ( \"The passed event type is invalid/does not exist\" ) if self . _active_listeners . get ( event_name ) is None : self . _active_listeners [ event_name ] = [] return SingleDispatchEventListener ( self . _client , event_name , awaitable )","title":"add_single_listener()"},{"location":"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners","text":"Dispatches all active EventListeners for the specified event. Does not call the parsers but the function directly and requires the args, kwargs passed Will run all tasks before returning! Only supposed to be called in cases of special events! Parameters: Name Type Description Default event_name str The name of the event that should be triggered required args tuple Args that will be passed to the coroutines required kwargs dict Kwargs that will be passed to the coroutines required Source code in openhivenpy\\events\\__init__.py async def call_listeners ( self , event_name : str , args : tuple , kwargs : dict ) -> None : \"\"\" Dispatches all active EventListeners for the specified event. Does not call the parsers but the function directly and requires the args, kwargs passed Will run all tasks before returning! Only supposed to be called in cases of special events! :param event_name: The name of the event that should be triggered :param args: Args that will be passed to the coroutines :param kwargs: Kwargs that will be passed to the coroutines \"\"\" listeners : List [ DispatchEventListener ] = self . _active_listeners . get ( event_name . lower () . replace ( 'on_' , '' ) ) if listeners : tasks = [ listener ( * args , ** kwargs ) for listener in listeners ] await asyncio . gather ( * tasks )","title":"call_listeners()"},{"location":"reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners","text":"Cleanups the listeners and empties all active listeners Source code in openhivenpy\\events\\__init__.py def cleanup_listeners ( self ) -> None : \"\"\" Cleanups the listeners and empties all active listeners \"\"\" self . _active_listeners = {}","title":"cleanup_listeners()"},{"location":"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event","text":"Manually adds an event to the event_buffer and triggers all listeners. Will return immediately and does not require asyncio unlike call_listeners which only calls the listeners; Note that this will NOT call the event parsers but manually directly pass the args and kwargs to the functions! Parameters: Name Type Description Default event_name str The name of the event that should be triggered required args tuple Args that will be passed to the coroutines required kwargs dict Kwargs that will be passed to the coroutines required Source code in openhivenpy\\events\\__init__.py def dispatch_event ( self , event_name : str , args : tuple , kwargs : dict ) -> None : \"\"\" Manually adds an event to the event_buffer and triggers all listeners. Will return immediately and does not require asyncio unlike call_listeners which only calls the listeners; Note that this will NOT call the event parsers but manually directly pass the args and kwargs to the functions! :param event_name: The name of the event that should be triggered :param args: Args that will be passed to the coroutines :param kwargs: Kwargs that will be passed to the coroutines \"\"\" self . _validate_existence_of_event ( event_name ) _ : MessageBroker = getattr ( self , 'message_broker' ) buffer = _ . get_buffer ( event_name ) buffer . add_new_event ( { \"callee\" : event_name , \"caller\" : \"client\" , \"time\" : time . time () }, args , kwargs )","title":"dispatch_event()"},{"location":"reference/events.html#openhivenpy.events.HivenEventHandler.event","text":"Decorator used for registering Client Events Parameters: Name Type Description Default awaitable Union[Callable, Coroutine] Function that should be wrapped and registered None Source code in openhivenpy\\events\\__init__.py def event ( self , awaitable : Union [ Callable , Coroutine ] = None ) -> Callable : \"\"\" Decorator used for registering Client Events :param awaitable: Function that should be wrapped and registered \"\"\" def decorator ( awaitable : Union [ Callable , Coroutine ]) -> Callable : if not inspect . iscoroutinefunction ( awaitable ): raise TypeError ( f \"A coroutine was expected, got { type ( awaitable ) } \" ) self . _validate_existence_of_event ( awaitable . __name__ ) func_name = awaitable . __name__ . replace ( 'on_' , '' ) self . add_multi_listener ( func_name , awaitable ) logger . debug ( f \"[EVENTS] Event { func_name } registered\" ) # func can still be used normally outside the event listening # process return awaitable if awaitable is None : return decorator else : return decorator ( awaitable )","title":"event()"},{"location":"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener","text":"Removes the listener from the client cache Parameters: Name Type Description Default listener DispatchEventListener The Listener that will be removed required Exceptions: Type Description KeyError If the listener does not exist in the cache Source code in openhivenpy\\events\\__init__.py def remove_listener ( self , listener : DispatchEventListener ) -> None : \"\"\" Removes the listener from the client cache :param listener: The Listener that will be removed :raises KeyError: If the listener does not exist in the cache \"\"\" if self . active_listeners . get ( listener . event_name ): self . active_listeners [ listener . event_name ] . remove ( listener ) else : raise KeyError ( \"The listener does not exist in the cache\" )","title":"remove_listener()"},{"location":"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for","text":"Waits for an event to be triggered and then returns the args and *kwargs passed Parameters: Name Type Description Default event_name str Name of the event to wait for required awaitable Union[Callable, Coroutine, None] Coroutine that can be passed to be additionally triggered when received None Returns: Type Description Tuple[tuple, dict] A tuple of the args and kwargs => (args, kwargs) Exceptions: Type Description UnknownEventError If the event does not exist Source code in openhivenpy\\events\\__init__.py async def wait_for ( self , event_name : str , awaitable : Union [ Callable , Coroutine , None ] = None ) -> Tuple [ tuple , dict ]: \"\"\" Waits for an event to be triggered and then returns the *args and **kwargs passed :param event_name: Name of the event to wait for :param awaitable: Coroutine that can be passed to be additionally triggered when received :raises UnknownEventError: If the event does not exist :return: A tuple of the args and kwargs => (args, kwargs) \"\"\" event_name = event_name . replace ( 'on_' , '' ) if event_name not in self . available_events : raise UnknownEventError ( \"The passed event type is invalid/does not exist\" ) if awaitable is None : async def _empty ( * args , ** kwargs ): ... awaitable = _empty listener = self . add_single_listener ( event_name , awaitable ) while not listener . dispatched : await asyncio . sleep ( . 05 ) return listener . args , listener . kwargs","title":"wait_for()"},{"location":"reference/hiven_parsers.html","text":"Hiven Parsers \u00b6 openhivenpy.events.event_parsers.HivenParsers \u00b6 Event Parsers for Hiven Events that validate and update the cached data Attributes \u00b6 storage : Optional [ ClientCache ] property readonly \u00b6 Returns the cached storage Methods \u00b6 __init__ ( self , client ) special \u00b6 Source code in openhivenpy\\events\\event_parsers.py def __init__ ( self , client ): self . client : HivenClient = client dispatch ( self , event , data ) async \u00b6 Dispatches the parser and returns the args and kwargs. Note that this will only add the event to the buffer and NOT execute it. The asyncio event loop will run it as soon as the Parameters: Name Type Description Default event str Event name that should be called required data dict Raw WebSocket Data that should be passed required Returns: Type Description Tuple[list, dict] The args and kwargs that were created with the parser Source code in openhivenpy\\events\\event_parsers.py async def dispatch ( self , event : str , data : dict ) -> Tuple [ list , dict ]: \"\"\" Dispatches the parser and returns the args and kwargs. Note that this will only add the event to the buffer and NOT execute it. The asyncio event loop will run it as soon as the :param event: Event name that should be called :param data: Raw WebSocket Data that should be passed :return: The args and kwargs that were created with the parser \"\"\" # getting the method from self coro = getattr ( self , format_event_as_listener ( event ), None ) if callable ( coro ): new_data : dict = deepcopy ( data ) return await coro ( new_data ) else : logger . warning ( f \"[EVENTS] Parser for event { event } was not found!\" ) on_batch_house_member_update ( self , data ) async \u00b6 LISTENER: on_batch_house_member_update(house: House, members: List[Member]) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_batch_house_member_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: BATCH_HOUSE_MEMBER_UPDATE LISTENER: on_batch_house_member_update(house: House, members: List[Member]) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" house : types . House = self . client . get_house ( 'house_id' ) members : List [ types . Member ] = [] members_data : Dict = data . get ( 'data' ) # Updating for every entry and appending the item for _ , mem_data in members_data . items (): self . client . storage . add_or_update_house_member ( mem_data ) members . append ( self . client . get_house_member ( mem_data [ 'user_id' ], house . id ) ) buffer = self . _get_from_client_buffer ( 'batch_house_member_update' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . House , List [ types . Member ]] = ( house , members ) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_house_down ( self , data ) async \u00b6 LISTENER: house_delete(house_id: str) house_down(house_id: str) If property 'unavailable' of the dictionary is false , the listener house_delete is selected instead of house_down This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_down ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_DOWN LISTENER: house_delete(house_id: str) house_down(house_id: str) If property 'unavailable' of the dictionary is *false*, the listener `house_delete` is selected instead of `house_down` *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" if data . get ( 'unavailable' ) is True : buffer = self . _get_from_client_buffer ( 'house_down' ) else : buffer = self . _get_from_client_buffer ( 'house_delete' ) self . storage . remove_house ( data [ 'house_id' ]) # Parameter that will be passed to the assigned listener args : Tuple = tuple ([ data [ 'house_id' ]]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_house_entities_update ( self , data ) async \u00b6 LISTENER: on_house_entities_update(entities: List[Entity]) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_entities_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_ENTITIES_UPDATE LISTENER: on_house_entities_update(entities: List[Entity]) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" entities : List [ types . Entity ] = [] for i in data . get ( 'entities' ): self . client . storage . add_or_update_entity ( data ) entities . append ( self . client . get_entity ( i [ 'id' ])) buffer = self . _get_from_client_buffer ( 'house_entity_update' ) # Parameter that will be passed to the assigned listener args : Tuple [ List [ types . Entity ]] = tuple ([ entities ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_house_join ( self , data ) async \u00b6 LISTENER: on_house_join(house: House) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_join ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_JOIN LISTENER: on_house_join(house: House) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" self . storage . add_or_update_house ( data ) new_house_data = types . House . format_obj_data ( data ) new_house = types . House ( new_house_data , self . client ) # Parameter that will be passed to the assigned listener args : Tuple [ types . House ] = \\ tuple ([ new_house ]) # avoiding warning bc of singular tuple item kwargs : Dict = {} buffer = self . _get_from_client_buffer ( 'house_join' ) buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_house_leave ( self , data ) async \u00b6 LISTENER: on_house_leave(house: House) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_leave ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_LEAVE LISTENER: on_house_leave(house: House) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" self . storage . remove_house ( data [ 'house_id' ]) # Parameter that will be passed to the assigned listener args : Tuple = tuple ([ data [ 'house_id' ]]) kwargs : Dict = {} buffer = self . _get_from_client_buffer ( 'house_leave' ) buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_house_member_enter ( self , data ) async \u00b6 LISTENER: on_house_member_online(member: id) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_member_enter ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_MEMBER_ENTER LISTENER: on_house_member_online(member: id) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" user_id : str = data [ 'user_id' ] if data . get ( 'user_id' ) \\ else data . get ( 'user' , {}) . get ( 'id' ) self . client . storage . add_or_update_house_member ( data ) mem : types . Member = self . client . get_house_member ( user_id , data [ 'house_id' ] ) buffer = self . _get_from_client_buffer ( 'house_member_online' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Member ] = tuple ([ mem ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_house_member_exit ( self , data ) async \u00b6 LISTENER: on_house_member_offline(member: id) House user went offline. Triggers in every house the client, and the user is in the event This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_member_exit ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_MEMBER_EXIT LISTENER: on_house_member_offline(member: id) House user went offline. Triggers in every house the client, and the user is in the event *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" mem : types . Member = self . client . get_house_member ( data [ 'id' ], data [ 'house_id' ] ) buffer = self . _get_from_client_buffer ( 'house_member_offline' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Member ] = tuple ([ mem ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_house_member_join ( self , data ) async \u00b6 LISTENER: on_house_member_join(member: Member) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_member_join ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_MEMBER_JOIN LISTENER: on_house_member_join(member: Member) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" self . client . storage . add_or_update_house_member ( data ) mem : types . Member = self . client . get_house_member ( data [ 'user' ][ 'id' ], data [ 'house_id' ] ) buffer = self . _get_from_client_buffer ( 'house_member_join' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Member ] = tuple ([ mem ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_house_member_leave ( self , data ) async \u00b6 LISTENER: on_house_member_leave(member: Member) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_member_leave ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_MEMBER_LEAVE LISTENER: on_house_member_leave(member: Member) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" mem_id : str = data [ 'user' ][ 'id' ] house_id : str = data [ 'house_id' ] mem : types . Member = self . client . get_house_member ( mem_id , house_id ) self . client . storage . remove_house_member ( mem_id , house_id ) buffer = self . _get_from_client_buffer ( 'house_member_leave' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Member ] = tuple ([ mem ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_house_member_offline ( self , data ) \u00b6 LISTENER: on_house_member_offline(member: id) Alias for on_house_member_exit This parser method modifies the Client cache! Returns: Type Description Coroutine Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () def on_house_member_offline ( self , data : dict ) -> Coroutine : \"\"\" EVENT: HOUSE_MEMBER_EXIT LISTENER: on_house_member_offline(member: id) Alias for on_house_member_exit *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" # Having to add the self item since it was decorated (special decorator) return self . on_house_member_exit ( self , data ) on_house_member_online ( self , data ) \u00b6 LISTENER: on_house_member_online(member: id) Alias for on_house_member_enter This parser method modifies the Client cache! Returns: Type Description Coroutine Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () def on_house_member_online ( self , data : dict ) -> Coroutine : \"\"\" EVENT: HOUSE_MEMBER_ENTER LISTENER: on_house_member_online(member: id) Alias for on_house_member_enter *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" # Having to add the self item since it was decorated (special decorator) return self . on_house_member_enter ( self , data ) on_house_member_update ( self , data ) async \u00b6 LISTENER: on_house_member_update(member: Member) Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_member_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_MEMBER_UPDATE LISTENER: on_house_member_update(member: Member) :returns: Args and Kwargs generated by the Parser \"\"\" user_id : str = data [ 'user_id' ] if data . get ( 'user_id' ) \\ else data . get ( 'user' , {}) . get ( 'id' ) self . client . storage . add_or_update_house_member ( data ) mem : types . Member = self . client . get_house_member ( user_id , data [ 'house_id' ] ) buffer = self . _get_from_client_buffer ( 'house_member_update' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Member ] = tuple ([ mem ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_house_members_chunk ( self , data ) async \u00b6 LISTENER: on_house_members_chunk(house: House, members: List[Member]) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_members_chunk ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_MEMBERS_CHUNK LISTENER: on_house_members_chunk(house: House, members: List[Member]) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" user_id = data [ 'user_id' ] if data . get ( 'user_id' ) \\ else data . get ( 'user' , {}) . get ( 'id' ) house : types . House = self . client . get_house ( 'house_id' ) members : List [ types . Member ] = [] members_data : Dict = data . get ( 'members' ) # Updating for every entry and appending the item for _ , mem_data in members_data . items (): self . client . storage . add_or_update_house_member ( mem_data ) members . append ( self . client . get_house_member ( user_id , house . id ) ) buffer = self . _get_from_client_buffer ( 'house_members_chunk' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . House , List [ types . Member ]] = ( house , members ) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_house_update ( self , data ) async \u00b6 LISTENER: on_house_update(old_house: House, new_house: House) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_UPDATE LISTENER: on_house_update(old_house: House, new_house: House) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" old_house_data = self . storage [ 'houses' ][ data [ 'id' ]] old_house = types . House ( old_house_data , self . client ) new_house_data = self . storage . add_or_update_house ( data ) new_house = types . House ( new_house_data , self . client ) # Parameter that will be passed to the assigned listener args : Tuple [ types . House , types . House ] = ( old_house , new_house ) kwargs : Dict = {} buffer = self . _get_from_client_buffer ( 'house_update' ) buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_message_create ( self , data ) async \u00b6 LISTENER: on_message_create(msg: Message) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_message_create ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: MESSAGE_CREATE LISTENER: on_message_create(msg: Message) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" msg_data = types . Message . format_obj_data ( data ) msg = types . Message ( msg_data , self . client ) buffer = self . _get_from_client_buffer ( 'message_create' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Message ] = tuple ([ msg ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_message_delete ( self , data ) async \u00b6 LISTENER: on_message_delete(msg_id: str, room_id: str, house_id: str) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_message_delete ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: MESSAGE_DELETE LISTENER: on_message_delete(msg_id: str, room_id: str, house_id: str) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" buffer = self . _get_from_client_buffer ( 'message_delete' ) # Parameter that will be passed to the assigned listener args : Tuple [ str , str , str ] = ( data . get ( 'message_id' ), data . get ( 'room_id' ), data . get ( 'house_id' ) ) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_message_update ( self , data ) async \u00b6 LISTENER: on_message_update(msg: Message) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_message_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: MESSAGE_UPDATE LISTENER: on_message_update(msg: Message) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" msg_data = types . Message . format_obj_data ( data ) msg = types . Message ( msg_data , self . client ) buffer = self . _get_from_client_buffer ( 'message_update' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Message ] = tuple ([ msg ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_presence_update ( self , data ) async \u00b6 LISTENER: on_presence_update(user: User) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_presence_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: PRESENCE_UPDATE LISTENER: on_presence_update(user: User) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" self . client . storage . add_or_update_user ( data ) user : types . User = self . client . get_user ( data [ 'id' ]) buffer = self . _get_from_client_buffer ( 'presence_update' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . User ] = tuple ([ user ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_relationship_update ( self , data ) async \u00b6 LISTENER: on_relationship_update(relationship: Relationship) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_relationship_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: RELATIONSHIP_UPDATE LISTENER: on_relationship_update(relationship: Relationship) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" self . client . storage . add_or_update_relationship ( data ) relationship : types . Relationship = self . client . get_relationship ( data [ 'id' ] ) buffer = self . _get_from_client_buffer ( 'relationship_update' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Relationship ] = tuple ([ relationship ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_room_create ( self , data ) async \u00b6 LISTENER: on_room_create(room: Room) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_room_create ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: ROOM_CREATE LISTENER: on_room_create(room: Room) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" self . client . storage . add_or_update_room ( data ) room : types . TextRoom = self . client . get_room ( data [ 'id' ]) buffer = self . _get_from_client_buffer ( 'room_create' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . TextRoom ] = tuple ([ room ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_room_delete ( self , data ) async \u00b6 LISTENER: on_room_delete(room: Room) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_room_delete ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: ROOM_DELETE LISTENER: on_room_delete(room: Room) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" room : types . TextRoom = self . client . get_room ( data [ 'id' ]) self . client . storage . remove_room ( data [ 'id' ]) buffer = self . _get_from_client_buffer ( 'room_delete' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . TextRoom ] = tuple ([ room ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_room_update ( self , data ) async \u00b6 LISTENER: on_room_update(room: Room) No data passed at the moment. Gives empty args and kwargs This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_room_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: ROOM_UPDATE LISTENER: on_room_update(room: Room) **No data passed at the moment. Gives empty args and kwargs** *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" self . client . storage . add_or_update_room ( data ) room : types . TextRoom = self . client . get_room ( data [ 'id' ]) buffer = self . _get_from_client_buffer ( 'room_update' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . TextRoom ] = tuple ([ room ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_typing_start ( self , data ) async \u00b6 LISTENER: on_typing_start(user: User, room: TextRoom, timestamp: datetime.datetime) No data passed at the moment. Gives empty args and kwargs This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_typing_start ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: TYPING_START LISTENER: on_typing_start(user: User, room: TextRoom, timestamp: datetime.datetime) **No data passed at the moment. Gives empty args and kwargs** *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" room_id : str = data [ 'room_id' ] if 'recipient_ids' not in data . keys (): room = self . client . get_room ( room_id ) else : if len ( list ( data [ 'recipient_ids' ])) < 2 : room = self . client . get_private_room ( room_id ) else : room = self . client . get_private_group_room ( room_id ) user = self . client . get_user ( data [ 'author_id' ]) # if the timestamp is missing (which never should be the case), the # time rn will be used. timestamp = datetime . datetime . fromtimestamp ( safe_convert ( int , data . get ( 'timestamp' ), time . time ()) / 1000 ) buffer = self . _get_from_client_buffer ( 'typing_start' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . User , BaseRoom , datetime . datetime ] = ( user , room , timestamp ) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs on_user_update ( self , data ) async \u00b6 LISTENER: on_user_update(old_user: User, new_user: User) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_user_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: USER_UPDATE LISTENER: on_user_update(old_user: User, new_user: User) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" old_user_data = self . storage [ 'users' ][ data [ 'id' ]] # cached data old_user = types . User ( old_user_data , self . client ) user_data = self . storage . add_or_update_user ( data ) new_user = types . User ( user_data , self . client ) # Parameter that will be passed to the assigned listener args : Tuple [ types . User , types . User ] = ( old_user , new_user ) kwargs : Dict = {} buffer : DynamicEventBuffer = self . _get_from_client_buffer ( 'user_update' ) buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"Hiven Parsers"},{"location":"reference/hiven_parsers.html#hiven-parsers","text":"","title":"Hiven Parsers"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers","text":"Event Parsers for Hiven Events that validate and update the cached data","title":"HivenParsers"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers-attributes","text":"","title":"Attributes"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.storage","text":"Returns the cached storage","title":"storage"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers-methods","text":"","title":"Methods"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.__init__","text":"Source code in openhivenpy\\events\\event_parsers.py def __init__ ( self , client ): self . client : HivenClient = client","title":"__init__()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch","text":"Dispatches the parser and returns the args and kwargs. Note that this will only add the event to the buffer and NOT execute it. The asyncio event loop will run it as soon as the Parameters: Name Type Description Default event str Event name that should be called required data dict Raw WebSocket Data that should be passed required Returns: Type Description Tuple[list, dict] The args and kwargs that were created with the parser Source code in openhivenpy\\events\\event_parsers.py async def dispatch ( self , event : str , data : dict ) -> Tuple [ list , dict ]: \"\"\" Dispatches the parser and returns the args and kwargs. Note that this will only add the event to the buffer and NOT execute it. The asyncio event loop will run it as soon as the :param event: Event name that should be called :param data: Raw WebSocket Data that should be passed :return: The args and kwargs that were created with the parser \"\"\" # getting the method from self coro = getattr ( self , format_event_as_listener ( event ), None ) if callable ( coro ): new_data : dict = deepcopy ( data ) return await coro ( new_data ) else : logger . warning ( f \"[EVENTS] Parser for event { event } was not found!\" )","title":"dispatch()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update","text":"LISTENER: on_batch_house_member_update(house: House, members: List[Member]) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_batch_house_member_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: BATCH_HOUSE_MEMBER_UPDATE LISTENER: on_batch_house_member_update(house: House, members: List[Member]) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" house : types . House = self . client . get_house ( 'house_id' ) members : List [ types . Member ] = [] members_data : Dict = data . get ( 'data' ) # Updating for every entry and appending the item for _ , mem_data in members_data . items (): self . client . storage . add_or_update_house_member ( mem_data ) members . append ( self . client . get_house_member ( mem_data [ 'user_id' ], house . id ) ) buffer = self . _get_from_client_buffer ( 'batch_house_member_update' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . House , List [ types . Member ]] = ( house , members ) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_batch_house_member_update()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down","text":"LISTENER: house_delete(house_id: str) house_down(house_id: str) If property 'unavailable' of the dictionary is false , the listener house_delete is selected instead of house_down This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_down ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_DOWN LISTENER: house_delete(house_id: str) house_down(house_id: str) If property 'unavailable' of the dictionary is *false*, the listener `house_delete` is selected instead of `house_down` *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" if data . get ( 'unavailable' ) is True : buffer = self . _get_from_client_buffer ( 'house_down' ) else : buffer = self . _get_from_client_buffer ( 'house_delete' ) self . storage . remove_house ( data [ 'house_id' ]) # Parameter that will be passed to the assigned listener args : Tuple = tuple ([ data [ 'house_id' ]]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_house_down()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update","text":"LISTENER: on_house_entities_update(entities: List[Entity]) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_entities_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_ENTITIES_UPDATE LISTENER: on_house_entities_update(entities: List[Entity]) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" entities : List [ types . Entity ] = [] for i in data . get ( 'entities' ): self . client . storage . add_or_update_entity ( data ) entities . append ( self . client . get_entity ( i [ 'id' ])) buffer = self . _get_from_client_buffer ( 'house_entity_update' ) # Parameter that will be passed to the assigned listener args : Tuple [ List [ types . Entity ]] = tuple ([ entities ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_house_entities_update()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join","text":"LISTENER: on_house_join(house: House) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_join ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_JOIN LISTENER: on_house_join(house: House) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" self . storage . add_or_update_house ( data ) new_house_data = types . House . format_obj_data ( data ) new_house = types . House ( new_house_data , self . client ) # Parameter that will be passed to the assigned listener args : Tuple [ types . House ] = \\ tuple ([ new_house ]) # avoiding warning bc of singular tuple item kwargs : Dict = {} buffer = self . _get_from_client_buffer ( 'house_join' ) buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_house_join()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave","text":"LISTENER: on_house_leave(house: House) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_leave ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_LEAVE LISTENER: on_house_leave(house: House) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" self . storage . remove_house ( data [ 'house_id' ]) # Parameter that will be passed to the assigned listener args : Tuple = tuple ([ data [ 'house_id' ]]) kwargs : Dict = {} buffer = self . _get_from_client_buffer ( 'house_leave' ) buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_house_leave()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter","text":"LISTENER: on_house_member_online(member: id) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_member_enter ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_MEMBER_ENTER LISTENER: on_house_member_online(member: id) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" user_id : str = data [ 'user_id' ] if data . get ( 'user_id' ) \\ else data . get ( 'user' , {}) . get ( 'id' ) self . client . storage . add_or_update_house_member ( data ) mem : types . Member = self . client . get_house_member ( user_id , data [ 'house_id' ] ) buffer = self . _get_from_client_buffer ( 'house_member_online' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Member ] = tuple ([ mem ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_house_member_enter()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit","text":"LISTENER: on_house_member_offline(member: id) House user went offline. Triggers in every house the client, and the user is in the event This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_member_exit ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_MEMBER_EXIT LISTENER: on_house_member_offline(member: id) House user went offline. Triggers in every house the client, and the user is in the event *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" mem : types . Member = self . client . get_house_member ( data [ 'id' ], data [ 'house_id' ] ) buffer = self . _get_from_client_buffer ( 'house_member_offline' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Member ] = tuple ([ mem ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_house_member_exit()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join","text":"LISTENER: on_house_member_join(member: Member) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_member_join ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_MEMBER_JOIN LISTENER: on_house_member_join(member: Member) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" self . client . storage . add_or_update_house_member ( data ) mem : types . Member = self . client . get_house_member ( data [ 'user' ][ 'id' ], data [ 'house_id' ] ) buffer = self . _get_from_client_buffer ( 'house_member_join' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Member ] = tuple ([ mem ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_house_member_join()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave","text":"LISTENER: on_house_member_leave(member: Member) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_member_leave ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_MEMBER_LEAVE LISTENER: on_house_member_leave(member: Member) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" mem_id : str = data [ 'user' ][ 'id' ] house_id : str = data [ 'house_id' ] mem : types . Member = self . client . get_house_member ( mem_id , house_id ) self . client . storage . remove_house_member ( mem_id , house_id ) buffer = self . _get_from_client_buffer ( 'house_member_leave' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Member ] = tuple ([ mem ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_house_member_leave()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline","text":"LISTENER: on_house_member_offline(member: id) Alias for on_house_member_exit This parser method modifies the Client cache! Returns: Type Description Coroutine Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () def on_house_member_offline ( self , data : dict ) -> Coroutine : \"\"\" EVENT: HOUSE_MEMBER_EXIT LISTENER: on_house_member_offline(member: id) Alias for on_house_member_exit *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" # Having to add the self item since it was decorated (special decorator) return self . on_house_member_exit ( self , data )","title":"on_house_member_offline()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online","text":"LISTENER: on_house_member_online(member: id) Alias for on_house_member_enter This parser method modifies the Client cache! Returns: Type Description Coroutine Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () def on_house_member_online ( self , data : dict ) -> Coroutine : \"\"\" EVENT: HOUSE_MEMBER_ENTER LISTENER: on_house_member_online(member: id) Alias for on_house_member_enter *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" # Having to add the self item since it was decorated (special decorator) return self . on_house_member_enter ( self , data )","title":"on_house_member_online()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update","text":"LISTENER: on_house_member_update(member: Member) Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_member_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_MEMBER_UPDATE LISTENER: on_house_member_update(member: Member) :returns: Args and Kwargs generated by the Parser \"\"\" user_id : str = data [ 'user_id' ] if data . get ( 'user_id' ) \\ else data . get ( 'user' , {}) . get ( 'id' ) self . client . storage . add_or_update_house_member ( data ) mem : types . Member = self . client . get_house_member ( user_id , data [ 'house_id' ] ) buffer = self . _get_from_client_buffer ( 'house_member_update' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Member ] = tuple ([ mem ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_house_member_update()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk","text":"LISTENER: on_house_members_chunk(house: House, members: List[Member]) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_members_chunk ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_MEMBERS_CHUNK LISTENER: on_house_members_chunk(house: House, members: List[Member]) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" user_id = data [ 'user_id' ] if data . get ( 'user_id' ) \\ else data . get ( 'user' , {}) . get ( 'id' ) house : types . House = self . client . get_house ( 'house_id' ) members : List [ types . Member ] = [] members_data : Dict = data . get ( 'members' ) # Updating for every entry and appending the item for _ , mem_data in members_data . items (): self . client . storage . add_or_update_house_member ( mem_data ) members . append ( self . client . get_house_member ( user_id , house . id ) ) buffer = self . _get_from_client_buffer ( 'house_members_chunk' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . House , List [ types . Member ]] = ( house , members ) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_house_members_chunk()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update","text":"LISTENER: on_house_update(old_house: House, new_house: House) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_house_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: HOUSE_UPDATE LISTENER: on_house_update(old_house: House, new_house: House) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" old_house_data = self . storage [ 'houses' ][ data [ 'id' ]] old_house = types . House ( old_house_data , self . client ) new_house_data = self . storage . add_or_update_house ( data ) new_house = types . House ( new_house_data , self . client ) # Parameter that will be passed to the assigned listener args : Tuple [ types . House , types . House ] = ( old_house , new_house ) kwargs : Dict = {} buffer = self . _get_from_client_buffer ( 'house_update' ) buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_house_update()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create","text":"LISTENER: on_message_create(msg: Message) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_message_create ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: MESSAGE_CREATE LISTENER: on_message_create(msg: Message) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" msg_data = types . Message . format_obj_data ( data ) msg = types . Message ( msg_data , self . client ) buffer = self . _get_from_client_buffer ( 'message_create' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Message ] = tuple ([ msg ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_message_create()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete","text":"LISTENER: on_message_delete(msg_id: str, room_id: str, house_id: str) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_message_delete ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: MESSAGE_DELETE LISTENER: on_message_delete(msg_id: str, room_id: str, house_id: str) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" buffer = self . _get_from_client_buffer ( 'message_delete' ) # Parameter that will be passed to the assigned listener args : Tuple [ str , str , str ] = ( data . get ( 'message_id' ), data . get ( 'room_id' ), data . get ( 'house_id' ) ) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_message_delete()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update","text":"LISTENER: on_message_update(msg: Message) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_message_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: MESSAGE_UPDATE LISTENER: on_message_update(msg: Message) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" msg_data = types . Message . format_obj_data ( data ) msg = types . Message ( msg_data , self . client ) buffer = self . _get_from_client_buffer ( 'message_update' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Message ] = tuple ([ msg ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_message_update()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update","text":"LISTENER: on_presence_update(user: User) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_presence_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: PRESENCE_UPDATE LISTENER: on_presence_update(user: User) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" self . client . storage . add_or_update_user ( data ) user : types . User = self . client . get_user ( data [ 'id' ]) buffer = self . _get_from_client_buffer ( 'presence_update' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . User ] = tuple ([ user ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_presence_update()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update","text":"LISTENER: on_relationship_update(relationship: Relationship) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_relationship_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: RELATIONSHIP_UPDATE LISTENER: on_relationship_update(relationship: Relationship) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" self . client . storage . add_or_update_relationship ( data ) relationship : types . Relationship = self . client . get_relationship ( data [ 'id' ] ) buffer = self . _get_from_client_buffer ( 'relationship_update' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . Relationship ] = tuple ([ relationship ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_relationship_update()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create","text":"LISTENER: on_room_create(room: Room) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_room_create ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: ROOM_CREATE LISTENER: on_room_create(room: Room) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" self . client . storage . add_or_update_room ( data ) room : types . TextRoom = self . client . get_room ( data [ 'id' ]) buffer = self . _get_from_client_buffer ( 'room_create' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . TextRoom ] = tuple ([ room ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_room_create()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete","text":"LISTENER: on_room_delete(room: Room) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_room_delete ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: ROOM_DELETE LISTENER: on_room_delete(room: Room) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" room : types . TextRoom = self . client . get_room ( data [ 'id' ]) self . client . storage . remove_room ( data [ 'id' ]) buffer = self . _get_from_client_buffer ( 'room_delete' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . TextRoom ] = tuple ([ room ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_room_delete()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update","text":"LISTENER: on_room_update(room: Room) No data passed at the moment. Gives empty args and kwargs This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_room_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: ROOM_UPDATE LISTENER: on_room_update(room: Room) **No data passed at the moment. Gives empty args and kwargs** *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" self . client . storage . add_or_update_room ( data ) room : types . TextRoom = self . client . get_room ( data [ 'id' ]) buffer = self . _get_from_client_buffer ( 'room_update' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . TextRoom ] = tuple ([ room ]) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_room_update()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start","text":"LISTENER: on_typing_start(user: User, room: TextRoom, timestamp: datetime.datetime) No data passed at the moment. Gives empty args and kwargs This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_typing_start ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: TYPING_START LISTENER: on_typing_start(user: User, room: TextRoom, timestamp: datetime.datetime) **No data passed at the moment. Gives empty args and kwargs** *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" room_id : str = data [ 'room_id' ] if 'recipient_ids' not in data . keys (): room = self . client . get_room ( room_id ) else : if len ( list ( data [ 'recipient_ids' ])) < 2 : room = self . client . get_private_room ( room_id ) else : room = self . client . get_private_group_room ( room_id ) user = self . client . get_user ( data [ 'author_id' ]) # if the timestamp is missing (which never should be the case), the # time rn will be used. timestamp = datetime . datetime . fromtimestamp ( safe_convert ( int , data . get ( 'timestamp' ), time . time ()) / 1000 ) buffer = self . _get_from_client_buffer ( 'typing_start' ) # Parameter that will be passed to the assigned listener args : Tuple [ types . User , BaseRoom , datetime . datetime ] = ( user , room , timestamp ) kwargs : Dict = {} buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_typing_start()"},{"location":"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update","text":"LISTENER: on_user_update(old_user: User, new_user: User) This parser method modifies the Client cache! Returns: Type Description Tuple[Tuple, Dict] Args and Kwargs generated by the Parser Source code in openhivenpy\\events\\event_parsers.py @log_parser_error () async def on_user_update ( self , data : dict ) -> Tuple [ Tuple , Dict ]: \"\"\" EVENT: USER_UPDATE LISTENER: on_user_update(old_user: User, new_user: User) *This parser method modifies the Client cache!* :returns: Args and Kwargs generated by the Parser \"\"\" old_user_data = self . storage [ 'users' ][ data [ 'id' ]] # cached data old_user = types . User ( old_user_data , self . client ) user_data = self . storage . add_or_update_user ( data ) new_user = types . User ( user_data , self . client ) # Parameter that will be passed to the assigned listener args : Tuple [ types . User , types . User ] = ( old_user , new_user ) kwargs : Dict = {} buffer : DynamicEventBuffer = self . _get_from_client_buffer ( 'user_update' ) buffer . add_new_event ( data , args , kwargs ) return args , kwargs","title":"on_user_update()"},{"location":"reference/hivenclient.html","text":"WebSocket Clients \u00b6 openhivenpy.client.hivenclient.HivenClient \u00b6 Main Class for connecting to Hiven and interacting with the API. Attributes \u00b6 account : Optional [ str ] property readonly \u00b6 Returns the account id/string. Currently client-limited api_version : Optional [ str ] property readonly \u00b6 Returns the currently used Hiven API-version application : Optional [ bool ] property readonly \u00b6 Returns the application string passed. Currently client-limited bio : Optional [ str ] property readonly \u00b6 Bio of the user blocked : Optional [ bool ] property readonly \u00b6 Returns whether the user is blocked bot : Optional [ bool ] property readonly \u00b6 Returns true when the user is a bot client_type : Optional [ str ] property readonly \u00b6 Returns the Client-Type aka. the name of the class used Possible options: HivenClient, UserClient, BotClient client_user : Optional [ openhivenpy . types . user . User ] property readonly \u00b6 The User Object of this client close_timeout : Optional [ int ] property readonly \u00b6 Set Close-Timeout, which if exceeded will cancel the connection connection : Optional [ openhivenpy . gateway . Connection ] property readonly \u00b6 Returns the Connection property connection_status : Optional [ int ] property readonly \u00b6 Returns the connection status as a string email : Optional [ str ] property readonly \u00b6 The e-mail of the user. Client-limited email_verified : Optional [ bool ] property readonly \u00b6 Returns True if the email is verified flags : Union [ int , str ] property readonly \u00b6 User flags represented as an numeric value/str header : Optional [ str ] property readonly \u00b6 The header of the user as a link heartbeat : Optional [ int ] property readonly \u00b6 Heartbeat in ms host : Optional [ str ] property readonly \u00b6 Returns the Hiven host url house_ids : Optional [ List [ str ]] property readonly \u00b6 Returns the list of all the ids for all houses available from the cache http : Optional [ openhivenpy . gateway . http . HTTP ] property readonly \u00b6 Returns the HTTP Client from the Connection object if it exists icon : Optional [ str ] property readonly \u00b6 The icon of the user as a link id : Optional [ str ] property readonly \u00b6 Unique string id of the user initialised : Optional [ bool ] property readonly \u00b6 Returns whether the Client is initialised. This does not include the ready state though location : Optional [ str ] property readonly \u00b6 Set location of the user log_websocket : Optional [ str ] property readonly \u00b6 Returns whether the run configuration property log_websocket is enabled loop : Optional [ asyncio . events . AbstractEventLoop ] property readonly \u00b6 Returns the Asyncio Event-loop message_broker : Optional [ openhivenpy . gateway . messagebroker . MessageBroker ] property readonly \u00b6 Returns the Message-Broker handling all incoming events mfa_enabled : Optional [ bool ] property readonly \u00b6 Returns whether mfa is enabled name : Optional [ str ] property readonly \u00b6 Name of the user open : Optional [ bool ] property readonly \u00b6 Returns whether the Connection is open presence : Optional [ str ] property readonly \u00b6 Current presence of the User queue_events : Optional [ bool ] property readonly \u00b6 Returns whether the run configuration property queue_events is enabled room_ids : Optional [ List [ str ]] property readonly \u00b6 Returns the list of all the ids for all rooms available from the cache. This includes both house rooms and private rooms startup_time : Optional [ int ] property readonly \u00b6 Returns the amount of time it took for the bot to startup storage : Optional [ openhivenpy . client . cache . ClientCache ] property readonly \u00b6 Returns the Storage/Cache of the Client token : Optional [ str ] property readonly \u00b6 Returns the token of the Client user_flags : Union [ int , str ] property readonly \u00b6 Alias for flags username : Optional [ str ] property readonly \u00b6 Username of the user website : Optional [ str ] property readonly \u00b6 Set website of the user Methods \u00b6 __init__ ( self , token = None , * , loop = None , log_websocket = False , queue_events = False , host = None , api_version = None , heartbeat = None , close_timeout = None ) special \u00b6 Parameters: Name Type Description Default token str Token that can be passed pre-runtime. If not set, the token will need to be passed at run-time. If a token is passed using local available environment variables and no other token is passed that one will be used. None loop AbstractEventLoop Loop that will be used to run the Client. If a new one is passed on run() that one will be used instead None log_websocket bool If set to True will additionally log websocket messages and their content False host Optional[str] The host API endpoint of Hiven. Defaults to api.hiven.io None api_version Optional[str] The API version that should be used. Defaults to v1 None queue_events bool If set to True the received events over the websocket will be queued and event_listeners will called one after another. If set to False all events are directly assigned to the asyncio event_loop and executed parallel False heartbeat Optional[int] Intervals in which the bot will send heartbeats to the Websocket. Defaults to the pre-set environment variable heartbeat (default at 30000) None close_timeout Optional[int] Seconds after the websocket will timeout after the end handshake didn't complete successfully. Defaults to the pre-set environment variable close_timeout (default at 40) None Source code in openhivenpy\\client\\hivenclient.py def __init__ ( self , token : str = None , * , loop : AbstractEventLoop = None , log_websocket : bool = False , queue_events : bool = False , host : Optional [ str ] = None , api_version : Optional [ str ] = None , heartbeat : Optional [ int ] = None , close_timeout : Optional [ int ] = None ): \"\"\" :param token: Token that can be passed pre-runtime. If not set, the token will need to be passed at run-time. If a token is passed using local available environment variables and no other token is passed that one will be used. :param loop: Loop that will be used to run the Client. If a new one is passed on run() that one will be used instead :param log_websocket: If set to True will additionally log websocket messages and their content :param host: The host API endpoint of Hiven. Defaults to api.hiven.io :param api_version: The API version that should be used. Defaults to v1 :param queue_events: If set to True the received events over the websocket will be queued and event_listeners will called one after another. If set to False all events are directly assigned to the asyncio event_loop and executed parallel :param heartbeat: Intervals in which the bot will send heartbeats to the Websocket. Defaults to the pre-set environment variable heartbeat (default at 30000) :param close_timeout: Seconds after the websocket will timeout after the end handshake didn't complete successfully. Defaults to the pre-set environment variable close_timeout (default at 40) \"\"\" self . _token : str = token self . _loop : asyncio . AbstractEventLoop = loop self . _client_user : Optional [ types . User ] = None self . _connection : Optional [ Connection ] = None self . _storage : ClientCache = ClientCache ( client = self , token = self . _token ) self . _log_websocket : bool = log_websocket self . _queue_events : bool = queue_events self . _host : Optional [ str ] = host \\ if host is not None \\ else os . getenv ( \"HIVEN_HOST\" ) self . _api_version : Optional [ str ] = api_version \\ if api_version is not None \\ else os . getenv ( \"HIVEN_API_VERSION\" ) self . _heartbeat : Optional [ int ] = heartbeat \\ if heartbeat is not None \\ else int ( os . getenv ( \"WS_HEARTBEAT\" )) self . _close_timeout : Optional [ int ] = close_timeout \\ if close_timeout is not None \\ else int ( os . getenv ( \"WS_CLOSE_TIMEOUT\" )) # Inheriting the HivenEventHandler class that will call and trigger # the parsers for events super () . __init__ ( client = self , parsers = HivenParsers ( self )) __repr__ ( self ) special \u00b6 Source code in openhivenpy\\client\\hivenclient.py def __repr__ ( self ) -> str : info = [ ( 'type' , self . client_type ), ( 'open' , getattr ( self , 'open' , False )), ( 'bot' , getattr ( self , 'bot' , 'na' )), ( 'name' , getattr ( self . client_user , 'name' , 'na' )), ( 'id' , getattr ( self . client_user , 'id' , 'na' )) ] return '< {} {} >' . format ( self . __class__ . __name__ , ' ' . join ( ' %s = %s ' % t for t in info )) __str__ ( self ) special \u00b6 Source code in openhivenpy\\client\\hivenclient.py def __str__ ( self ) -> str : return getattr ( self , \"name\" ) close ( self , force = False , remove_listeners = True ) async \u00b6 Closes the Connection to Hiven and stops the running WebSocket and the Event Processing Loop Parameters: Name Type Description Default force bool If set to True the running event-listener workers will be forced closed, which may lead to running code of event-listeners being stopped while performing actions. If False the stopping will wait for all running event_listeners to finish False remove_listeners bool If set to True, it will remove all listeners including the ones created using @client.event(), add_multi_listener() and add_single_listener() True Source code in openhivenpy\\client\\hivenclient.py async def close ( self , force : bool = False , remove_listeners : bool = True ) -> None : \"\"\" Closes the Connection to Hiven and stops the running WebSocket and the Event Processing Loop :param force: If set to True the running event-listener workers will be forced closed, which may lead to running code of event-listeners being stopped while performing actions. If False the stopping will wait for all running event_listeners to finish :param remove_listeners: If set to True, it will remove all listeners including the ones created using @client.event(), add_multi_listener() and add_single_listener() \"\"\" await self . connection . close ( force , remove_listeners ) logger . debug ( f \"[HIVENCLIENT] Client { repr ( self ) } was closed\" ) connect ( self , token = None , * , restart = False ) async \u00b6 Establishes a connection to Hiven and does not return until finished Parameters: Name Type Description Default token str Token that should be used to connect to Hiven. If none is passed it will try to fetch the token in the environment variables using os.getenv('HIVEN_TOKEN'). Will overwrite the pre-runtime passed token if one was passed None restart bool If set to True the Client will restart if an error is encountered! False Source code in openhivenpy\\client\\hivenclient.py async def connect ( self , token : str = None , * , restart : bool = False ) -> None : \"\"\"Establishes a connection to Hiven and does not return until finished :param token: Token that should be used to connect to Hiven. If none is passed it will try to fetch the token in the environment variables using os.getenv('HIVEN_TOKEN'). Will overwrite the pre-runtime passed token if one was passed :param restart: If set to True the Client will restart if an error is encountered! \"\"\" try : if token is None : token = os . getenv ( 'HIVEN_TOKEN' ) if self . _token is None and token is not None : self . _token = token self . storage [ 'token' ] = self . _token user_token_len : int = utils . safe_convert ( int , os . getenv ( \"USER_TOKEN_LEN\" ) ) bot_token_len : int = utils . safe_convert ( int , os . getenv ( \"BOT_TOKEN_LEN\" ) ) if self . _token is None or self . _token == \"\" : logger . critical ( f \"[HIVENCLIENT] Empty Token was passed!\" ) raise InvalidTokenError ( \"Empty Token was passed!\" ) elif len ( self . _token ) not in ( user_token_len , bot_token_len ): logger . critical ( f \"[HIVENCLIENT] Invalid Token was passed\" ) raise InvalidTokenError ( \"Invalid Token was passed\" ) self . _connection = Connection ( client = self ) await self . connection . connect ( restart = restart ) except KeyboardInterrupt : pass except InvalidTokenError as e : raise e except Exception as e : try : await self . close () except Exception : ... # ignoring, since this errors is too big for all of us del self . _connection self . _connection = None # Cleaning up the storage self . storage . closing_cleanup () utils . log_traceback ( level = 'critical' , brief = f \"Failed to keep alive connection to Hiven:\" , exc_info = sys . exc_info () ) raise HivenConnectionError ( f \"Failed to keep alive connection to Hiven\" ) from e edit ( self , ** kwargs ) async \u00b6 Edits the Clients data on Hiven Available options: header, icon, bio, location, website, username Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\client\\hivenclient.py async def edit ( self , ** kwargs ) -> None : \"\"\" Edits the Clients data on Hiven Available options: header, icon, bio, location, website, username :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : for key in kwargs . keys (): if key in [ 'header' , 'icon' , 'bio' , 'location' , 'website' , 'username' ]: await self . http . patch ( endpoint = \"/users/@me\" , json = { key : kwargs . get ( key )} ) else : raise NameError ( \"The passed value does not exist in the Client!\" ) except Exception as e : keys = \"\" . join ( str ( key + \" \" ) for key in kwargs . keys ()) utils . log_traceback ( brief = f \"Failed change the values { keys } :\" , exc_info = sys . exc_info () ) raise e find_entity ( self , entity_id ) \u00b6 Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache Parameters: Name Type Description Default entity_id str id of the Entity required Returns: Type Description Optional[dict] The cached dict if it exists in the cache else None Source code in openhivenpy\\client\\hivenclient.py def find_entity ( self , entity_id : str ) -> Optional [ dict ]: \"\"\" Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache :param entity_id: id of the Entity :return: The cached dict if it exists in the cache else None \"\"\" raw_data = self . storage [ 'entities' ] . get ( entity_id ) if raw_data : return dict ( raw_data ) else : return None find_house ( self , house_id ) \u00b6 Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache Parameters: Name Type Description Default house_id str id of the House required Returns: Type Description Optional[dict] The cached dict if it exists in the cache else None Source code in openhivenpy\\client\\hivenclient.py def find_house ( self , house_id : str ) -> Optional [ dict ]: \"\"\" Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache :param house_id: id of the House :return: The cached dict if it exists in the cache else None \"\"\" raw_data = self . storage [ 'houses' ] . get ( house_id ) if raw_data : return dict ( raw_data ) else : return None find_house_member ( self , member_id , house_id ) \u00b6 Fetches the raw data of a member Parameters: Name Type Description Default member_id str The id of the Member which should be fetched required house_id str The id of the House the Member is in required Returns: Type Description Optional[dict] The dictionary of the member if it was found Source code in openhivenpy\\client\\hivenclient.py def find_house_member ( self , member_id : str , house_id : str ) -> Optional [ dict ]: \"\"\" Fetches the raw data of a member :param member_id: The id of the Member which should be fetched :param house_id: The id of the House the Member is in :return: The dictionary of the member if it was found \"\"\" return self . storage [ 'houses' ] \\ . get ( house_id , {}) \\ . get ( 'members' , {}) \\ . get ( member_id ) find_private_group_room ( self , room_id ) \u00b6 Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache Parameters: Name Type Description Default room_id str id of the PrivateGroupRoom required Returns: Type Description Optional[dict] The cached dict if it exists in the cache else None Source code in openhivenpy\\client\\hivenclient.py def find_private_group_room ( self , room_id : str ) -> Optional [ dict ]: \"\"\" Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache :param room_id: id of the PrivateGroupRoom :return: The cached dict if it exists in the cache else None \"\"\" raw_data = self . storage [ 'rooms' ][ 'private' ][ 'group' ] . get ( room_id ) if raw_data : return dict ( raw_data ) else : return None find_private_room ( self , room_id ) \u00b6 Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache Parameters: Name Type Description Default room_id str id of the PrivateRoom required Returns: Type Description Optional[dict] The cached dict if it exists in the cache else None Source code in openhivenpy\\client\\hivenclient.py def find_private_room ( self , room_id : str ) -> Optional [ dict ]: \"\"\" Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache :param room_id: id of the PrivateRoom :return: The cached dict if it exists in the cache else None \"\"\" raw_data = self . storage [ 'rooms' ][ 'private' ][ 'single' ] . get ( room_id ) if raw_data : return dict ( raw_data ) else : return None find_relationship ( self , user_id ) \u00b6 Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache Parameters: Name Type Description Default user_id str user-id of the Relationship required Returns: Type Description Optional[dict] The cached dict if it exists in the cache else None Source code in openhivenpy\\client\\hivenclient.py def find_relationship ( self , user_id : str ) -> Optional [ dict ]: \"\"\" Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache :param user_id: user-id of the Relationship :return: The cached dict if it exists in the cache else None \"\"\" raw_data = self . storage [ 'relationships' ] . get ( user_id ) if raw_data : return dict ( raw_data ) else : return None find_room ( self , room_id ) \u00b6 Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache Parameters: Name Type Description Default room_id str id of the Room required Returns: Type Description Optional[dict] The cached dict if it exists in the cache else None Source code in openhivenpy\\client\\hivenclient.py def find_room ( self , room_id : str ) -> Optional [ dict ]: \"\"\" Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache :param room_id: id of the Room :return: The cached dict if it exists in the cache else None \"\"\" raw_data = self . storage [ 'rooms' ][ 'house' ] . get ( room_id ) if raw_data : return dict ( raw_data ) else : return None find_user ( self , user_id ) \u00b6 Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache Parameters: Name Type Description Default user_id str id of the User required Returns: Type Description Optional[dict] The cached dict if it exists in the cache else None Source code in openhivenpy\\client\\hivenclient.py def find_user ( self , user_id : str ) -> Optional [ dict ]: \"\"\" Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache :param user_id: id of the User :return: The cached dict if it exists in the cache else None \"\"\" raw_data = self . storage [ 'users' ] . get ( user_id ) if raw_data : return dict ( raw_data ) else : return None get_entity ( self , entity_id ) \u00b6 Fetches a Entity instance from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! Parameters: Name Type Description Default entity_id str id of the Entity required Returns: Type Description Optional[openhivenpy.types.entity.Entity] The Entity instance if it was found else None Source code in openhivenpy\\client\\hivenclient.py def get_entity ( self , entity_id : str ) -> Optional [ types . Entity ]: \"\"\" Fetches a Entity instance from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! :param entity_id: id of the Entity :return: The Entity instance if it was found else None \"\"\" raw_data = self . find_entity ( entity_id ) if raw_data : return types . Entity ( raw_data , self ) else : return None get_house ( self , house_id ) \u00b6 Fetches a House from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! Parameters: Name Type Description Default house_id str id of the House required Returns: Type Description Optional[openhivenpy.types.house.House] The house instance if it was found else None Source code in openhivenpy\\client\\hivenclient.py def get_house ( self , house_id : str ) -> Optional [ types . House ]: \"\"\" Fetches a House from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! :param house_id: id of the House :return: The house instance if it was found else None \"\"\" raw_data = self . find_house ( house_id ) if raw_data : return types . House ( raw_data , self ) else : return None get_house_member ( self , member_id , house_id ) \u00b6 Fetches a member from the cache based on the id Parameters: Name Type Description Default member_id str The id of the Member which should be fetched required house_id str The id of the House the Member is in required Returns: Type Description Optional[openhivenpy.types.member.Member] The Member Instance if it exists else returns None Source code in openhivenpy\\client\\hivenclient.py def get_house_member ( self , member_id : str , house_id : str ) -> Optional [ types . Member ]: \"\"\" Fetches a member from the cache based on the id :param member_id: The id of the Member which should be fetched :param house_id: The id of the House the Member is in :return: The Member Instance if it exists else returns None \"\"\" cached_member = self . find_house_member ( member_id , house_id ) if cached_member : return types . Member ( cached_member , self . _client ) return None get_private_group_room ( self , room_id ) \u00b6 Fetches a multi PrivateGroupRoom from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! Parameters: Name Type Description Default room_id str id of the PrivateGroupRoom required Returns: Type Description Optional[openhivenpy.types.private_room.PrivateGroupRoom] The PrivateGroupRoom instance if it was found else None Source code in openhivenpy\\client\\hivenclient.py def get_private_group_room ( self , room_id : str ) -> Optional [ types . PrivateGroupRoom ]: \"\"\" Fetches a multi PrivateGroupRoom from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! :param room_id: id of the PrivateGroupRoom :return: The PrivateGroupRoom instance if it was found else None \"\"\" raw_data = self . find_private_group_room ( room_id ) if raw_data : return types . PrivateGroupRoom ( raw_data , self ) else : return None get_private_room ( self , room_id ) \u00b6 Fetches a single PrivateRoom from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! Parameters: Name Type Description Default room_id str id of the PrivateRoom required Returns: Type Description Optional[openhivenpy.types.private_room.PrivateRoom] The PrivateRoom instance if it was found else None Source code in openhivenpy\\client\\hivenclient.py def get_private_room ( self , room_id : str ) -> Optional [ types . PrivateRoom ]: \"\"\" Fetches a single PrivateRoom from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! :param room_id: id of the PrivateRoom :return: The PrivateRoom instance if it was found else None \"\"\" raw_data = self . find_private_room ( room_id ) if raw_data : return types . PrivateRoom ( raw_data , self ) else : return None get_relationship ( self , user_id ) \u00b6 Fetches a Relationship instance from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! Parameters: Name Type Description Default user_id str user-id of the Relationship required Returns: Type Description Optional[openhivenpy.types.relationship.Relationship] The Relationship instance if it was found else None Source code in openhivenpy\\client\\hivenclient.py def get_relationship ( self , user_id : str ) -> Optional [ types . Relationship ]: \"\"\" Fetches a Relationship instance from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! :param user_id: user-id of the Relationship :return: The Relationship instance if it was found else None \"\"\" raw_data = self . find_relationship ( user_id ) if raw_data : return types . Relationship ( raw_data , self ) else : return None get_room ( self , room_id ) \u00b6 Fetches a Room from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! Parameters: Name Type Description Default room_id str id of the Room required Returns: Type Description Optional[openhivenpy.types.textroom.TextRoom] The Room instance if it was found else None Source code in openhivenpy\\client\\hivenclient.py def get_room ( self , room_id : str ) -> Optional [ types . TextRoom ]: \"\"\" Fetches a Room from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! :param room_id: id of the Room :return: The Room instance if it was found else None \"\"\" raw_data = self . find_room ( room_id ) if raw_data : return types . TextRoom ( raw_data , self ) else : return None get_user ( self , user_id ) \u00b6 Fetches a User instance from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! Parameters: Name Type Description Default user_id str id of the User required Returns: Type Description Optional[openhivenpy.types.user.User] The User instance if it was found else None Source code in openhivenpy\\client\\hivenclient.py def get_user ( self , user_id : str ) -> Optional [ types . User ]: \"\"\" Fetches a User instance from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! :param user_id: id of the User :return: The User instance if it was found else None \"\"\" raw_data = self . find_user ( user_id ) if raw_data : return types . User ( raw_data , self ) else : return None run ( self , token = None , * , loop = None , restart = False ) \u00b6 Standard function for establishing a connection to Hiven Parameters: Name Type Description Default token str Token that should be used to connect to Hiven. If none is passed it will try to fetch the token using os.getenv() None loop Optional[asyncio.events.AbstractEventLoop] Event loop that will be used to execute all async functions. Uses 'asyncio.get_event_loop()' to fetch the EventLoop. Will create a new one if no one was created yet. If the loop was passed during initialisation that one will be used if no loop is passed. If a new loop is passed, that one will be used for execution. None restart bool If set to True the Client will restart if an error is encountered! False Source code in openhivenpy\\client\\hivenclient.py def run ( self , token : str = None , * , loop : Optional [ asyncio . AbstractEventLoop ] = None , restart : bool = False ) -> None : \"\"\" Standard function for establishing a connection to Hiven :param token: Token that should be used to connect to Hiven. If none is passed it will try to fetch the token using os.getenv() :param loop: Event loop that will be used to execute all async functions. Uses 'asyncio.get_event_loop()' to fetch the EventLoop. Will create a new one if no one was created yet. If the loop was passed during initialisation that one will be used if no loop is passed. If a new loop is passed, that one will be used for execution. :param restart: If set to True the Client will restart if an error is encountered! \"\"\" if token is None : token = os . getenv ( 'HIVEN_TOKEN' ) if self . _loop is not None : self . _loop = loop if loop is not None else self . _loop else : try : self . _loop = loop if loop is not None \\ else asyncio . get_event_loop () except RuntimeError as e : # If the function is called outside of the main thread a # new event_loop must be created, so that the process can # still be run. This will raise an exception though if the # user tries to start the client while another loop already # is running! Therefore run() should only be used when no # event_loop was created yet that could interfere with the # process, else connect() is available if \"There is no current event loop in thread\" in str ( e ): loop = asyncio . new_event_loop () asyncio . set_event_loop ( loop ) self . _loop = asyncio . get_event_loop () else : raise e self . loop . run_until_complete ( self . connect ( token , restart = restart )) Important The HivenClient is already inherited into this class ( UserClient ), so all properties and methods can be used here as well. openhivenpy.client.userclient.UserClient \u00b6 Class for the specific use of a user account on Hiven Methods \u00b6 block_user ( self , user ) async \u00b6 Blocks a user on Hiven Parameters: Name Type Description Default user Int or User Object used for the request required Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\client\\userclient.py async def block_user ( self , user ) -> None : \"\"\" Blocks a user on Hiven :param user: Int or User Object used for the request :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : if type ( user ) is int : user_id = str ( user ) elif type ( user ) is types . User : user_id = str ( getattr ( user , 'id' )) else : raise TypeError ( f \"Expected User or int! Not { type ( user ) } \" ) await self . http . put ( f \"/relationships/@me/blocked/ { user_id } \" ) except Exception as e : user_id = user if user is not None else getattr ( user , 'id' , None ) utils . log_traceback ( brief = f \"Failed to block user with id { user_id } :\" , exc_info = sys . exc_info () ) raise e cancel_friend_request ( self , user ) async \u00b6 Cancels an open friend request if it exists Parameters: Name Type Description Default user Int or User Object used for the request required Exceptions: Type Description TypeError If the passed user is not one of the types: int or types.User HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\client\\userclient.py async def cancel_friend_request ( self , user ) -> None : \"\"\" Cancels an open friend request if it exists :param user: Int or User Object used for the request :raises TypeError: If the passed user is not one of the types: int or types.User :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : if type ( user ) is int : user_id = str ( user ) elif type ( user ) is types . User : user_id = str ( getattr ( user , 'id' )) else : raise TypeError ( f \"Expected openhivenpy.types.User or int! Not { type ( user ) } \" ) await self . http . delete ( f \"/relationships/@me/friend-requests/ { user_id } \" ) except Exception as e : user_id = user if user is not None else getattr ( user , 'id' , None ) utils . log_traceback ( brief = f \"Failed to cancel the friend request of a user with id { user_id } :\" , exc_info = sys . exc_info () ) raise e fetch_current_friend_requests ( self ) async \u00b6 Fetches all open friend requests on Hiven Returns: Type Description Optional[dict] Returns a dict with all active friend requests if successful Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\client\\userclient.py async def fetch_current_friend_requests ( self ) -> Union [ dict , None ]: \"\"\" Fetches all open friend requests on Hiven :return: Returns a dict with all active friend requests if successful :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : resp = await self . http . get ( f \"/relationships/@me/friend-requests\" ) resp = await resp . json () data = resp . get ( 'data' ) incoming_ = data . get ( 'incoming' ) if incoming_ : data [ 'incoming' ] = [] for d in incoming_ : data [ 'incoming' ] . append ( types . LazyUser ( d , self )) outgoing_ = data . get ( 'outgoing' ) if outgoing_ : data [ 'outgoing' ] = [] for d in outgoing_ : data [ 'outgoing' ] . append ( types . LazyUser ( d , self )) return { 'incoming' : data [ 'incoming' ], 'outgoing' : data [ 'outgoing' ] } except Exception as e : utils . log_traceback ( brief = \"Failed to fetch the current open friend requests:\" , exc_info = sys . exc_info () ) raise e send_friend_request ( self , user ) async \u00b6 Sends a friend request to a user Parameters: Name Type Description Default user Int or User Object used for the request required Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\client\\userclient.py async def send_friend_request ( self , user ) -> None : \"\"\" Sends a friend request to a user :param user: Int or User Object used for the request :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : if type ( user ) is int : user_id = str ( user ) elif type ( user ) is types . User : user_id = str ( getattr ( user , 'id' )) else : raise TypeError ( f \"Expected User or int! Not { type ( user ) } \" ) await self . http . post ( endpoint = f \"/relationships/@me/friend-requests\" , json = { 'user_id' : user_id } ) except Exception as e : user_id = user if user is not None else getattr ( user , 'id' , None ) utils . log_traceback ( brief = f \"Failed to send a friend request a user with id { user_id } :\" , exc_info = sys . exc_info () ) raise e unblock_user ( self , user ) async \u00b6 Unblocks a user if the user is blocked Parameters: Name Type Description Default user Int or User Object used for the request required Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\client\\userclient.py async def unblock_user ( self , user ) -> None : \"\"\" Unblocks a user if the user is blocked :param user: Int or User Object used for the request :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : if type ( user ) is int : user_id = str ( user ) elif type ( user ) is types . User : user_id = str ( getattr ( user , 'id' )) else : raise TypeError ( f \"Expected User or int! Not { type ( user ) } \" ) await self . http . delete ( f \"/relationships/@me/blocked/ { user_id } \" ) except Exception as e : user_id = user if user is not None else getattr ( user , 'id' , None ) utils . log_traceback ( brief = f \"Failed to unblock a user with id { user_id } :\" , exc_info = sys . exc_info () ) raise e Important The HivenClient is already inherited into this class ( BotClient ), so all properties and methods can be used here as well. openhivenpy.client.botclient.BotClient \u00b6 Class for the specific use of a bot Application on Hiven","title":"WebSocket Clients"},{"location":"reference/hivenclient.html#websocket-clients","text":"","title":"WebSocket Clients"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient","text":"Main Class for connecting to Hiven and interacting with the API.","title":"HivenClient"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient-attributes","text":"","title":"Attributes"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.account","text":"Returns the account id/string. Currently client-limited","title":"account"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.api_version","text":"Returns the currently used Hiven API-version","title":"api_version"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.application","text":"Returns the application string passed. Currently client-limited","title":"application"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.bio","text":"Bio of the user","title":"bio"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.blocked","text":"Returns whether the user is blocked","title":"blocked"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.bot","text":"Returns true when the user is a bot","title":"bot"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type","text":"Returns the Client-Type aka. the name of the class used Possible options: HivenClient, UserClient, BotClient","title":"client_type"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_user","text":"The User Object of this client","title":"client_user"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close_timeout","text":"Set Close-Timeout, which if exceeded will cancel the connection","title":"close_timeout"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connection","text":"Returns the Connection property","title":"connection"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connection_status","text":"Returns the connection status as a string","title":"connection_status"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email","text":"The e-mail of the user. Client-limited","title":"email"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email_verified","text":"Returns True if the email is verified","title":"email_verified"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.flags","text":"User flags represented as an numeric value/str","title":"flags"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.header","text":"The header of the user as a link","title":"header"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.heartbeat","text":"Heartbeat in ms","title":"heartbeat"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.host","text":"Returns the Hiven host url","title":"host"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.house_ids","text":"Returns the list of all the ids for all houses available from the cache","title":"house_ids"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.http","text":"Returns the HTTP Client from the Connection object if it exists","title":"http"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.icon","text":"The icon of the user as a link","title":"icon"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.id","text":"Unique string id of the user","title":"id"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.initialised","text":"Returns whether the Client is initialised. This does not include the ready state though","title":"initialised"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.location","text":"Set location of the user","title":"location"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.log_websocket","text":"Returns whether the run configuration property log_websocket is enabled","title":"log_websocket"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.loop","text":"Returns the Asyncio Event-loop","title":"loop"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.message_broker","text":"Returns the Message-Broker handling all incoming events","title":"message_broker"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.mfa_enabled","text":"Returns whether mfa is enabled","title":"mfa_enabled"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.name","text":"Name of the user","title":"name"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.open","text":"Returns whether the Connection is open","title":"open"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.presence","text":"Current presence of the User","title":"presence"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.queue_events","text":"Returns whether the run configuration property queue_events is enabled","title":"queue_events"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.room_ids","text":"Returns the list of all the ids for all rooms available from the cache. This includes both house rooms and private rooms","title":"room_ids"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.startup_time","text":"Returns the amount of time it took for the bot to startup","title":"startup_time"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.storage","text":"Returns the Storage/Cache of the Client","title":"storage"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.token","text":"Returns the token of the Client","title":"token"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.user_flags","text":"Alias for flags","title":"user_flags"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.username","text":"Username of the user","title":"username"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.website","text":"Set website of the user","title":"website"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient-methods","text":"","title":"Methods"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__","text":"Parameters: Name Type Description Default token str Token that can be passed pre-runtime. If not set, the token will need to be passed at run-time. If a token is passed using local available environment variables and no other token is passed that one will be used. None loop AbstractEventLoop Loop that will be used to run the Client. If a new one is passed on run() that one will be used instead None log_websocket bool If set to True will additionally log websocket messages and their content False host Optional[str] The host API endpoint of Hiven. Defaults to api.hiven.io None api_version Optional[str] The API version that should be used. Defaults to v1 None queue_events bool If set to True the received events over the websocket will be queued and event_listeners will called one after another. If set to False all events are directly assigned to the asyncio event_loop and executed parallel False heartbeat Optional[int] Intervals in which the bot will send heartbeats to the Websocket. Defaults to the pre-set environment variable heartbeat (default at 30000) None close_timeout Optional[int] Seconds after the websocket will timeout after the end handshake didn't complete successfully. Defaults to the pre-set environment variable close_timeout (default at 40) None Source code in openhivenpy\\client\\hivenclient.py def __init__ ( self , token : str = None , * , loop : AbstractEventLoop = None , log_websocket : bool = False , queue_events : bool = False , host : Optional [ str ] = None , api_version : Optional [ str ] = None , heartbeat : Optional [ int ] = None , close_timeout : Optional [ int ] = None ): \"\"\" :param token: Token that can be passed pre-runtime. If not set, the token will need to be passed at run-time. If a token is passed using local available environment variables and no other token is passed that one will be used. :param loop: Loop that will be used to run the Client. If a new one is passed on run() that one will be used instead :param log_websocket: If set to True will additionally log websocket messages and their content :param host: The host API endpoint of Hiven. Defaults to api.hiven.io :param api_version: The API version that should be used. Defaults to v1 :param queue_events: If set to True the received events over the websocket will be queued and event_listeners will called one after another. If set to False all events are directly assigned to the asyncio event_loop and executed parallel :param heartbeat: Intervals in which the bot will send heartbeats to the Websocket. Defaults to the pre-set environment variable heartbeat (default at 30000) :param close_timeout: Seconds after the websocket will timeout after the end handshake didn't complete successfully. Defaults to the pre-set environment variable close_timeout (default at 40) \"\"\" self . _token : str = token self . _loop : asyncio . AbstractEventLoop = loop self . _client_user : Optional [ types . User ] = None self . _connection : Optional [ Connection ] = None self . _storage : ClientCache = ClientCache ( client = self , token = self . _token ) self . _log_websocket : bool = log_websocket self . _queue_events : bool = queue_events self . _host : Optional [ str ] = host \\ if host is not None \\ else os . getenv ( \"HIVEN_HOST\" ) self . _api_version : Optional [ str ] = api_version \\ if api_version is not None \\ else os . getenv ( \"HIVEN_API_VERSION\" ) self . _heartbeat : Optional [ int ] = heartbeat \\ if heartbeat is not None \\ else int ( os . getenv ( \"WS_HEARTBEAT\" )) self . _close_timeout : Optional [ int ] = close_timeout \\ if close_timeout is not None \\ else int ( os . getenv ( \"WS_CLOSE_TIMEOUT\" )) # Inheriting the HivenEventHandler class that will call and trigger # the parsers for events super () . __init__ ( client = self , parsers = HivenParsers ( self ))","title":"__init__()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__","text":"Source code in openhivenpy\\client\\hivenclient.py def __repr__ ( self ) -> str : info = [ ( 'type' , self . client_type ), ( 'open' , getattr ( self , 'open' , False )), ( 'bot' , getattr ( self , 'bot' , 'na' )), ( 'name' , getattr ( self . client_user , 'name' , 'na' )), ( 'id' , getattr ( self . client_user , 'id' , 'na' )) ] return '< {} {} >' . format ( self . __class__ . __name__ , ' ' . join ( ' %s = %s ' % t for t in info ))","title":"__repr__()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__str__","text":"Source code in openhivenpy\\client\\hivenclient.py def __str__ ( self ) -> str : return getattr ( self , \"name\" )","title":"__str__()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close","text":"Closes the Connection to Hiven and stops the running WebSocket and the Event Processing Loop Parameters: Name Type Description Default force bool If set to True the running event-listener workers will be forced closed, which may lead to running code of event-listeners being stopped while performing actions. If False the stopping will wait for all running event_listeners to finish False remove_listeners bool If set to True, it will remove all listeners including the ones created using @client.event(), add_multi_listener() and add_single_listener() True Source code in openhivenpy\\client\\hivenclient.py async def close ( self , force : bool = False , remove_listeners : bool = True ) -> None : \"\"\" Closes the Connection to Hiven and stops the running WebSocket and the Event Processing Loop :param force: If set to True the running event-listener workers will be forced closed, which may lead to running code of event-listeners being stopped while performing actions. If False the stopping will wait for all running event_listeners to finish :param remove_listeners: If set to True, it will remove all listeners including the ones created using @client.event(), add_multi_listener() and add_single_listener() \"\"\" await self . connection . close ( force , remove_listeners ) logger . debug ( f \"[HIVENCLIENT] Client { repr ( self ) } was closed\" )","title":"close()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect","text":"Establishes a connection to Hiven and does not return until finished Parameters: Name Type Description Default token str Token that should be used to connect to Hiven. If none is passed it will try to fetch the token in the environment variables using os.getenv('HIVEN_TOKEN'). Will overwrite the pre-runtime passed token if one was passed None restart bool If set to True the Client will restart if an error is encountered! False Source code in openhivenpy\\client\\hivenclient.py async def connect ( self , token : str = None , * , restart : bool = False ) -> None : \"\"\"Establishes a connection to Hiven and does not return until finished :param token: Token that should be used to connect to Hiven. If none is passed it will try to fetch the token in the environment variables using os.getenv('HIVEN_TOKEN'). Will overwrite the pre-runtime passed token if one was passed :param restart: If set to True the Client will restart if an error is encountered! \"\"\" try : if token is None : token = os . getenv ( 'HIVEN_TOKEN' ) if self . _token is None and token is not None : self . _token = token self . storage [ 'token' ] = self . _token user_token_len : int = utils . safe_convert ( int , os . getenv ( \"USER_TOKEN_LEN\" ) ) bot_token_len : int = utils . safe_convert ( int , os . getenv ( \"BOT_TOKEN_LEN\" ) ) if self . _token is None or self . _token == \"\" : logger . critical ( f \"[HIVENCLIENT] Empty Token was passed!\" ) raise InvalidTokenError ( \"Empty Token was passed!\" ) elif len ( self . _token ) not in ( user_token_len , bot_token_len ): logger . critical ( f \"[HIVENCLIENT] Invalid Token was passed\" ) raise InvalidTokenError ( \"Invalid Token was passed\" ) self . _connection = Connection ( client = self ) await self . connection . connect ( restart = restart ) except KeyboardInterrupt : pass except InvalidTokenError as e : raise e except Exception as e : try : await self . close () except Exception : ... # ignoring, since this errors is too big for all of us del self . _connection self . _connection = None # Cleaning up the storage self . storage . closing_cleanup () utils . log_traceback ( level = 'critical' , brief = f \"Failed to keep alive connection to Hiven:\" , exc_info = sys . exc_info () ) raise HivenConnectionError ( f \"Failed to keep alive connection to Hiven\" ) from e","title":"connect()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit","text":"Edits the Clients data on Hiven Available options: header, icon, bio, location, website, username Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\client\\hivenclient.py async def edit ( self , ** kwargs ) -> None : \"\"\" Edits the Clients data on Hiven Available options: header, icon, bio, location, website, username :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : for key in kwargs . keys (): if key in [ 'header' , 'icon' , 'bio' , 'location' , 'website' , 'username' ]: await self . http . patch ( endpoint = \"/users/@me\" , json = { key : kwargs . get ( key )} ) else : raise NameError ( \"The passed value does not exist in the Client!\" ) except Exception as e : keys = \"\" . join ( str ( key + \" \" ) for key in kwargs . keys ()) utils . log_traceback ( brief = f \"Failed change the values { keys } :\" , exc_info = sys . exc_info () ) raise e","title":"edit()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity","text":"Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache Parameters: Name Type Description Default entity_id str id of the Entity required Returns: Type Description Optional[dict] The cached dict if it exists in the cache else None Source code in openhivenpy\\client\\hivenclient.py def find_entity ( self , entity_id : str ) -> Optional [ dict ]: \"\"\" Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache :param entity_id: id of the Entity :return: The cached dict if it exists in the cache else None \"\"\" raw_data = self . storage [ 'entities' ] . get ( entity_id ) if raw_data : return dict ( raw_data ) else : return None","title":"find_entity()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house","text":"Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache Parameters: Name Type Description Default house_id str id of the House required Returns: Type Description Optional[dict] The cached dict if it exists in the cache else None Source code in openhivenpy\\client\\hivenclient.py def find_house ( self , house_id : str ) -> Optional [ dict ]: \"\"\" Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache :param house_id: id of the House :return: The cached dict if it exists in the cache else None \"\"\" raw_data = self . storage [ 'houses' ] . get ( house_id ) if raw_data : return dict ( raw_data ) else : return None","title":"find_house()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member","text":"Fetches the raw data of a member Parameters: Name Type Description Default member_id str The id of the Member which should be fetched required house_id str The id of the House the Member is in required Returns: Type Description Optional[dict] The dictionary of the member if it was found Source code in openhivenpy\\client\\hivenclient.py def find_house_member ( self , member_id : str , house_id : str ) -> Optional [ dict ]: \"\"\" Fetches the raw data of a member :param member_id: The id of the Member which should be fetched :param house_id: The id of the House the Member is in :return: The dictionary of the member if it was found \"\"\" return self . storage [ 'houses' ] \\ . get ( house_id , {}) \\ . get ( 'members' , {}) \\ . get ( member_id )","title":"find_house_member()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room","text":"Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache Parameters: Name Type Description Default room_id str id of the PrivateGroupRoom required Returns: Type Description Optional[dict] The cached dict if it exists in the cache else None Source code in openhivenpy\\client\\hivenclient.py def find_private_group_room ( self , room_id : str ) -> Optional [ dict ]: \"\"\" Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache :param room_id: id of the PrivateGroupRoom :return: The cached dict if it exists in the cache else None \"\"\" raw_data = self . storage [ 'rooms' ][ 'private' ][ 'group' ] . get ( room_id ) if raw_data : return dict ( raw_data ) else : return None","title":"find_private_group_room()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room","text":"Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache Parameters: Name Type Description Default room_id str id of the PrivateRoom required Returns: Type Description Optional[dict] The cached dict if it exists in the cache else None Source code in openhivenpy\\client\\hivenclient.py def find_private_room ( self , room_id : str ) -> Optional [ dict ]: \"\"\" Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache :param room_id: id of the PrivateRoom :return: The cached dict if it exists in the cache else None \"\"\" raw_data = self . storage [ 'rooms' ][ 'private' ][ 'single' ] . get ( room_id ) if raw_data : return dict ( raw_data ) else : return None","title":"find_private_room()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship","text":"Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache Parameters: Name Type Description Default user_id str user-id of the Relationship required Returns: Type Description Optional[dict] The cached dict if it exists in the cache else None Source code in openhivenpy\\client\\hivenclient.py def find_relationship ( self , user_id : str ) -> Optional [ dict ]: \"\"\" Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache :param user_id: user-id of the Relationship :return: The cached dict if it exists in the cache else None \"\"\" raw_data = self . storage [ 'relationships' ] . get ( user_id ) if raw_data : return dict ( raw_data ) else : return None","title":"find_relationship()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room","text":"Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache Parameters: Name Type Description Default room_id str id of the Room required Returns: Type Description Optional[dict] The cached dict if it exists in the cache else None Source code in openhivenpy\\client\\hivenclient.py def find_room ( self , room_id : str ) -> Optional [ dict ]: \"\"\" Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache :param room_id: id of the Room :return: The cached dict if it exists in the cache else None \"\"\" raw_data = self . storage [ 'rooms' ][ 'house' ] . get ( room_id ) if raw_data : return dict ( raw_data ) else : return None","title":"find_room()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user","text":"Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache Parameters: Name Type Description Default user_id str id of the User required Returns: Type Description Optional[dict] The cached dict if it exists in the cache else None Source code in openhivenpy\\client\\hivenclient.py def find_user ( self , user_id : str ) -> Optional [ dict ]: \"\"\" Fetches a dictionary from the cache based on the passed id The returned dict is only a copy from the cache :param user_id: id of the User :return: The cached dict if it exists in the cache else None \"\"\" raw_data = self . storage [ 'users' ] . get ( user_id ) if raw_data : return dict ( raw_data ) else : return None","title":"find_user()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity","text":"Fetches a Entity instance from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! Parameters: Name Type Description Default entity_id str id of the Entity required Returns: Type Description Optional[openhivenpy.types.entity.Entity] The Entity instance if it was found else None Source code in openhivenpy\\client\\hivenclient.py def get_entity ( self , entity_id : str ) -> Optional [ types . Entity ]: \"\"\" Fetches a Entity instance from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! :param entity_id: id of the Entity :return: The Entity instance if it was found else None \"\"\" raw_data = self . find_entity ( entity_id ) if raw_data : return types . Entity ( raw_data , self ) else : return None","title":"get_entity()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house","text":"Fetches a House from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! Parameters: Name Type Description Default house_id str id of the House required Returns: Type Description Optional[openhivenpy.types.house.House] The house instance if it was found else None Source code in openhivenpy\\client\\hivenclient.py def get_house ( self , house_id : str ) -> Optional [ types . House ]: \"\"\" Fetches a House from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! :param house_id: id of the House :return: The house instance if it was found else None \"\"\" raw_data = self . find_house ( house_id ) if raw_data : return types . House ( raw_data , self ) else : return None","title":"get_house()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member","text":"Fetches a member from the cache based on the id Parameters: Name Type Description Default member_id str The id of the Member which should be fetched required house_id str The id of the House the Member is in required Returns: Type Description Optional[openhivenpy.types.member.Member] The Member Instance if it exists else returns None Source code in openhivenpy\\client\\hivenclient.py def get_house_member ( self , member_id : str , house_id : str ) -> Optional [ types . Member ]: \"\"\" Fetches a member from the cache based on the id :param member_id: The id of the Member which should be fetched :param house_id: The id of the House the Member is in :return: The Member Instance if it exists else returns None \"\"\" cached_member = self . find_house_member ( member_id , house_id ) if cached_member : return types . Member ( cached_member , self . _client ) return None","title":"get_house_member()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room","text":"Fetches a multi PrivateGroupRoom from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! Parameters: Name Type Description Default room_id str id of the PrivateGroupRoom required Returns: Type Description Optional[openhivenpy.types.private_room.PrivateGroupRoom] The PrivateGroupRoom instance if it was found else None Source code in openhivenpy\\client\\hivenclient.py def get_private_group_room ( self , room_id : str ) -> Optional [ types . PrivateGroupRoom ]: \"\"\" Fetches a multi PrivateGroupRoom from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! :param room_id: id of the PrivateGroupRoom :return: The PrivateGroupRoom instance if it was found else None \"\"\" raw_data = self . find_private_group_room ( room_id ) if raw_data : return types . PrivateGroupRoom ( raw_data , self ) else : return None","title":"get_private_group_room()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room","text":"Fetches a single PrivateRoom from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! Parameters: Name Type Description Default room_id str id of the PrivateRoom required Returns: Type Description Optional[openhivenpy.types.private_room.PrivateRoom] The PrivateRoom instance if it was found else None Source code in openhivenpy\\client\\hivenclient.py def get_private_room ( self , room_id : str ) -> Optional [ types . PrivateRoom ]: \"\"\" Fetches a single PrivateRoom from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! :param room_id: id of the PrivateRoom :return: The PrivateRoom instance if it was found else None \"\"\" raw_data = self . find_private_room ( room_id ) if raw_data : return types . PrivateRoom ( raw_data , self ) else : return None","title":"get_private_room()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship","text":"Fetches a Relationship instance from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! Parameters: Name Type Description Default user_id str user-id of the Relationship required Returns: Type Description Optional[openhivenpy.types.relationship.Relationship] The Relationship instance if it was found else None Source code in openhivenpy\\client\\hivenclient.py def get_relationship ( self , user_id : str ) -> Optional [ types . Relationship ]: \"\"\" Fetches a Relationship instance from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! :param user_id: user-id of the Relationship :return: The Relationship instance if it was found else None \"\"\" raw_data = self . find_relationship ( user_id ) if raw_data : return types . Relationship ( raw_data , self ) else : return None","title":"get_relationship()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room","text":"Fetches a Room from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! Parameters: Name Type Description Default room_id str id of the Room required Returns: Type Description Optional[openhivenpy.types.textroom.TextRoom] The Room instance if it was found else None Source code in openhivenpy\\client\\hivenclient.py def get_room ( self , room_id : str ) -> Optional [ types . TextRoom ]: \"\"\" Fetches a Room from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! :param room_id: id of the Room :return: The Room instance if it was found else None \"\"\" raw_data = self . find_room ( room_id ) if raw_data : return types . TextRoom ( raw_data , self ) else : return None","title":"get_room()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user","text":"Fetches a User instance from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! Parameters: Name Type Description Default user_id str id of the User required Returns: Type Description Optional[openhivenpy.types.user.User] The User instance if it was found else None Source code in openhivenpy\\client\\hivenclient.py def get_user ( self , user_id : str ) -> Optional [ types . User ]: \"\"\" Fetches a User instance from the cache based on the passed id The returned data of the instance is only a copy from the cache and if changes are made while the instance exists the data will not be updated! :param user_id: id of the User :return: The User instance if it was found else None \"\"\" raw_data = self . find_user ( user_id ) if raw_data : return types . User ( raw_data , self ) else : return None","title":"get_user()"},{"location":"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run","text":"Standard function for establishing a connection to Hiven Parameters: Name Type Description Default token str Token that should be used to connect to Hiven. If none is passed it will try to fetch the token using os.getenv() None loop Optional[asyncio.events.AbstractEventLoop] Event loop that will be used to execute all async functions. Uses 'asyncio.get_event_loop()' to fetch the EventLoop. Will create a new one if no one was created yet. If the loop was passed during initialisation that one will be used if no loop is passed. If a new loop is passed, that one will be used for execution. None restart bool If set to True the Client will restart if an error is encountered! False Source code in openhivenpy\\client\\hivenclient.py def run ( self , token : str = None , * , loop : Optional [ asyncio . AbstractEventLoop ] = None , restart : bool = False ) -> None : \"\"\" Standard function for establishing a connection to Hiven :param token: Token that should be used to connect to Hiven. If none is passed it will try to fetch the token using os.getenv() :param loop: Event loop that will be used to execute all async functions. Uses 'asyncio.get_event_loop()' to fetch the EventLoop. Will create a new one if no one was created yet. If the loop was passed during initialisation that one will be used if no loop is passed. If a new loop is passed, that one will be used for execution. :param restart: If set to True the Client will restart if an error is encountered! \"\"\" if token is None : token = os . getenv ( 'HIVEN_TOKEN' ) if self . _loop is not None : self . _loop = loop if loop is not None else self . _loop else : try : self . _loop = loop if loop is not None \\ else asyncio . get_event_loop () except RuntimeError as e : # If the function is called outside of the main thread a # new event_loop must be created, so that the process can # still be run. This will raise an exception though if the # user tries to start the client while another loop already # is running! Therefore run() should only be used when no # event_loop was created yet that could interfere with the # process, else connect() is available if \"There is no current event loop in thread\" in str ( e ): loop = asyncio . new_event_loop () asyncio . set_event_loop ( loop ) self . _loop = asyncio . get_event_loop () else : raise e self . loop . run_until_complete ( self . connect ( token , restart = restart )) Important The HivenClient is already inherited into this class ( UserClient ), so all properties and methods can be used here as well.","title":"run()"},{"location":"reference/hivenclient.html#openhivenpy.client.userclient.UserClient","text":"Class for the specific use of a user account on Hiven","title":"UserClient"},{"location":"reference/hivenclient.html#openhivenpy.client.userclient.UserClient-methods","text":"","title":"Methods"},{"location":"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user","text":"Blocks a user on Hiven Parameters: Name Type Description Default user Int or User Object used for the request required Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\client\\userclient.py async def block_user ( self , user ) -> None : \"\"\" Blocks a user on Hiven :param user: Int or User Object used for the request :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : if type ( user ) is int : user_id = str ( user ) elif type ( user ) is types . User : user_id = str ( getattr ( user , 'id' )) else : raise TypeError ( f \"Expected User or int! Not { type ( user ) } \" ) await self . http . put ( f \"/relationships/@me/blocked/ { user_id } \" ) except Exception as e : user_id = user if user is not None else getattr ( user , 'id' , None ) utils . log_traceback ( brief = f \"Failed to block user with id { user_id } :\" , exc_info = sys . exc_info () ) raise e","title":"block_user()"},{"location":"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request","text":"Cancels an open friend request if it exists Parameters: Name Type Description Default user Int or User Object used for the request required Exceptions: Type Description TypeError If the passed user is not one of the types: int or types.User HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\client\\userclient.py async def cancel_friend_request ( self , user ) -> None : \"\"\" Cancels an open friend request if it exists :param user: Int or User Object used for the request :raises TypeError: If the passed user is not one of the types: int or types.User :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : if type ( user ) is int : user_id = str ( user ) elif type ( user ) is types . User : user_id = str ( getattr ( user , 'id' )) else : raise TypeError ( f \"Expected openhivenpy.types.User or int! Not { type ( user ) } \" ) await self . http . delete ( f \"/relationships/@me/friend-requests/ { user_id } \" ) except Exception as e : user_id = user if user is not None else getattr ( user , 'id' , None ) utils . log_traceback ( brief = f \"Failed to cancel the friend request of a user with id { user_id } :\" , exc_info = sys . exc_info () ) raise e","title":"cancel_friend_request()"},{"location":"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests","text":"Fetches all open friend requests on Hiven Returns: Type Description Optional[dict] Returns a dict with all active friend requests if successful Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\client\\userclient.py async def fetch_current_friend_requests ( self ) -> Union [ dict , None ]: \"\"\" Fetches all open friend requests on Hiven :return: Returns a dict with all active friend requests if successful :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : resp = await self . http . get ( f \"/relationships/@me/friend-requests\" ) resp = await resp . json () data = resp . get ( 'data' ) incoming_ = data . get ( 'incoming' ) if incoming_ : data [ 'incoming' ] = [] for d in incoming_ : data [ 'incoming' ] . append ( types . LazyUser ( d , self )) outgoing_ = data . get ( 'outgoing' ) if outgoing_ : data [ 'outgoing' ] = [] for d in outgoing_ : data [ 'outgoing' ] . append ( types . LazyUser ( d , self )) return { 'incoming' : data [ 'incoming' ], 'outgoing' : data [ 'outgoing' ] } except Exception as e : utils . log_traceback ( brief = \"Failed to fetch the current open friend requests:\" , exc_info = sys . exc_info () ) raise e","title":"fetch_current_friend_requests()"},{"location":"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request","text":"Sends a friend request to a user Parameters: Name Type Description Default user Int or User Object used for the request required Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\client\\userclient.py async def send_friend_request ( self , user ) -> None : \"\"\" Sends a friend request to a user :param user: Int or User Object used for the request :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : if type ( user ) is int : user_id = str ( user ) elif type ( user ) is types . User : user_id = str ( getattr ( user , 'id' )) else : raise TypeError ( f \"Expected User or int! Not { type ( user ) } \" ) await self . http . post ( endpoint = f \"/relationships/@me/friend-requests\" , json = { 'user_id' : user_id } ) except Exception as e : user_id = user if user is not None else getattr ( user , 'id' , None ) utils . log_traceback ( brief = f \"Failed to send a friend request a user with id { user_id } :\" , exc_info = sys . exc_info () ) raise e","title":"send_friend_request()"},{"location":"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user","text":"Unblocks a user if the user is blocked Parameters: Name Type Description Default user Int or User Object used for the request required Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\client\\userclient.py async def unblock_user ( self , user ) -> None : \"\"\" Unblocks a user if the user is blocked :param user: Int or User Object used for the request :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : if type ( user ) is int : user_id = str ( user ) elif type ( user ) is types . User : user_id = str ( getattr ( user , 'id' )) else : raise TypeError ( f \"Expected User or int! Not { type ( user ) } \" ) await self . http . delete ( f \"/relationships/@me/blocked/ { user_id } \" ) except Exception as e : user_id = user if user is not None else getattr ( user , 'id' , None ) utils . log_traceback ( brief = f \"Failed to unblock a user with id { user_id } :\" , exc_info = sys . exc_info () ) raise e Important The HivenClient is already inherited into this class ( BotClient ), so all properties and methods can be used here as well.","title":"unblock_user()"},{"location":"reference/hivenclient.html#openhivenpy.client.botclient.BotClient","text":"Class for the specific use of a bot Application on Hiven","title":"BotClient"},{"location":"reference/http.html","text":"HTTP Client \u00b6 openhivenpy.gateway.http.HTTP \u00b6 HTTP-Client for requests and interaction with the Hiven API Attributes \u00b6 loop : Optional [ asyncio . AbstractEventLoop ] property readonly \u00b6 Returns the Asyncio Event-loop ready : Optional [ bool ] property readonly \u00b6 Returns whether the HTTP session is ready session : Optional [ aiohttp . ClientSession ] property readonly \u00b6 Returns the aiohttp ClientSession instance token : Optional [ str ] property readonly \u00b6 Returns the Client Token used for Authorisation Methods \u00b6 __init__ ( self , client , * , host , api_version ) special \u00b6 Parameters: Name Type Description Default client HivenClient The used HivenClient required host str Url for the API which will be used to interact with Hiven. Defaults to the pre-set environment host (api.hiven.io) required api_version str Version string for the API Version. Defaults to the pre-set environment version (defaults to v1) required Source code in openhivenpy\\gateway\\http.py def __init__ ( self , client : HivenClient , * , host : str , api_version : str ): \"\"\" :param client: The used HivenClient :param host: Url for the API which will be used to interact with Hiven. Defaults to the pre-set environment host (api.hiven.io) :param api_version: Version string for the API Version. Defaults to the pre-set environment version (defaults to v1) \"\"\" self . client = client self . host = host self . api_version = api_version self . api_url = URL ( request_url_format . format ( self . host , self . api_version ) ) self . headers = { \"Authorization\" : client . token , \"Host\" : self . host } self . _ready = False self . _session = None # Will be created during start of connection # Current request/Latest request self . _request = None __repr__ ( self ) special \u00b6 Source code in openhivenpy\\gateway\\http.py def __repr__ ( self ) -> str : info = [ ( 'ready' , self . ready ), ( 'host' , self . host ), ( 'api_version' , self . api_version ), ( 'headers' , self . headers ) ] return '<HTTP {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info )) __str__ ( self ) special \u00b6 Source code in openhivenpy\\gateway\\http.py def __str__ ( self ) -> str : return repr ( self ) close ( self ) async \u00b6 Closes the HTTP session that is currently connected to Hiven! Returns: Type Description bool True if it was successful else False Source code in openhivenpy\\gateway\\http.py async def close ( self ) -> bool : \"\"\" Closes the HTTP session that is currently connected to Hiven! :return: True if it was successful else False \"\"\" try : await self . session . close () self . _ready = False return True except Exception as e : utils . log_traceback ( brief = f \"[HTTP] Failed to close HTTP Session:\" , exc_info = sys . exc_info () ) raise RuntimeError ( \"Failed to stop the HTTP client\" ) from e connect ( self ) async \u00b6 Establishes for the HTTP a connection to Hiven Returns: Type Description Optional[aiohttp.ClientSession] The created aiohttp.ClientSession Source code in openhivenpy\\gateway\\http.py async def connect ( self ) -> Optional [ aiohttp . ClientSession ]: \"\"\" Establishes for the HTTP a connection to Hiven :return: The created aiohttp.ClientSession \"\"\" try : trace_config = aiohttp . TraceConfig () trace_config . on_request_start . append ( HTTPTraceback . on_request_start ) trace_config . on_request_end . append ( HTTPTraceback . on_request_end ) trace_config . on_request_exception . append ( HTTPTraceback . on_request_exception ) trace_config . on_request_redirect . append ( HTTPTraceback . on_request_redirect ) trace_config . on_connection_queued_start . append ( HTTPTraceback . on_connection_queued_start ) trace_config . on_response_chunk_received . append ( HTTPTraceback . on_response_chunk_received ) self . _session = aiohttp . ClientSession ( trace_configs = [ trace_config ]) self . _ready = True resp = await self . get ( \"/users/@me\" , timeout = 30 ) resp_json : dict = await resp . json () logger . info ( \"[HTTP] Session was successfully created!\" ) self . client . storage . update_client_user ( resp_json [ 'data' ]) return self . session except Exception as e : utils . log_traceback ( brief = f \"Failed to create HTTP-Session:\" , exc_info = sys . exc_info () ) self . _ready = False await self . session . close () raise SessionCreateError ( f \"Failed to create HTTP-Session\" ) from e delete ( self , endpoint , * , json = None , timeout = 15 , headers = None , retry_on_rate_limit = True , ** kwargs ) async \u00b6 Wrapped HTTP 'DELETE' for a specified endpoint. Parameters: Name Type Description Default endpoint str Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' required json Optional[dict] JSON format data that will be appended to the request None timeout Optional[int] Time the server has time to respond before the connection timeouts. Defaults to 15 15 headers Optional[dict] Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! None kwargs Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. Defaults to True True Returns: Type Description aiohttp.ClientResponse Returns the ClientResponse object if successful and else returns None Exceptions: Type Description HTTPRequestTimeoutError If the set timeout is hit HTTPError If any HTTP Error is hit during processing Source code in openhivenpy\\gateway\\http.py async def delete ( self , endpoint : str , * , json : Optional [ dict ] = None , timeout : Optional [ int ] = 15 , headers : Optional [ dict ] = None , retry_on_rate_limit : bool = True , ** kwargs ) -> aiohttp . ClientResponse : \"\"\" Wrapped HTTP 'DELETE' for a specified endpoint. :param endpoint: Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' :param json: JSON format data that will be appended to the request :param timeout: Time the server has time to respond before the connection timeouts. Defaults to 15 :param headers: Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! :param kwargs: Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info :param retry_on_rate_limit: Should the request retry after a rate_limit was received. Defaults to True :return: Returns the ClientResponse object if successful and else returns `None` :raises HTTPRequestTimeoutError: If the set timeout is hit :raises HTTPError: If any HTTP Error is hit during processing \"\"\" return await self . raw_request ( endpoint , method = \"DELETE\" , json = json , timeout = timeout , headers = headers , retry_on_rate_limit = retry_on_rate_limit , ** kwargs ) get ( self , endpoint , * , json = None , timeout = 15 , headers = None , retry_on_rate_limit = True , ** kwargs ) async \u00b6 Wrapped HTTP 'GET' request for a specified endpoint Parameters: Name Type Description Default endpoint str Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' required json Optional[dict] JSON format data that will be appended to the request None timeout Optional[int] Time the server has time to respond before the connection timeouts. Defaults to 15 15 headers Optional[dict] Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! None kwargs Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. Defaults to True True Returns: Type Description aiohttp.ClientResponse Returns the ClientResponse object if successful and else returns None Exceptions: Type Description HTTPRequestTimeoutError If the set timeout is hit HTTPError If any HTTP Error is hit during processing Source code in openhivenpy\\gateway\\http.py async def get ( self , endpoint : str , * , json : Optional [ dict ] = None , timeout : Optional [ int ] = 15 , headers : Optional [ dict ] = None , retry_on_rate_limit : bool = True , ** kwargs ) -> aiohttp . ClientResponse : \"\"\" Wrapped HTTP 'GET' request for a specified endpoint :param endpoint: Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' :param json: JSON format data that will be appended to the request :param timeout: Time the server has time to respond before the connection timeouts. Defaults to 15 :param headers: Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! :param kwargs: Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info :param retry_on_rate_limit: Should the request retry after a rate_limit was received. Defaults to True :return: Returns the ClientResponse object if successful and else returns `None` :raises HTTPRequestTimeoutError: If the set timeout is hit :raises HTTPError: If any HTTP Error is hit during processing \"\"\" return await self . raw_request ( endpoint , method = \"GET\" , json = json , headers = headers , timeout = timeout , retry_on_rate_limit = retry_on_rate_limit , ** kwargs ) http_request ( self , endpoint , method , json , headers , retry_on_rate_limit , ** kwargs ) async \u00b6 The Function that stores the request and the handling of exceptions! Will be used as a variable so the status of the request can be seen by the asyncio.Task status! Parameters: Name Type Description Default endpoint str Endpoint of the request required method str HTTP method of the request required json dict Additional JSON Data if it exists required headers dict Headers that will be sent! Defaults to the ones that were created during initialisation required kwargs Additional Parameter for the aiohttp HTTP Request {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. required Returns: Type Description Union[aiohttp.ClientResponse, None] Returns the aiohttp.ClientResponse object Exceptions: Type Description HTTPNotFoundError If 404 is returned HTTPRateLimitError If a rate-limit is received (429) and retry_on_rate_limit is False HTTPInternalServerError If 5** is returned HTTPReceivedNoDataError If no data is returned and the code is not 204 (no data) HTTPFailedRequestError If no success object is returned Source code in openhivenpy\\gateway\\http.py async def http_request ( self , endpoint : str , method : str , json : dict , headers : dict , retry_on_rate_limit : bool , ** kwargs ) -> Union [ aiohttp . ClientResponse , None ]: \"\"\" The Function that stores the request and the handling of exceptions! Will be used as a variable so the status of the request can be seen by the asyncio.Task status! :param endpoint: Endpoint of the request :param method: HTTP method of the request :param json: Additional JSON Data if it exists :param headers: Headers that will be sent! Defaults to the ones that were created during initialisation :param kwargs: Additional Parameter for the aiohttp HTTP Request :param retry_on_rate_limit: Should the request retry after a rate_limit was received. :return: Returns the aiohttp.ClientResponse object :raises HTTPNotFoundError: If 404 is returned :raises HTTPRateLimitError: If a rate-limit is received (429) and retry_on_rate_limit is False :raises HTTPInternalServerError: If 5** is returned :raises HTTPReceivedNoDataError: If no data is returned and the code is not 204 (no data) :raises HTTPFailedRequestError: If no success object is returned \"\"\" if not self . _ready : raise HTTPSessionNotReadyError () # Creating a new ClientTimeout Instance which will default to None # since the Timeout was reported to cause errors! Timeouts are # therefore handled in a regular `asyncio.wait_for` _timeout = aiohttp . ClientTimeout ( total = None ) headers = self . headers if headers is None else headers url : False = f \" { self . api_url . human_repr () }{ endpoint } \" while True : async with self . session . request ( method = method , url = url , headers = headers , timeout = _timeout , json = json , ** kwargs ) as _resp : http_resp_code = _resp . status data = await _resp . read () # Raw response data if http_resp_code == 401 or http_resp_code == 403 : raise HTTPForbiddenError ( \"The client was forbidden to execute a certain task \" f \"or function! [Code: { http_resp_code } ]\" ) elif http_resp_code == 404 : raise HTTPNotFoundError () elif http_resp_code == 429 : logger . debug ( f \"[HTTP] { http_resp_code } - \" f \"Received rate-limit! Param 'retry_on_rate_limit' is \" f \" { retry_on_rate_limit } \" ) if retry_on_rate_limit is False : raise HTTPRateLimitError () if data : # \"rate_limit\", { \"expires_at\": \"<unix-timestamp>\"} _json_data = json_decoder . loads ( data ) unix_ts = time . time () retry_after : int = utils . safe_convert ( dtype = int , value = _json_data . get ( \"expires_at\" ), default = 5 ) - unix_ts else : retry_after : int = 5 # min additional 0.1s await asyncio . sleep ( retry_after + 0.1 ) continue elif 400 <= http_resp_code <= 451 : raise HTTPInvalidRequest ( \"The client failed to perform the request due to an \" f \"error! [Code: { http_resp_code } ]\" ) elif http_resp_code >= 500 : raise HTTPInternalServerError ( f \"Failed to perform request due to Hiven internal \" f \"server error [Code: { http_resp_code } ]\" ) if not data : if http_resp_code != 204 : raise HTTPReceivedNoDataError ( \"Received empty response from the Hiven \" \"Servers\" ) try : # Loading the data in json => will fail if not json _json_data = json_decoder . loads ( data ) # empty data except json_decoder . decoder . JSONDecodeError as e : # Success but no data if http_resp_code == 200 : logger . debug ( f \"[HTTP] { http_resp_code } - \" \"Request was successful \" \"(Received no response though success-code)\" ) return _resp else : raise e # Fetching the success item <== bool _success = _json_data . get ( 'success' ) if _success : logger . debug ( f \"[HTTP] { http_resp_code } - \" f \"Request was successful and received expected \" f \"data\" ) return _resp else : # If an error occurred the response body will contain # an error field _error = _json_data . get ( 'error' ) if _error : err_code = _error . get ( 'code' ) err_msg = _error . get ( 'message' ) raise HTTPFailedRequestError ( f \"Failed HTTP request with { http_resp_code } -> \" f \"' { err_code } ': ' { err_msg } '\" ) else : raise HTTPFailedRequestError ( f \"Failed HTTP request with { http_resp_code } -> \" f \"Response: None \" ) options ( self , endpoint , * , json = None , timeout = 15 , headers = None , retry_on_rate_limit = True , ** kwargs ) async \u00b6 Wrapped HTTP 'OPTIONS' for a specified endpoint. Requests permission for performing communication with a URL or server Parameters: Name Type Description Default endpoint str Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' required json Optional[dict] JSON format data that will be appended to the request None timeout Optional[int] Time the server has time to respond before the connection timeouts. Defaults to 15 15 headers Optional[dict] Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! None kwargs Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. Defaults to True True Returns: Type Description aiohttp.ClientResponse Returns the ClientResponse object if successful and else returns None Exceptions: Type Description HTTPRequestTimeoutError If the set timeout is hit HTTPError If any HTTP Error is hit during processing Source code in openhivenpy\\gateway\\http.py async def options ( self , endpoint : str , * , json : Optional [ dict ] = None , timeout : Optional [ int ] = 15 , headers : Optional [ dict ] = None , retry_on_rate_limit : bool = True , ** kwargs ) -> aiohttp . ClientResponse : \"\"\" Wrapped HTTP 'OPTIONS' for a specified endpoint. Requests permission for performing communication with a URL or server :param endpoint: Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' :param json: JSON format data that will be appended to the request :param timeout: Time the server has time to respond before the connection timeouts. Defaults to 15 :param headers: Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! :param kwargs: Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info :param retry_on_rate_limit: Should the request retry after a rate_limit was received. Defaults to True :return: Returns the ClientResponse object if successful and else returns `None` :raises HTTPRequestTimeoutError: If the set timeout is hit :raises HTTPError: If any HTTP Error is hit during processing \"\"\" return await self . raw_request ( endpoint , method = \"OPTIONS\" , json = json , headers = headers , timeout = timeout , retry_on_rate_limit = retry_on_rate_limit , ** kwargs ) patch ( self , endpoint , * , json = None , timeout = 15 , headers = None , retry_on_rate_limit = True , ** kwargs ) async \u00b6 Wrapped HTTP 'PATCH' for a specified endpoint. Parameters: Name Type Description Default endpoint str Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' required json Optional[dict] JSON format data that will be appended to the request None timeout Optional[int] Time the server has time to respond before the connection timeouts. Defaults to 15 15 headers Optional[dict] Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! None kwargs Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. Defaults to True True Returns: Type Description aiohttp.ClientResponse Returns the ClientResponse object if successful and else returns None Exceptions: Type Description HTTPRequestTimeoutError If the set timeout is hit HTTPError If any HTTP Error is hit during processing Source code in openhivenpy\\gateway\\http.py async def patch ( self , endpoint : str , * , json : Optional [ dict ] = None , timeout : Optional [ int ] = 15 , headers : Optional [ dict ] = None , retry_on_rate_limit : bool = True , ** kwargs ) -> aiohttp . ClientResponse : \"\"\" Wrapped HTTP 'PATCH' for a specified endpoint. :param endpoint: Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' :param json: JSON format data that will be appended to the request :param timeout: Time the server has time to respond before the connection timeouts. Defaults to 15 :param headers: Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! :param kwargs: Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info :param retry_on_rate_limit: Should the request retry after a rate_limit was received. Defaults to True :return: Returns the ClientResponse object if successful and else returns `None` :raises HTTPRequestTimeoutError: If the set timeout is hit :raises HTTPError: If any HTTP Error is hit during processing \"\"\" # If no custom headers were passed a new one will be created and used if headers is None : # Creating a duplicate header of the default one headers = dict ( self . headers ) # Requires the Content-Type to be specified since else it cannot # recognise the json-data in the body! headers [ 'Content-Type' ] = 'application/json' return await self . raw_request ( endpoint , method = \"PATCH\" , json = json , headers = headers , timeout = timeout , retry_on_rate_limit = retry_on_rate_limit , ** kwargs ) post ( self , endpoint , * , json = None , timeout = 15 , headers = None , retry_on_rate_limit = True , ** kwargs ) async \u00b6 Wrapped HTTP 'POST' for a specified endpoint. Parameters: Name Type Description Default endpoint str Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' required json Optional[dict] JSON format data that will be appended to the request None timeout Optional[int] Time the server has time to respond before the connection timeouts. Defaults to 15 15 headers Optional[dict] Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! None kwargs Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. Defaults to True True Returns: Type Description aiohttp.ClientResponse Returns the ClientResponse object if successful and else returns None Exceptions: Type Description HTTPRequestTimeoutError If the set timeout is hit HTTPError If any HTTP Error is hit during processing Source code in openhivenpy\\gateway\\http.py async def post ( self , endpoint : str , * , json : Optional [ dict ] = None , timeout : Optional [ int ] = 15 , headers : Optional [ dict ] = None , retry_on_rate_limit : bool = True , ** kwargs ) -> aiohttp . ClientResponse : \"\"\" Wrapped HTTP 'POST' for a specified endpoint. :param endpoint: Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' :param json: JSON format data that will be appended to the request :param timeout: Time the server has time to respond before the connection timeouts. Defaults to 15 :param headers: Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! :param kwargs: Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info :param retry_on_rate_limit: Should the request retry after a rate_limit was received. Defaults to True :return: Returns the ClientResponse object if successful and else returns `None` :raises HTTPRequestTimeoutError: If the set timeout is hit :raises HTTPError: If any HTTP Error is hit during processing \"\"\" # If no custom headers were passed a new one will be created and used if headers is None : # Creating a duplicate header of the default one headers = dict ( self . headers ) # Requires the Content-Type to be specified since else it cannot # recognise the json-data in the body! headers [ 'Content-Type' ] = 'application/json' return await self . raw_request ( endpoint , method = \"POST\" , json = json , headers = headers , timeout = timeout , retry_on_rate_limit = retry_on_rate_limit , ** kwargs ) put ( self , endpoint , * , json = None , timeout = 15 , headers = None , retry_on_rate_limit = True , ** kwargs ) async \u00b6 Wrapped HTTP 'PUT' for a specified endpoint. Similar to post, but multiple requests do not affect performance Parameters: Name Type Description Default endpoint str Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' required json Optional[dict] JSON format data that will be appended to the request None timeout Optional[int] Time the server has time to respond before the connection timeouts. Defaults to 15 15 headers Optional[dict] Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! None kwargs Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. Defaults to True True Returns: Type Description aiohttp.ClientResponse Returns the ClientResponse object if successful and else returns None Exceptions: Type Description HTTPRequestTimeoutError If the set timeout is hit HTTPError If any HTTP Error is hit during processing Source code in openhivenpy\\gateway\\http.py async def put ( self , endpoint : str , * , json : Optional [ dict ] = None , timeout : Optional [ int ] = 15 , headers : Optional [ dict ] = None , retry_on_rate_limit : bool = True , ** kwargs ) -> aiohttp . ClientResponse : \"\"\" Wrapped HTTP 'PUT' for a specified endpoint. Similar to post, but multiple requests do not affect performance :param endpoint: Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' :param json: JSON format data that will be appended to the request :param timeout: Time the server has time to respond before the connection timeouts. Defaults to 15 :param headers: Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! :param kwargs: Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info :param retry_on_rate_limit: Should the request retry after a rate_limit was received. Defaults to True :return: Returns the ClientResponse object if successful and else returns `None` :raises HTTPRequestTimeoutError: If the set timeout is hit :raises HTTPError: If any HTTP Error is hit during processing \"\"\" # If no custom headers were passed a new one will be created and used if headers is None : # Creating a duplicate header of the default one headers = dict ( self . headers ) # Requires the Content-Type to be specified since else it cannot # recognise the json-data in the body! headers [ 'Content-Type' ] = 'application/json' return await self . raw_request ( endpoint , method = \"PUT\" , json = json , timeout = timeout , headers = headers , # Passing the new header for the request retry_on_rate_limit = retry_on_rate_limit , ** kwargs ) raw_request ( self , endpoint , * , method = 'GET' , json = None , timeout = 15 , headers = None , retry_on_rate_limit = True , ** kwargs ) async \u00b6 Wrapped HTTP request for a specified endpoint. Parameters: Name Type Description Default endpoint str Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' required json Optional[dict] JSON format data that will be appended to the request None timeout Optional[int] Time the server has time to respond before the connection timeouts. Defaults to 15 15 method Optional[str] HTTP Method that should be used to perform the request 'GET' headers Optional[dict] Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! None kwargs Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. Defaults to True True Returns: Type Description Union[aiohttp.ClientResponse, None] Returns the aiohttp.ClientResponse object Exceptions: Type Description HTTPRequestTimeoutError If the set timeout is hit HTTPError If any HTTP Error is hit during processing Source code in openhivenpy\\gateway\\http.py async def raw_request ( self , endpoint : str , * , method : Optional [ str ] = \"GET\" , json : Optional [ dict ] = None , timeout : Optional [ int ] = 15 , headers : Optional [ dict ] = None , # Defaults to an empty header, retry_on_rate_limit : bool = True , ** kwargs ) -> Union [ aiohttp . ClientResponse , None ]: \"\"\" Wrapped HTTP request for a specified endpoint. :param endpoint: Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' :param json: JSON format data that will be appended to the request :param timeout: Time the server has time to respond before the connection timeouts. Defaults to 15 :param method: HTTP Method that should be used to perform the request :param headers: Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! :param kwargs: Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info :param retry_on_rate_limit: Should the request retry after a rate_limit was received. Defaults to True :return: Returns the aiohttp.ClientResponse object :raises HTTPRequestTimeoutError: If the set timeout is hit :raises HTTPError: If any HTTP Error is hit during processing \"\"\" try : http_client_response = await asyncio . wait_for ( self . http_request ( endpoint , method , json , headers , retry_on_rate_limit , ** kwargs ), timeout = timeout ) except asyncio . CancelledError : logger . warning ( f \"[HTTP] >> Request ' { method . upper () } ' for endpoint \" f \"' { endpoint } ' was cancelled!\" ) return except asyncio . TimeoutError : raise HTTPRequestTimeoutError () except Exception as e : utils . log_traceback ( brief = f \"HTTP ' { method . upper () } ' failed with endpoint: \" f \" { self . host }{ endpoint } :\" , exc_info = sys . exc_info () ) raise e # Returning the response instance return http_client_response","title":"HTTP Client"},{"location":"reference/http.html#http-client","text":"","title":"HTTP Client"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP","text":"HTTP-Client for requests and interaction with the Hiven API","title":"HTTP"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP-attributes","text":"","title":"Attributes"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.loop","text":"Returns the Asyncio Event-loop","title":"loop"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.ready","text":"Returns whether the HTTP session is ready","title":"ready"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.session","text":"Returns the aiohttp ClientSession instance","title":"session"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.token","text":"Returns the Client Token used for Authorisation","title":"token"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP-methods","text":"","title":"Methods"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.__init__","text":"Parameters: Name Type Description Default client HivenClient The used HivenClient required host str Url for the API which will be used to interact with Hiven. Defaults to the pre-set environment host (api.hiven.io) required api_version str Version string for the API Version. Defaults to the pre-set environment version (defaults to v1) required Source code in openhivenpy\\gateway\\http.py def __init__ ( self , client : HivenClient , * , host : str , api_version : str ): \"\"\" :param client: The used HivenClient :param host: Url for the API which will be used to interact with Hiven. Defaults to the pre-set environment host (api.hiven.io) :param api_version: Version string for the API Version. Defaults to the pre-set environment version (defaults to v1) \"\"\" self . client = client self . host = host self . api_version = api_version self . api_url = URL ( request_url_format . format ( self . host , self . api_version ) ) self . headers = { \"Authorization\" : client . token , \"Host\" : self . host } self . _ready = False self . _session = None # Will be created during start of connection # Current request/Latest request self . _request = None","title":"__init__()"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__","text":"Source code in openhivenpy\\gateway\\http.py def __repr__ ( self ) -> str : info = [ ( 'ready' , self . ready ), ( 'host' , self . host ), ( 'api_version' , self . api_version ), ( 'headers' , self . headers ) ] return '<HTTP {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ))","title":"__repr__()"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.__str__","text":"Source code in openhivenpy\\gateway\\http.py def __str__ ( self ) -> str : return repr ( self )","title":"__str__()"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.close","text":"Closes the HTTP session that is currently connected to Hiven! Returns: Type Description bool True if it was successful else False Source code in openhivenpy\\gateway\\http.py async def close ( self ) -> bool : \"\"\" Closes the HTTP session that is currently connected to Hiven! :return: True if it was successful else False \"\"\" try : await self . session . close () self . _ready = False return True except Exception as e : utils . log_traceback ( brief = f \"[HTTP] Failed to close HTTP Session:\" , exc_info = sys . exc_info () ) raise RuntimeError ( \"Failed to stop the HTTP client\" ) from e","title":"close()"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.connect","text":"Establishes for the HTTP a connection to Hiven Returns: Type Description Optional[aiohttp.ClientSession] The created aiohttp.ClientSession Source code in openhivenpy\\gateway\\http.py async def connect ( self ) -> Optional [ aiohttp . ClientSession ]: \"\"\" Establishes for the HTTP a connection to Hiven :return: The created aiohttp.ClientSession \"\"\" try : trace_config = aiohttp . TraceConfig () trace_config . on_request_start . append ( HTTPTraceback . on_request_start ) trace_config . on_request_end . append ( HTTPTraceback . on_request_end ) trace_config . on_request_exception . append ( HTTPTraceback . on_request_exception ) trace_config . on_request_redirect . append ( HTTPTraceback . on_request_redirect ) trace_config . on_connection_queued_start . append ( HTTPTraceback . on_connection_queued_start ) trace_config . on_response_chunk_received . append ( HTTPTraceback . on_response_chunk_received ) self . _session = aiohttp . ClientSession ( trace_configs = [ trace_config ]) self . _ready = True resp = await self . get ( \"/users/@me\" , timeout = 30 ) resp_json : dict = await resp . json () logger . info ( \"[HTTP] Session was successfully created!\" ) self . client . storage . update_client_user ( resp_json [ 'data' ]) return self . session except Exception as e : utils . log_traceback ( brief = f \"Failed to create HTTP-Session:\" , exc_info = sys . exc_info () ) self . _ready = False await self . session . close () raise SessionCreateError ( f \"Failed to create HTTP-Session\" ) from e","title":"connect()"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.delete","text":"Wrapped HTTP 'DELETE' for a specified endpoint. Parameters: Name Type Description Default endpoint str Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' required json Optional[dict] JSON format data that will be appended to the request None timeout Optional[int] Time the server has time to respond before the connection timeouts. Defaults to 15 15 headers Optional[dict] Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! None kwargs Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. Defaults to True True Returns: Type Description aiohttp.ClientResponse Returns the ClientResponse object if successful and else returns None Exceptions: Type Description HTTPRequestTimeoutError If the set timeout is hit HTTPError If any HTTP Error is hit during processing Source code in openhivenpy\\gateway\\http.py async def delete ( self , endpoint : str , * , json : Optional [ dict ] = None , timeout : Optional [ int ] = 15 , headers : Optional [ dict ] = None , retry_on_rate_limit : bool = True , ** kwargs ) -> aiohttp . ClientResponse : \"\"\" Wrapped HTTP 'DELETE' for a specified endpoint. :param endpoint: Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' :param json: JSON format data that will be appended to the request :param timeout: Time the server has time to respond before the connection timeouts. Defaults to 15 :param headers: Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! :param kwargs: Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info :param retry_on_rate_limit: Should the request retry after a rate_limit was received. Defaults to True :return: Returns the ClientResponse object if successful and else returns `None` :raises HTTPRequestTimeoutError: If the set timeout is hit :raises HTTPError: If any HTTP Error is hit during processing \"\"\" return await self . raw_request ( endpoint , method = \"DELETE\" , json = json , timeout = timeout , headers = headers , retry_on_rate_limit = retry_on_rate_limit , ** kwargs )","title":"delete()"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.get","text":"Wrapped HTTP 'GET' request for a specified endpoint Parameters: Name Type Description Default endpoint str Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' required json Optional[dict] JSON format data that will be appended to the request None timeout Optional[int] Time the server has time to respond before the connection timeouts. Defaults to 15 15 headers Optional[dict] Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! None kwargs Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. Defaults to True True Returns: Type Description aiohttp.ClientResponse Returns the ClientResponse object if successful and else returns None Exceptions: Type Description HTTPRequestTimeoutError If the set timeout is hit HTTPError If any HTTP Error is hit during processing Source code in openhivenpy\\gateway\\http.py async def get ( self , endpoint : str , * , json : Optional [ dict ] = None , timeout : Optional [ int ] = 15 , headers : Optional [ dict ] = None , retry_on_rate_limit : bool = True , ** kwargs ) -> aiohttp . ClientResponse : \"\"\" Wrapped HTTP 'GET' request for a specified endpoint :param endpoint: Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' :param json: JSON format data that will be appended to the request :param timeout: Time the server has time to respond before the connection timeouts. Defaults to 15 :param headers: Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! :param kwargs: Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info :param retry_on_rate_limit: Should the request retry after a rate_limit was received. Defaults to True :return: Returns the ClientResponse object if successful and else returns `None` :raises HTTPRequestTimeoutError: If the set timeout is hit :raises HTTPError: If any HTTP Error is hit during processing \"\"\" return await self . raw_request ( endpoint , method = \"GET\" , json = json , headers = headers , timeout = timeout , retry_on_rate_limit = retry_on_rate_limit , ** kwargs )","title":"get()"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.http_request","text":"The Function that stores the request and the handling of exceptions! Will be used as a variable so the status of the request can be seen by the asyncio.Task status! Parameters: Name Type Description Default endpoint str Endpoint of the request required method str HTTP method of the request required json dict Additional JSON Data if it exists required headers dict Headers that will be sent! Defaults to the ones that were created during initialisation required kwargs Additional Parameter for the aiohttp HTTP Request {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. required Returns: Type Description Union[aiohttp.ClientResponse, None] Returns the aiohttp.ClientResponse object Exceptions: Type Description HTTPNotFoundError If 404 is returned HTTPRateLimitError If a rate-limit is received (429) and retry_on_rate_limit is False HTTPInternalServerError If 5** is returned HTTPReceivedNoDataError If no data is returned and the code is not 204 (no data) HTTPFailedRequestError If no success object is returned Source code in openhivenpy\\gateway\\http.py async def http_request ( self , endpoint : str , method : str , json : dict , headers : dict , retry_on_rate_limit : bool , ** kwargs ) -> Union [ aiohttp . ClientResponse , None ]: \"\"\" The Function that stores the request and the handling of exceptions! Will be used as a variable so the status of the request can be seen by the asyncio.Task status! :param endpoint: Endpoint of the request :param method: HTTP method of the request :param json: Additional JSON Data if it exists :param headers: Headers that will be sent! Defaults to the ones that were created during initialisation :param kwargs: Additional Parameter for the aiohttp HTTP Request :param retry_on_rate_limit: Should the request retry after a rate_limit was received. :return: Returns the aiohttp.ClientResponse object :raises HTTPNotFoundError: If 404 is returned :raises HTTPRateLimitError: If a rate-limit is received (429) and retry_on_rate_limit is False :raises HTTPInternalServerError: If 5** is returned :raises HTTPReceivedNoDataError: If no data is returned and the code is not 204 (no data) :raises HTTPFailedRequestError: If no success object is returned \"\"\" if not self . _ready : raise HTTPSessionNotReadyError () # Creating a new ClientTimeout Instance which will default to None # since the Timeout was reported to cause errors! Timeouts are # therefore handled in a regular `asyncio.wait_for` _timeout = aiohttp . ClientTimeout ( total = None ) headers = self . headers if headers is None else headers url : False = f \" { self . api_url . human_repr () }{ endpoint } \" while True : async with self . session . request ( method = method , url = url , headers = headers , timeout = _timeout , json = json , ** kwargs ) as _resp : http_resp_code = _resp . status data = await _resp . read () # Raw response data if http_resp_code == 401 or http_resp_code == 403 : raise HTTPForbiddenError ( \"The client was forbidden to execute a certain task \" f \"or function! [Code: { http_resp_code } ]\" ) elif http_resp_code == 404 : raise HTTPNotFoundError () elif http_resp_code == 429 : logger . debug ( f \"[HTTP] { http_resp_code } - \" f \"Received rate-limit! Param 'retry_on_rate_limit' is \" f \" { retry_on_rate_limit } \" ) if retry_on_rate_limit is False : raise HTTPRateLimitError () if data : # \"rate_limit\", { \"expires_at\": \"<unix-timestamp>\"} _json_data = json_decoder . loads ( data ) unix_ts = time . time () retry_after : int = utils . safe_convert ( dtype = int , value = _json_data . get ( \"expires_at\" ), default = 5 ) - unix_ts else : retry_after : int = 5 # min additional 0.1s await asyncio . sleep ( retry_after + 0.1 ) continue elif 400 <= http_resp_code <= 451 : raise HTTPInvalidRequest ( \"The client failed to perform the request due to an \" f \"error! [Code: { http_resp_code } ]\" ) elif http_resp_code >= 500 : raise HTTPInternalServerError ( f \"Failed to perform request due to Hiven internal \" f \"server error [Code: { http_resp_code } ]\" ) if not data : if http_resp_code != 204 : raise HTTPReceivedNoDataError ( \"Received empty response from the Hiven \" \"Servers\" ) try : # Loading the data in json => will fail if not json _json_data = json_decoder . loads ( data ) # empty data except json_decoder . decoder . JSONDecodeError as e : # Success but no data if http_resp_code == 200 : logger . debug ( f \"[HTTP] { http_resp_code } - \" \"Request was successful \" \"(Received no response though success-code)\" ) return _resp else : raise e # Fetching the success item <== bool _success = _json_data . get ( 'success' ) if _success : logger . debug ( f \"[HTTP] { http_resp_code } - \" f \"Request was successful and received expected \" f \"data\" ) return _resp else : # If an error occurred the response body will contain # an error field _error = _json_data . get ( 'error' ) if _error : err_code = _error . get ( 'code' ) err_msg = _error . get ( 'message' ) raise HTTPFailedRequestError ( f \"Failed HTTP request with { http_resp_code } -> \" f \"' { err_code } ': ' { err_msg } '\" ) else : raise HTTPFailedRequestError ( f \"Failed HTTP request with { http_resp_code } -> \" f \"Response: None \" )","title":"http_request()"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.options","text":"Wrapped HTTP 'OPTIONS' for a specified endpoint. Requests permission for performing communication with a URL or server Parameters: Name Type Description Default endpoint str Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' required json Optional[dict] JSON format data that will be appended to the request None timeout Optional[int] Time the server has time to respond before the connection timeouts. Defaults to 15 15 headers Optional[dict] Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! None kwargs Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. Defaults to True True Returns: Type Description aiohttp.ClientResponse Returns the ClientResponse object if successful and else returns None Exceptions: Type Description HTTPRequestTimeoutError If the set timeout is hit HTTPError If any HTTP Error is hit during processing Source code in openhivenpy\\gateway\\http.py async def options ( self , endpoint : str , * , json : Optional [ dict ] = None , timeout : Optional [ int ] = 15 , headers : Optional [ dict ] = None , retry_on_rate_limit : bool = True , ** kwargs ) -> aiohttp . ClientResponse : \"\"\" Wrapped HTTP 'OPTIONS' for a specified endpoint. Requests permission for performing communication with a URL or server :param endpoint: Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' :param json: JSON format data that will be appended to the request :param timeout: Time the server has time to respond before the connection timeouts. Defaults to 15 :param headers: Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! :param kwargs: Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info :param retry_on_rate_limit: Should the request retry after a rate_limit was received. Defaults to True :return: Returns the ClientResponse object if successful and else returns `None` :raises HTTPRequestTimeoutError: If the set timeout is hit :raises HTTPError: If any HTTP Error is hit during processing \"\"\" return await self . raw_request ( endpoint , method = \"OPTIONS\" , json = json , headers = headers , timeout = timeout , retry_on_rate_limit = retry_on_rate_limit , ** kwargs )","title":"options()"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.patch","text":"Wrapped HTTP 'PATCH' for a specified endpoint. Parameters: Name Type Description Default endpoint str Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' required json Optional[dict] JSON format data that will be appended to the request None timeout Optional[int] Time the server has time to respond before the connection timeouts. Defaults to 15 15 headers Optional[dict] Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! None kwargs Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. Defaults to True True Returns: Type Description aiohttp.ClientResponse Returns the ClientResponse object if successful and else returns None Exceptions: Type Description HTTPRequestTimeoutError If the set timeout is hit HTTPError If any HTTP Error is hit during processing Source code in openhivenpy\\gateway\\http.py async def patch ( self , endpoint : str , * , json : Optional [ dict ] = None , timeout : Optional [ int ] = 15 , headers : Optional [ dict ] = None , retry_on_rate_limit : bool = True , ** kwargs ) -> aiohttp . ClientResponse : \"\"\" Wrapped HTTP 'PATCH' for a specified endpoint. :param endpoint: Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' :param json: JSON format data that will be appended to the request :param timeout: Time the server has time to respond before the connection timeouts. Defaults to 15 :param headers: Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! :param kwargs: Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info :param retry_on_rate_limit: Should the request retry after a rate_limit was received. Defaults to True :return: Returns the ClientResponse object if successful and else returns `None` :raises HTTPRequestTimeoutError: If the set timeout is hit :raises HTTPError: If any HTTP Error is hit during processing \"\"\" # If no custom headers were passed a new one will be created and used if headers is None : # Creating a duplicate header of the default one headers = dict ( self . headers ) # Requires the Content-Type to be specified since else it cannot # recognise the json-data in the body! headers [ 'Content-Type' ] = 'application/json' return await self . raw_request ( endpoint , method = \"PATCH\" , json = json , headers = headers , timeout = timeout , retry_on_rate_limit = retry_on_rate_limit , ** kwargs )","title":"patch()"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.post","text":"Wrapped HTTP 'POST' for a specified endpoint. Parameters: Name Type Description Default endpoint str Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' required json Optional[dict] JSON format data that will be appended to the request None timeout Optional[int] Time the server has time to respond before the connection timeouts. Defaults to 15 15 headers Optional[dict] Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! None kwargs Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. Defaults to True True Returns: Type Description aiohttp.ClientResponse Returns the ClientResponse object if successful and else returns None Exceptions: Type Description HTTPRequestTimeoutError If the set timeout is hit HTTPError If any HTTP Error is hit during processing Source code in openhivenpy\\gateway\\http.py async def post ( self , endpoint : str , * , json : Optional [ dict ] = None , timeout : Optional [ int ] = 15 , headers : Optional [ dict ] = None , retry_on_rate_limit : bool = True , ** kwargs ) -> aiohttp . ClientResponse : \"\"\" Wrapped HTTP 'POST' for a specified endpoint. :param endpoint: Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' :param json: JSON format data that will be appended to the request :param timeout: Time the server has time to respond before the connection timeouts. Defaults to 15 :param headers: Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! :param kwargs: Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info :param retry_on_rate_limit: Should the request retry after a rate_limit was received. Defaults to True :return: Returns the ClientResponse object if successful and else returns `None` :raises HTTPRequestTimeoutError: If the set timeout is hit :raises HTTPError: If any HTTP Error is hit during processing \"\"\" # If no custom headers were passed a new one will be created and used if headers is None : # Creating a duplicate header of the default one headers = dict ( self . headers ) # Requires the Content-Type to be specified since else it cannot # recognise the json-data in the body! headers [ 'Content-Type' ] = 'application/json' return await self . raw_request ( endpoint , method = \"POST\" , json = json , headers = headers , timeout = timeout , retry_on_rate_limit = retry_on_rate_limit , ** kwargs )","title":"post()"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.put","text":"Wrapped HTTP 'PUT' for a specified endpoint. Similar to post, but multiple requests do not affect performance Parameters: Name Type Description Default endpoint str Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' required json Optional[dict] JSON format data that will be appended to the request None timeout Optional[int] Time the server has time to respond before the connection timeouts. Defaults to 15 15 headers Optional[dict] Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! None kwargs Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. Defaults to True True Returns: Type Description aiohttp.ClientResponse Returns the ClientResponse object if successful and else returns None Exceptions: Type Description HTTPRequestTimeoutError If the set timeout is hit HTTPError If any HTTP Error is hit during processing Source code in openhivenpy\\gateway\\http.py async def put ( self , endpoint : str , * , json : Optional [ dict ] = None , timeout : Optional [ int ] = 15 , headers : Optional [ dict ] = None , retry_on_rate_limit : bool = True , ** kwargs ) -> aiohttp . ClientResponse : \"\"\" Wrapped HTTP 'PUT' for a specified endpoint. Similar to post, but multiple requests do not affect performance :param endpoint: Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' :param json: JSON format data that will be appended to the request :param timeout: Time the server has time to respond before the connection timeouts. Defaults to 15 :param headers: Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! :param kwargs: Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info :param retry_on_rate_limit: Should the request retry after a rate_limit was received. Defaults to True :return: Returns the ClientResponse object if successful and else returns `None` :raises HTTPRequestTimeoutError: If the set timeout is hit :raises HTTPError: If any HTTP Error is hit during processing \"\"\" # If no custom headers were passed a new one will be created and used if headers is None : # Creating a duplicate header of the default one headers = dict ( self . headers ) # Requires the Content-Type to be specified since else it cannot # recognise the json-data in the body! headers [ 'Content-Type' ] = 'application/json' return await self . raw_request ( endpoint , method = \"PUT\" , json = json , timeout = timeout , headers = headers , # Passing the new header for the request retry_on_rate_limit = retry_on_rate_limit , ** kwargs )","title":"put()"},{"location":"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request","text":"Wrapped HTTP request for a specified endpoint. Parameters: Name Type Description Default endpoint str Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' required json Optional[dict] JSON format data that will be appended to the request None timeout Optional[int] Time the server has time to respond before the connection timeouts. Defaults to 15 15 method Optional[str] HTTP Method that should be used to perform the request 'GET' headers Optional[dict] Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! None kwargs Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info {} retry_on_rate_limit bool Should the request retry after a rate_limit was received. Defaults to True True Returns: Type Description Union[aiohttp.ClientResponse, None] Returns the aiohttp.ClientResponse object Exceptions: Type Description HTTPRequestTimeoutError If the set timeout is hit HTTPError If any HTTP Error is hit during processing Source code in openhivenpy\\gateway\\http.py async def raw_request ( self , endpoint : str , * , method : Optional [ str ] = \"GET\" , json : Optional [ dict ] = None , timeout : Optional [ int ] = 15 , headers : Optional [ dict ] = None , # Defaults to an empty header, retry_on_rate_limit : bool = True , ** kwargs ) -> Union [ aiohttp . ClientResponse , None ]: \"\"\" Wrapped HTTP request for a specified endpoint. :param endpoint: Url place in url format '/../../..' Will be appended to the standard url: 'https://api.hiven.io/{version}' :param json: JSON format data that will be appended to the request :param timeout: Time the server has time to respond before the connection timeouts. Defaults to 15 :param method: HTTP Method that should be used to perform the request :param headers: Defaults to the normal headers. Note: Changing content type can make the request break. Use with caution! :param kwargs: Other parameter for requesting. See https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession for more info :param retry_on_rate_limit: Should the request retry after a rate_limit was received. Defaults to True :return: Returns the aiohttp.ClientResponse object :raises HTTPRequestTimeoutError: If the set timeout is hit :raises HTTPError: If any HTTP Error is hit during processing \"\"\" try : http_client_response = await asyncio . wait_for ( self . http_request ( endpoint , method , json , headers , retry_on_rate_limit , ** kwargs ), timeout = timeout ) except asyncio . CancelledError : logger . warning ( f \"[HTTP] >> Request ' { method . upper () } ' for endpoint \" f \"' { endpoint } ' was cancelled!\" ) return except asyncio . TimeoutError : raise HTTPRequestTimeoutError () except Exception as e : utils . log_traceback ( brief = f \"HTTP ' { method . upper () } ' failed with endpoint: \" f \" { self . host }{ endpoint } :\" , exc_info = sys . exc_info () ) raise e # Returning the response instance return http_client_response","title":"raw_request()"},{"location":"reference/types.html","text":"Hiven Types \u00b6 Important Note that each type has a property that is cached ! Meaning when you access one, it is stored forever without any changes (deletions or updates) being applied to it. For example: When you access the rooms property of the House class and use it for a longer time and in the meantime one of them gets deleted. The library will be unable to correctly delete it, since it's now stored by the user themselves. Therefore watch out for the proper existance! In the next releases a property exists() will be added to validate the existance of objects to not possibly use an outdated one! List of represented Types \u00b6 List of Type Description Attachment Represents a Hiven message attachment containing a file Context Represents a Command Context for a triggered command that was registered prior Embed Represents an embed message object either customised or from a website Entity Represents a Hiven Entity inside a House which can contain Rooms Feed Represents the feed that is displayed on Hiven specifically for the user House Represents a Hiven House which can contain rooms and entities LazyHouse Represents a Hiven House which can contain rooms and entities (Lazy) Invite Represents an Invite to a Hiven House Member Represents a House Member on Hiven which contains the Hiven User, role-data and member-data Mention Represents an mention for a user in Hiven DeletedMessage Represents a Deleted Message in a Room Message Represents a standard Hiven message sent by a user PrivateRoom Represents a private chat room with only one user PrivateGroupRoom Represents a private group chat room with multiple users Relationship Represents a user-relationship with another user or bot TextRoom Represents a Hiven Room inside a House User Represents the standard Hiven User LazyUser Represents the standard Hiven User (Lazy) UserTyping Represents a Hiven User typing in a room openhivenpy.types.attachment.Attachment \u00b6 Represents a Hiven Message Attachment containing a file Attributes \u00b6 filename : str property readonly \u00b6 Name of the file media_url : str property readonly \u00b6 Media-url to access the file raw : dict property readonly \u00b6 The raw data dictionary received over the Swarm Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Represents a Hiven Message Attachment containing a file Parameters: Name Type Description Default data dict Data that should be used to create the object required client HivenClient The HivenClient required Source code in openhivenpy\\types\\attachment.py @log_type_exception ( 'Attachment' ) def __init__ ( self , data : dict , client : HivenClient ): \"\"\" Represents a Hiven Message Attachment containing a file :param data: Data that should be used to create the object :param client: The HivenClient \"\"\" super () . __init__ () self . _filename = data . get ( 'filename' ) self . _media_url = data . get ( 'media_url' ) self . _raw = data . get ( 'raw' ) self . _client = client format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it iis missing that would be required for the creation of an instance. Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\attachment.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it iis missing that would be required for the creation of an instance. :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data [ 'raw' ] = { ** data . pop ( 'raw' , {}), ** data } return cls . validate ( data ) json_validator ( data ) \u00b6 openhivenpy.types.context.Context \u00b6 Represents a Command Context for a triggered command that was registered prior Attributes \u00b6 author : Optional [ User ] property readonly \u00b6 Author object of the Context Class author_id : Optional [ str ] property readonly \u00b6 ID of the author house : Optional [ House ] property readonly \u00b6 House object of the Context Class house_id : Optional [ str ] property readonly \u00b6 ID of the room room : Optional [ TextRoom ] property readonly \u00b6 Room object of the Context Class room_id : Optional [ str ] property readonly \u00b6 ID of the room timestamp : Optional [ datetime . datetime ] property readonly \u00b6 Time-stamp of the message - when the command was received Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Represents a Command Context for a triggered command that was registered prior Parameters: Name Type Description Default data dict Data that should be used to create the object required client HivenClient The HivenClient required Source code in openhivenpy\\types\\context.py @log_type_exception ( 'Context' ) def __init__ ( self , data : dict , client : HivenClient ): \"\"\" Represents a Command Context for a triggered command that was registered prior :param data: Data that should be used to create the object :param client: The HivenClient \"\"\" super () . __init__ () self . _room = data . get ( 'room' ) self . _room_id = data . get ( 'room_id' ) self . _author = data . get ( 'author' ) self . _author_id = data . get ( 'author_id' ) self . _house = data . get ( 'house' ) self . _house_id = data . get ( 'house_id' ) self . _timestamp = data . get ( 'timestamp' ) self . _client = client format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\context.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = cls . validate ( data ) data [ 'timestamp' ] = utils . safe_convert ( int , data . get ( 'timestamp' )) if not data . get ( 'room_id' ) and data . get ( 'room' ): room = data . pop ( 'room' ) if type ( room ) is dict : room = room . get ( 'id' , None ) elif isinstance ( room , DataClassObject ): room = getattr ( room , 'id' , None ) else : room = None if room is None : raise InvalidPassedDataError ( \"The passed room is not in the correct format!\" , data = data ) else : data [ 'room_id' ] = room if not data . get ( 'house_id' ) and data . get ( 'house' ): house = data . pop ( 'house' ) if type ( house ) is dict : house = house . get ( 'id' , None ) elif isinstance ( house , DataClassObject ): house = getattr ( house , 'id' , None ) else : house = None if house is None : raise InvalidPassedDataError ( \"The passed house is not in the correct format!\" , data = data ) else : data [ 'house_id' ] = house if not data . get ( 'author_id' ) and data . get ( 'author' ): author = data . pop ( 'author' ) if type ( author ) is dict : author = author . get ( 'id' , None ) elif isinstance ( author , DataClassObject ): author = getattr ( author , 'id' , None ) else : author = None if author is None : raise InvalidPassedDataError ( \"The passed author is not in the correct format!\" , data = data ) else : data [ 'author_id' ] = author data [ 'room' ] = data [ 'room_id' ] data [ 'author' ] = data [ 'author_id' ] data [ 'house' ] = data [ 'house_id' ] return data json_validator ( data ) \u00b6 openhivenpy.types.embed.Embed \u00b6 Represents an embed message object. This can represent an either customised embed or fetched embed from a website Attributes \u00b6 description : Optional [ str ] property readonly \u00b6 The description of the embed, if it has one image : Optional [ str ] property readonly \u00b6 The URL to the image of the embed title : Optional [ str ] property readonly \u00b6 The title of the embed type : Optional [ int ] property readonly \u00b6 The type of the Embed url : Optional [ str ] property readonly \u00b6 The URL of the embed, if it's a web embed Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Represents an embed message object either customised or from a website Parameters: Name Type Description Default data dict Data that should be used to create the object required client HivenClient The HivenClient required Source code in openhivenpy\\types\\embed.py @log_type_exception ( 'Embed' ) def __init__ ( self , data : dict , client : HivenClient ): \"\"\" Represents an embed message object either customised or from a website :param data: Data that should be used to create the object :param client: The HivenClient \"\"\" super () . __init__ () self . _url = data . get ( 'url' ) self . _type = data . get ( 'type' ) self . _title = data . get ( 'title' ) self . _image = data . get ( 'image' ) self . _description = data . get ( 'description' ) self . _client = client format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\embed.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" return cls . validate ( data ) json_validator ( data ) \u00b6 openhivenpy.types.entity.Entity \u00b6 Represents a Hiven Entity inside a House which can contain Rooms Attributes \u00b6 house : Optional [ House ] property readonly \u00b6 House object of the entity house_id : Optional [ str ] property readonly \u00b6 ID of the House parent of the Entity id : Optional [ str ] property readonly \u00b6 ID of the entity name : Optional [ str ] property readonly \u00b6 Name of the entity position : Optional [ int ] property readonly \u00b6 Position on the sidebar of the Room resource_pointers : Optional [ List [ TextRoom , dict ]] property readonly \u00b6 Objects contained inside the entity. If dict is returned it's a type that is not yet included in the lib type : Optional [ int ] property readonly \u00b6 Type of the entity Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Represents a Hiven Entity inside a House which can contain Rooms Parameters: Name Type Description Default data dict Data that should be used to create the object required client HivenClient The HivenClient required Source code in openhivenpy\\types\\entity.py @log_type_exception ( 'Entity' ) def __init__ ( self , data : dict , client : HivenClient ): \"\"\" Represents a Hiven Entity inside a House which can contain Rooms :param data: Data that should be used to create the object :param client: The HivenClient \"\"\" super () . __init__ () self . _type = data . get ( 'type' ) self . _position = data . get ( 'position' ) self . _resource_pointers = data . get ( 'resource_pointers' ) self . _name = data . get ( 'name' ) self . _id = data . get ( 'id' ) self . _house_id = data . get ( 'house_id' ) self . _house = data . get ( 'house' ) self . _client = client __repr__ ( self ) special \u00b6 Source code in openhivenpy\\types\\entity.py def __repr__ ( self ) -> str : info = [ ( 'name' , self . name ), ( 'id' , self . id ), ( 'position' , self . position ), ( 'type' , self . type ) ] return '<Entity {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info )) format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\entity.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" if not data . get ( 'house_id' ) and data . get ( 'house' ): house = data . pop ( 'house' ) if type ( house ) is dict : house_id = house . get ( 'id' ) elif isinstance ( house , DataClassObject ): house_id = getattr ( house , 'id' , None ) else : house_id = None if house_id is None : raise InvalidPassedDataError ( \"The passed house is not in the correct format!\" , data = data ) else : data [ 'house_id' ] = house_id data [ 'house' ] = data . get ( 'house_id' ) data = cls . validate ( data ) return data get_cached_data ( self ) \u00b6 Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. Source code in openhivenpy\\types\\entity.py def get_cached_data ( self ) -> Optional [ dict ]: \"\"\" Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. \"\"\" return self . _client . find_entity ( self . id ) json_validator ( data ) \u00b6 openhivenpy.types.feed.Feed \u00b6 Represents the feed that is displayed on Hiven specifically for the user __init__ ( self , data , client ) special \u00b6 Source code in openhivenpy\\types\\feed.py @log_type_exception ( 'Feed' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () __repr__ ( self ) special \u00b6 Source code in openhivenpy\\types\\feed.py def __repr__ ( self ) -> str : info = [ ( 'unknown' , \"\" ) ] return '<Feed {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info )) __str__ ( self ) special \u00b6 Source code in openhivenpy\\types\\feed.py def __str__ ( self ) -> str : return repr ( self ) Important The class LazyHouse is inherited into the class House , meaning all properties of the LazyHouse class are also available in the standard House class openhivenpy.types.house.House \u00b6 Represents a Hiven House which can contain rooms and entities Attributes \u00b6 banner : Optional [ str ] property readonly \u00b6 The banner of the House client_member : Optional [ Member ] property readonly \u00b6 The logged-in client as the member object default_permissions : Optional [ int ] property readonly \u00b6 Returns the default permissions for this House entities : Optional [ List [ Entity ]] property readonly \u00b6 A list of the entities in this House members : Optional [ List [ Member ]] property readonly \u00b6 A list of members in this house owner : Optional [ Member ] property readonly \u00b6 Owner Object of this House roles : Optional [ list ] property readonly \u00b6 A list of the roles in this House users : Optional [ List [ Member ]] property readonly \u00b6 A list of members in this house. Alias for members Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Source code in openhivenpy\\types\\house.py @log_type_exception ( 'House' ) def __init__ ( self , data : dict , client : HivenClient ): self . _roles = data . get ( 'roles' ) self . _roles_data = self . _roles self . _entities : list = data . get ( 'entities' ) self . _default_permissions = data . get ( 'default_permissions' ) self . _members : dict = data . get ( 'members' ) self . _member_data = self . _members self . _client_member = data . get ( 'client_member' ) self . _banner = data . get ( 'banner' ) self . _owner = data . get ( 'owner' ) self . _client = client super () . __init__ ( data , client ) create_entity ( self , name ) async \u00b6 Creates a entity in the house with the specified name. Parameters: Name Type Description Default name str The name of the new entity required Returns: Type Description Optional[Entity] The newly created Entity Instance Source code in openhivenpy\\types\\house.py async def create_entity ( self , name : str ) -> Optional [ Entity ]: \"\"\" Creates a entity in the house with the specified name. :param name: The name of the new entity :return: The newly created Entity Instance \"\"\" try : resp = await self . _client . http . post ( endpoint = f \"/houses/ { self . id } /entities\" , json = { 'name' : name , 'type' : 1 } ) raw_data = await resp . json () data = raw_data . get ( 'data' ) # Fetching all existing ids existing_entity_ids = [ e [ 'id' ] for e in self . entities ] for d in data : id_ = d . get ( 'id' ) if id_ not in existing_entity_ids : d = Entity . format_obj_data ( d ) _entity = Entity ( d , self . _client ) self . _entities . append ( _entity ) return _entity except Exception as e : utils . log_traceback ( brief = f \"Failed to create category ' { name } ' in house { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e create_invite ( self , max_uses ) async \u00b6 Creates an invite for the current house. Parameters: Name Type Description Default max_uses int Maximal uses for the invite code required Returns: Type Description Optional[Invite] The invite url if successful. Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\house.py async def create_invite ( self , max_uses : int ) -> Optional [ Invite ]: \"\"\" Creates an invite for the current house. :param max_uses: Maximal uses for the invite code :return: The invite url if successful. :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : from . import Invite resp = await self . _client . http . post ( endpoint = f \"/houses/ { self . id } /invites\" , json = { \"max_uses\" : max_uses } ) raw_data = await resp . json () data = raw_data . get ( 'data' ) data = Invite . format_obj_data ( data ) return Invite ( data , self . _client ) except Exception as e : utils . log_traceback ( brief = f \"Failed to create invite for house { repr ( self ) } \" , exc_info = sys . exc_info () ) raise e create_room ( self , name , parent_entity_id = None ) async \u00b6 Creates a Room in the house with the specified name. Returns: Type Description Optional[TextRoom] A Room Instance for the Hiven Room that was created if successful Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\house.py async def create_room ( self , name : str , parent_entity_id : Optional [ int ] = None ) -> Optional [ TextRoom ]: \"\"\" Creates a Room in the house with the specified name. :return: A Room Instance for the Hiven Room that was created if successful :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : from . import TextRoom default_entity = utils . get ( self . entities , name = \"Rooms\" ) json = { 'name' : name , 'parent_entity_id' : parent_entity_id if parent_entity_id else default_entity . id } # Creating the room using the api resp = await self . _client . http . post ( f \"/houses/ { self . _id } /rooms\" , json = json ) raw_data = await resp . json () data = TextRoom . format_obj_data ( raw_data . get ( 'data' )) return TextRoom ( data , self . _client ) except Exception as e : utils . log_traceback ( brief = f \"Failed to create room ' { name } ' in house { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e delete ( self ) async \u00b6 Deletes the house if permissions are sufficient! Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\house.py async def delete ( self ) -> None : \"\"\" Deletes the house if permissions are sufficient! :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : await self . _client . http . delete ( f \"/houses/ { self . id } \" ) except Exception as e : utils . log_traceback ( brief = f \"Failed to delete House { repr ( self ) } \" , exc_info = sys . exc_info () ) raise e edit ( self , ** kwargs ) async \u00b6 Changes the houses data on Hiven. Available options: name, icon(base64) Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\house.py async def edit ( self , ** kwargs ) -> None : \"\"\" Changes the houses data on Hiven. Available options: name, icon(base64) :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : for key , data in kwargs . items (): if key in [ 'name' ]: await self . _client . http . patch ( endpoint = f \"/houses/ { self . id } \" , json = { key : data } ) else : raise NameError ( \"The passed value does not exist in the House!\" ) except Exception as e : keys = \"\" . join ( key + \" \" for key in kwargs . keys () ) if kwargs != {} else '' utils . log_traceback ( brief = f \"Failed edit request of values ' { keys } ' in house { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e find_entity ( self , entity_id ) \u00b6 Fetches the raw data of a entity Parameters: Name Type Description Default entity_id str The id of the entity which should be fetched required Returns: Type Description Optional[dict] The data in the cache if it was found Source code in openhivenpy\\types\\house.py def find_entity ( self , entity_id : str ) -> Optional [ dict ]: \"\"\" Fetches the raw data of a entity :param entity_id: The id of the entity which should be fetched :return: The data in the cache if it was found \"\"\" return self . _client . find_entity ( entity_id ) find_member ( self , member_id ) \u00b6 Fetches the raw data of a member Parameters: Name Type Description Default member_id str The id of the Member which should be fetched required Returns: Type Description Optional[dict] The dictionary of the member if it was found Source code in openhivenpy\\types\\house.py def find_member ( self , member_id : str ) -> Optional [ dict ]: \"\"\" Fetches the raw data of a member :param member_id: The id of the Member which should be fetched :return: The dictionary of the member if it was found \"\"\" return self . _client . find_house_member ( member_id , self . id ) find_room ( self , room_id ) \u00b6 Fetches the raw data of a room Parameters: Name Type Description Default room_id str The id of the room which should be fetched required Returns: Type Description Optional[dict] The data in the cache if it was found Source code in openhivenpy\\types\\house.py def find_room ( self , room_id : str ) -> Optional [ dict ]: \"\"\" Fetches the raw data of a room :param room_id: The id of the room which should be fetched :return: The data in the cache if it was found \"\"\" return self . _client . find_room ( room_id ) format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\house.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = LazyHouse . format_obj_data ( data ) data = cls . validate ( data ) return data get_entity ( self , entity_id ) \u00b6 Fetches a entity from the cache based on the id Returns: Type Description Optional[Entity] The Entity Instance if it exists else returns None Source code in openhivenpy\\types\\house.py def get_entity ( self , entity_id : str ) -> Optional [ Entity ]: \"\"\" Fetches a entity from the cache based on the id :return: The Entity Instance if it exists else returns None \"\"\" return self . _client . get_entity ( entity_id ) get_member ( self , member_id ) \u00b6 Fetches a member from the cache based on the id Parameters: Name Type Description Default member_id str The id of the Member which should be fetched required Returns: Type Description Optional[Member] The Member Instance if it exists else returns None Source code in openhivenpy\\types\\house.py def get_member ( self , member_id : str ) -> Optional [ Member ]: \"\"\" Fetches a member from the cache based on the id :param member_id: The id of the Member which should be fetched :return: The Member Instance if it exists else returns None \"\"\" return self . _client . get_house_member ( member_id , self . id ) get_room ( self , room_id ) \u00b6 Fetches a room from the cache based on the id Returns: Type Description Optional[TextRoom] The Room Instance if it exists else returns None Source code in openhivenpy\\types\\house.py def get_room ( self , room_id : str ) -> Optional [ TextRoom ]: \"\"\" Fetches a room from the cache based on the id :return: The Room Instance if it exists else returns None \"\"\" return self . _client . get_room ( room_id ) json_validator ( data ) \u00b6 leave ( self ) async \u00b6 Leaves the house Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\house.py async def leave ( self ) -> None : \"\"\" Leaves the house :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : await self . _client . http . delete ( endpoint = f \"/users/@me/houses/ { self . id } \" ) except Exception as e : utils . log_traceback ( brief = f \"Failed to leave { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e openhivenpy.types.house.LazyHouse \u00b6 Represents a Hiven House which can contain rooms and entities Note! This class is a lazy class and does not have every available data! Consider fetching for more data the regular house object with HivenClient.get_house() Attributes \u00b6 icon : Optional [ str ] property readonly \u00b6 URL to the ICON of this house. None if it doesn't exist id : Optional [ str ] property readonly \u00b6 Id of the House name : Optional [ str ] property readonly \u00b6 Name of the House owner_id : Optional [ int ] property readonly \u00b6 Owner user-id of this House rooms : Optional [ list ] property readonly \u00b6 List of all rooms in the house type : Optional [ int ] property readonly \u00b6 Type of the House Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Represents a Hiven House which can contain rooms and entities Parameters: Name Type Description Default data dict Data that should be used to create the object required client HivenClient The HivenClient required Source code in openhivenpy\\types\\house.py @log_type_exception ( 'LazyHouse' ) def __init__ ( self , data : dict , client : HivenClient ): \"\"\" Represents a Hiven House which can contain rooms and entities :param data: Data that should be used to create the object :param client: The HivenClient \"\"\" super () . __init__ () self . _id = data . get ( 'id' ) self . _name = data . get ( 'name' ) self . _icon = data . get ( 'icon' ) self . _owner_id = data . get ( 'owner_id' ) self . _owner = data . get ( 'owner' ) self . _rooms = data . get ( 'rooms' ) self . _type = data . get ( 'type' ) self . _client = client __repr__ ( self ) special \u00b6 Source code in openhivenpy\\types\\house.py def __repr__ ( self ) -> str : info = [ ( 'name' , self . name ), ( 'id' , self . id ), ( 'owner_id' , self . owner_id ) ] return '<House {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info )) __str__ ( self ) special \u00b6 Source code in openhivenpy\\types\\house.py def __str__ ( self ): return self . name format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Only exceptions are member objects which are unique in every house Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\house.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Only exceptions are member objects which are unique in every house :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = cls . validate ( data ) if not data . get ( 'owner_id' ) and data . get ( 'owner' ): owner = data . pop ( 'owner' ) if type ( owner ) is dict : owner_id = owner . get ( 'id' ) elif isinstance ( owner , DataClassObject ): owner_id = getattr ( owner , 'id' , None ) else : owner_id = None if owner_id is None : raise InvalidPassedDataError ( \"The passed owner is not in the correct format!\" , data = data ) else : data [ 'owner_id' ] = owner_id if type ( data . get ( 'members' )) is list : members = data [ 'members' ] data [ 'members' ] = {} for member_ in members : id_ = member_ [ 'user_id' ] if member_ . get ( 'user_id' ) \\ else member_ . get ( 'user' , {}) . get ( 'id' ) data [ 'members' ][ id_ ] = utils . update_and_return ( member_ , user = id_ # replacing the object with an id ref ) if type ( data . get ( 'roles' )) is list : roles = data [ 'roles' ] data [ 'roles' ] = {} for role in roles : id_ = role . get ( 'id' ) data [ 'roles' ][ id_ ] = role if type ( data . get ( 'rooms' )) is list : data [ 'rooms' ] = [ i [ 'id' ] for i in data [ 'rooms' ]] if type ( data . get ( 'entities' )) is list : data [ 'entities' ] = [ i [ 'id' ] for i in data [ 'entities' ]] data [ 'owner' ] = data [ 'owner_id' ] return data get_cached_data ( self ) \u00b6 Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. Source code in openhivenpy\\types\\house.py def get_cached_data ( self ) -> Optional [ dict ]: \"\"\" Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. \"\"\" return self . _client . find_house ( self . id ) json_validator ( data ) \u00b6 openhivenpy.types.invite.Invite \u00b6 Represents an Invite to a Hiven House code : Optional [ int ] property readonly \u00b6 created_at : Optional [ str ] property readonly \u00b6 house : Optional [ House ] property readonly \u00b6 house_id : Optional [ str ] property readonly \u00b6 house_members : Optional [ int ] property readonly \u00b6 max_age : Optional [ int ] property readonly \u00b6 max_uses : Optional [ int ] property readonly \u00b6 type : Optional [ int ] property readonly \u00b6 url : Optional [ str ] property readonly \u00b6 Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Source code in openhivenpy\\types\\invite.py @log_type_exception ( 'Invite' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _code = data . get ( 'code' ) self . _url = data . get ( 'url' ) self . _created_at = data . get ( 'created_at' ) self . _house_id = data . get ( 'house_id' ) self . _max_age = data . get ( 'max_age' ) self . _max_uses = data . get ( 'max_uses' ) self . _type = data . get ( 'type' ) self . _house = data . get ( 'house' ) self . _house_members = data . get ( 'house_members' ) self . _client = client __repr__ ( self ) special \u00b6 Source code in openhivenpy\\types\\invite.py def __repr__ ( self ) -> str : info = [ ( 'code' , self . code ), ( 'url' , self . url ), ( 'created_at' , self . created_at ), ( 'house_id' , self . house_id ), ( 'type' , self . type ), ( 'max_age' , self . max_age ), ( 'max_uses' , self . max_uses ), ] return '<Invite {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info )) format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\invite.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" if data . get ( 'invite' ) is not None : invite = data . get ( 'invite' ) else : invite = data data [ 'code' ] = invite . get ( 'code' ) data [ 'url' ] = \"https://hiven.house/ {} \" . format ( data [ 'code' ]) data [ 'created_at' ] = invite . get ( 'created_at' ) data [ 'max_age' ] = invite . get ( 'max_age' ) data [ 'max_uses' ] = invite . get ( 'max_uses' ) data [ 'type' ] = invite . get ( 'type' ) data [ 'house_members' ] = data . get ( 'counts' , {}) . get ( 'house_members' ) if not invite . get ( 'house_id' ) and invite . get ( 'house' ): house = invite . pop ( 'house' ) if type ( house ) is dict : house_id = house . get ( 'id' ) elif isinstance ( house , DataClassObject ): house_id = getattr ( house , 'id' , None ) else : house_id = None if house_id is None : raise InvalidPassedDataError ( \"The passed house is not in the correct format!\" , data = data ) else : data [ 'house_id' ] = house_id data [ 'type' ] = int ( data [ 'type' ]) data [ 'house' ] = data . get ( 'house_id' ) data = cls . validate ( data ) return data json_validator ( data ) \u00b6 openhivenpy.types.member.Member \u00b6 Represents a House Member on Hiven which contains the Hiven User, role-data and member-data Attributes \u00b6 house : Optional [ House ] property readonly \u00b6 Parent House object instance of this class house_id : Optional [ str ] property readonly \u00b6 Returns the ID of the parent House id : Optional [ str ] property readonly \u00b6 User-ID of the member. Alias for user_id joined_at : Optional [ str ] property readonly \u00b6 Joined at date (unix-timestamp probably) joined_house_at : Optional [ str ] property readonly \u00b6 Joined at date (unix-timestamp probably). Alias for joined_at roles : Optional [ List [ dict ]] property readonly \u00b6 Returns the roles of the Member user_id : Optional [ str ] property readonly \u00b6 User-ID of the member Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Source code in openhivenpy\\types\\member.py @log_type_exception ( 'Member' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ ( data . get ( 'user' ), client ) data = { ** data . get ( 'user' ), ** data } self . _user_id = data . get ( 'user_id' ) self . _house_id = data . get ( 'house_id' ) self . _joined_at = data . get ( 'joined_at' ) self . _roles = data . get ( 'roles' ) self . _house = data . get ( 'house' ) __repr__ ( self ) special \u00b6 Source code in openhivenpy\\types\\member.py def __repr__ ( self ) -> str : info = [ ( 'username' , self . username ), ( 'name' , self . name ), ( 'id' , self . id ), ( 'icon' , self . icon ), ( 'header' , self . header ), ( 'bot' , self . bot ), ( 'house_id' , self . house_id ), ( 'joined_house_at' , self . joined_house_at ) ] return '<Member {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info )) format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\member.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" if not data . get ( 'house_id' ) and data . get ( 'house' ): house = data . pop ( 'house' ) if type ( house ) is dict : house_id = house . get ( 'id' ) elif isinstance ( house , DataClassObject ): house_id = getattr ( house , 'id' , None ) else : house_id = None if house_id is None : raise InvalidPassedDataError ( \"The passed house is not in the correct format!\" , data = data ) else : data [ 'house_id' ] = house_id elif not data . get ( 'house_id' ) and not data . get ( 'house' ): raise InvalidPassedDataError ( \"house_id and house missing from required data\" , data = data ) data [ 'house' ] = data . get ( 'house_id' ) data = cls . validate ( data ) return data json_validator ( data ) \u00b6 kick ( self ) async \u00b6 Kicks a user from the house. Exceptions: Type Description HTTPError If any HTTP error is raised while executing Forbidden If the client does not have the permissions to execute this command Source code in openhivenpy\\types\\member.py async def kick ( self ) -> None : \"\"\" Kicks a user from the house. :raise HTTPError: If any HTTP error is raised while executing :raises Forbidden: If the client does not have the permissions to execute this command \"\"\" try : endpoint = f \"/ { self . _house_id } /members/ { self . _user_id } \" await self . _client . http . delete ( endpoint ) except ( HTTPForbiddenError , HTTPFailedRequestError ) as e : utils . log_traceback ( brief = f \"Failed to kick the member due to an exception \" \"occurring:\" , exc_info = sys . exc_info () ) raise e openhivenpy.types.mention.Mention \u00b6 Represents an mention for a user in Hiven Attributes \u00b6 author : Optional [ User ] property readonly \u00b6 The author of the message containing the mention author_id : Optional [ str ] property readonly \u00b6 timestamp : Optional [ datetime . datetime ] property readonly \u00b6 Returns the timestamp when the mention was made user : Optional [ User ] property readonly \u00b6 Returns the User mentioned user_id : Optional [ str ] property readonly \u00b6 The id of the user mentioned Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Source code in openhivenpy\\types\\mention.py @log_type_exception ( 'Mention' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _timestamp = data . get ( 'timestamp' ) self . _user = data . get ( 'user' ) self . _user_id = data . get ( 'user_id' ) self . _author = data . get ( 'author' ) self . _author_id = data . get ( 'author_id' ) self . _client = client format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\mention.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" if not data . get ( 'user_id' ) and data . get ( 'user' ): user = data . pop ( 'user' ) if type ( user ) is dict : user = user . get ( 'id' , None ) elif isinstance ( user , DataClassObject ): user = getattr ( user , 'id' , None ) else : user = None if user is None : raise InvalidPassedDataError ( \"The passed user is not in the correct format!\" , data = data ) else : data [ 'user' ] = user if not data . get ( 'author_id' ) and data . get ( 'author' ): author = data . pop ( 'author' ) if type ( author ) is dict : author = author . get ( 'id' , None ) elif isinstance ( author , DataClassObject ): author = getattr ( author , 'id' , None ) else : author = None if author is None : raise InvalidPassedDataError ( \"The passed author is not in the correct format!\" , data = data ) else : data [ 'author' ] = author data [ 'author' ] = data . get ( 'author_id' ) data [ 'user' ] = data . get ( 'user_id' ) data = cls . validate ( data ) return data json_validator ( data ) \u00b6 openhivenpy.types.message.DeletedMessage \u00b6 Represents a Deleted Message in a Room Attributes \u00b6 house_id : Optional [ str ] property readonly \u00b6 ID of the original house (None if it does not exist) message_id : Optional [ str ] property readonly \u00b6 ID of the original message room_id : Optional [ str ] property readonly \u00b6 ID of the original room (can be private) Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Source code in openhivenpy\\types\\message.py @log_type_exception ( 'DeletedMessage' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _message_id = data . get ( 'message_id' ) self . _house_id = data . get ( 'house_id' ) self . _room_id = data . get ( 'room_id' ) self . _client = client __str__ ( self ) special \u00b6 Source code in openhivenpy\\types\\message.py def __str__ ( self ): return f \"Deleted message in room { self . room_id } \" format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\message.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = cls . validate ( data ) data [ 'message_id' ] = data [ 'id' ] return data json_validator ( data ) \u00b6 openhivenpy.types.message.Message \u00b6 Represents a standard Hiven message sent by a user Attributes \u00b6 attachment : Optional [ Attachment ] property readonly \u00b6 Returns the Attachment of the message, if it has one author : Optional [ User ] property readonly \u00b6 Returns the Author parent object instance author_id : Optional [ str ] property readonly \u00b6 ID of the parent Author bucket : Optional [ int ] property readonly \u00b6 Returns the bucket of the message content : Optional [ str ] property readonly \u00b6 Returns the string content of the message device_id : Optional [ str ] property readonly \u00b6 Returns the device id of the author of the message edited_at : Optional [ str ] property readonly \u00b6 Returns the date the message was edited (unix-timestamp) embed : Embed property readonly \u00b6 Returns the Embed of the message, if it has one exploding : Optional [ bool ] property readonly \u00b6 Returns whether the message is exploding exploding_age : Optional [ int ] property readonly \u00b6 Returns the exploding age of the message house : Optional [ House ] property readonly \u00b6 Returns the House parent object, if the message was sent inside a House house_id : Optional [ str ] property readonly \u00b6 Returns the id of the House parent object, if the message was sent inside a House id : Optional [ str ] property readonly \u00b6 ID of the message is_house_message : bool property readonly \u00b6 Returns whether the message was sent inside a House mentions : Optional [ List [ Mention ]] property readonly \u00b6 Returns the mentions of the message recipient_ids : Optional [ List [ str ]] property readonly \u00b6 A list of all recipients in the room - unique for the private rooms room : Optional [ TextRoom ] property readonly \u00b6 Returns the Room parent object the message was sent in room_id : Optional [ str ] property readonly \u00b6 Returns the id of the Room parent object timestamp : Optional [ datetime . datetime ] property readonly \u00b6 Returns the date the message was created (unix-timestamp) type : Optional [ int ] property readonly \u00b6 Returns the type of the message Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Source code in openhivenpy\\types\\message.py @log_type_exception ( 'Message' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _id = data . get ( 'id' ) self . _author = data . get ( 'author' ) self . _author_id = data . get ( 'author_id' ) self . _attachment : Union [ dict , Attachment ] = data . get ( 'attachment' ) self . _content = data . get ( 'content' ) self . _timestamp = data . get ( 'timestamp' ) self . _edited_at = data . get ( 'edited_at' ) self . _mentions = data . get ( 'mentions' ) # I believe, 0 = normal message, 1 = system. self . _type = data . get ( 'type' ) self . _exploding = data . get ( 'exploding' ) self . _house_id = data . get ( 'house_id' ) self . _house = data . get ( 'house' ) self . _room_id = data . get ( 'room_id' ) self . _room = data . get ( 'room' ) self . _embed = data . get ( 'embed' ) self . _bucket = data . get ( 'bucket' ) self . _device_id = data . get ( 'device_id' ) self . _exploding_age = data . get ( 'exploding_age' ) self . _recipient_ids = data . get ( 'recipient_ids' ) self . _client = client __repr__ ( self ) special \u00b6 Source code in openhivenpy\\types\\message.py def __repr__ ( self ) -> str : info = [ ( 'id' , self . id ), ( 'content' , self . content ), ( 'author' , repr ( self . author )), ( 'room' , repr ( self . room )), ( 'type' , self . type ), ( 'exploding' , self . exploding ), ( 'edited_at' , self . edited_at ) ] return '<Message {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info )) __str__ ( self ) special \u00b6 Source code in openhivenpy\\types\\message.py def __str__ ( self ) -> str : return f \"<Message id=' { self . id } ' from ' { self . author . name } '>\" delete ( self , delay = None ) async \u00b6 Deletes the message. Raises Forbidden if not allowed. Parameters: Name Type Description Default delay float Delay until deleting the message as read (in seconds) None Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\message.py async def delete ( self , delay : float = None ) -> None : \"\"\" Deletes the message. Raises Forbidden if not allowed. :param delay: Delay until deleting the message as read (in seconds) :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : if delay is not None : await asyncio . sleep ( delay = delay ) await self . _client . http . delete ( endpoint = f \"/rooms/ { self . room_id } /messages/ { self . id } \" ) except Exception as e : utils . log_traceback ( brief = f \"Failed to delete the message { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e edit ( self , content ) async \u00b6 Edits a message on Hiven Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\message.py async def edit ( self , content : str ) -> None : \"\"\" Edits a message on Hiven :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : await self . _client . http . patch ( endpoint = f \"/rooms/ { self . room_id } /messages/ { self . id } \" , json = { 'content' : content } ) except Exception as e : utils . log_traceback ( brief = f \"Failed to edit message { repr ( self ) } \" , exc_info = sys . exc_info () ) raise e format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\message.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" # I believe, 0 = normal message, 1 = system. data [ 'type' ] = utils . safe_convert ( int , data . get ( 'type' ), None ) data [ 'bucket' ] = utils . safe_convert ( int , data . get ( 'bucket' ), None ) data [ 'exploding_age' ] = utils . safe_convert ( int , data . get ( 'exploding_age' ), None ) data [ 'timestamp' ] = utils . safe_convert ( int , data . get ( 'timestamp' )) data = cls . validate ( data ) if not data . get ( 'room_id' ) and data . get ( 'room' ): room_ = data . pop ( 'room' ) if type ( room_ ) is dict : room_ = room_ . get ( 'id' , None ) elif isinstance ( room_ , DataClassObject ): room_ = getattr ( room_ , 'id' , None ) elif type ( data . get ( 'room_id' )) is str : room_ = data [ 'room_id' ] else : room_ = None if room_ is None : raise InvalidPassedDataError ( \"The passed room is not in the correct format!\" , data = data ) else : data [ 'room_id' ] = room_ if not data . get ( 'house_id' ) and data . get ( 'house' ): house_ = data . pop ( 'house' ) if type ( house_ ) is dict : house_ = house_ . get ( 'id' , None ) elif isinstance ( house_ , DataClassObject ): house_ = getattr ( house_ , 'id' , None ) elif type ( data . get ( 'house_id' )) is str : house_ = data [ 'house_id' ] else : house_ = None data [ 'house_id' ] = house_ if not data . get ( 'author_id' ) and data . get ( 'author' ): author = data . pop ( 'author' ) if type ( author ) is dict : author = author . get ( 'id' , None ) elif isinstance ( author , DataClassObject ): author = getattr ( author , 'id' , None ) elif type ( data . get ( 'author_id' )) is str : author = data [ 'author_id' ] else : author = None if author is None : raise InvalidPassedDataError ( \"The passed author is not in the correct format!\" , data = data ) else : data [ 'author' ] = author data [ 'author' ] = data [ 'author_id' ] data [ 'house' ] = data [ 'house_id' ] data [ 'room' ] = data [ 'room_id' ] data [ 'device_id' ] = utils . safe_convert ( str , data . get ( 'device_id' ), None ) return data json_validator ( data ) \u00b6 mark_as_read ( self , delay = None ) async \u00b6 Marks the message as read. This doesn't need to be done for bot clients. Parameters: Name Type Description Default delay float Delay until marking the message as read (in seconds) None Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\message.py async def mark_as_read ( self , delay : float = None ) -> None : \"\"\" Marks the message as read. This doesn't need to be done for bot clients. :param delay: Delay until marking the message as read (in seconds) :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : if delay is not None : await asyncio . sleep ( delay = delay ) await self . _client . http . post ( endpoint = f \"/rooms/ { self . room_id } /messages/ { self . id } /ack\" ) except Exception as e : utils . log_traceback ( brief = f \"Failed to mark message as read { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e openhivenpy.types.private_room.PrivateRoom \u00b6 Represents a private chat room with only one user Attributes \u00b6 client_user : Optional [ User ] property readonly \u00b6 Returns the client_user of this class description : Optional [ str ] property readonly \u00b6 Return the description of the PrivateRoom emoji : Optional [ str ] property readonly \u00b6 The emoji of the PrivateRoom, if it has one id : Optional [ str ] property readonly \u00b6 Returns the id of the PrivateRoom last_message_id : Optional [ str ] property readonly \u00b6 The id of the last sent message name : Optional [ str ] property readonly \u00b6 Name of the PrivateRoom recipient : Optional [ User ] property readonly \u00b6 Returns the recipient object instance recipient_id : Optional [ str ] property readonly \u00b6 The ID of the recipient type : Optional [ int ] property readonly \u00b6 The type of the PrivateRoom Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Source code in openhivenpy\\types\\private_room.py @log_type_exception ( 'PrivateRoom' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _id = data . get ( 'id' ) self . _last_message_id = data . get ( 'last_message_id' ) self . _recipient = data . get ( 'recipient' ) self . _recipient_id = data . get ( 'recipient_id' ) self . _name = data . get ( 'name' ) self . _description = data . get ( 'description' ) self . _emoji = data . get ( 'emoji' ) self . _type = data . get ( 'type' ) self . _client_user = client . client_user __repr__ ( self ) special \u00b6 Source code in openhivenpy\\types\\private_room.py def __repr__ ( self ) -> str : info = [ ( 'id' , self . id ), ( 'last_message_id' , self . last_message_id ), ( 'recipients' , self . recipient ), ( 'type' , self . type ) ] return '<PrivateRoom {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info )) format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\private_room.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = cls . validate ( data ) name = \"\" if not data . get ( 'recipient_id' ) and data . get ( 'recipients' ): recipient = data . pop ( 'recipients' )[ 0 ] if type ( recipient ) is dict : name = recipient . get ( 'name' , None ) recipient = recipient . get ( 'id' , None ) elif isinstance ( recipient , DataClassObject ): name = getattr ( recipient , 'name' , None ) recipient = getattr ( recipient , 'id' , None ) else : recipient = None name = None if recipient is None : raise InvalidPassedDataError ( \"The passed recipient/s is/are not in the correct format!\" , data = data ) else : data [ 'recipient_id' ] = recipient data [ 'recipient' ] = data [ 'recipient_id' ] # If the passed recipient object does not contain the name parameter # it will be fetched later from the client based on the id if name : data [ 'name' ] = f \"Private chat with { name } \" else : data [ 'name' ] = None return data get_cached_data ( self ) \u00b6 Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. Source code in openhivenpy\\types\\private_room.py def get_cached_data ( self ) -> Optional [ dict ]: \"\"\" Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. \"\"\" return self . _client . find_private_room ( self . id ) json_validator ( data ) \u00b6 send ( self , content , delay = None ) async \u00b6 Sends a message in the private room. Parameters: Name Type Description Default content str Content of the message required delay float Delay until sending the message (in seconds) None Returns: Type Description Optional[Message] Returns a Message Instance if successful. Source code in openhivenpy\\types\\private_room.py async def send ( self , content : str , delay : float = None ) -> Optional [ Message ]: \"\"\" Sends a message in the private room. :param content: Content of the message :param delay: Delay until sending the message (in seconds) :return: Returns a Message Instance if successful. \"\"\" raise NotImplementedError ( \"This is not implemented yet for Private Rooms\" ) start_call ( self , delay = None ) async \u00b6 Starts a call with the user in the private room Not implemented Parameters: Name Type Description Default delay float Delay until calling (in seconds) None Source code in openhivenpy\\types\\private_room.py async def start_call ( self , delay : float = None ) -> bool : \"\"\" Starts a call with the user in the private room *Not implemented* :param delay: Delay until calling (in seconds) \"\"\" raise NotImplementedError ( \"This is not implemented yet for Private Rooms\" ) openhivenpy.types.private_room.PrivateGroupRoom \u00b6 Represents a private group chat room with multiple users Attributes \u00b6 client_user : Optional [ User ] property readonly \u00b6 Returns the Client User inside this PrivateGroupRoom description : Optional [ int ] property readonly \u00b6 Returns the description of the PrivateGroupRoom emoji : Optional [ str ] property readonly \u00b6 Returns the emoji of this PrivateGroupRoom if it exists id : Optional [ str ] property readonly \u00b6 Returns the id of the PrivateGroupRoom last_message_id : Optional [ str ] property readonly \u00b6 Returns the id of the last message inside the PrivateGroupRoom name : Optional [ str ] property readonly \u00b6 Returns the name of the PrivateGroupRoom recipients : Optional [ List [ User ]] property readonly \u00b6 Returns a list of all recipients type : Optional [ int ] property readonly \u00b6 Returns the type of this PrivateGroupRoom Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Source code in openhivenpy\\types\\private_room.py @log_type_exception ( 'PrivateGroupRoom' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _id = data . get ( 'id' ) self . _last_message_id = data . get ( 'last_message_id' ) self . _recipients = data . get ( 'recipients' ) self . _name = data . get ( 'name' ) self . _description = data . get ( 'description' ) self . _emoji = data . get ( 'emoji' ) self . _type = data . get ( 'type' ) self . _client_user = client . client_user self . _client = client __repr__ ( self ) special \u00b6 Source code in openhivenpy\\types\\private_room.py def __repr__ ( self ) -> str : info = [ ( 'id' , self . id ), ( 'last_message_id' , self . last_message_id ), ( 'recipients' , self . recipients ), ( 'type' , self . type ) ] return '<PrivateGroupRoom {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ) ) format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\private_room.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = cls . validate ( data ) data [ 'name' ] = f \"Private chat with { data [ 'recipients' ][ 0 ][ 'name' ] } \" rep = data . get ( 'recipients' ) id_list : List [ str ] = [] if type ( rep ) is list : for user in rep : if type ( user ) is dict : id_list += str ( user . get ( 'id' , None )) elif isinstance ( user , DataClassObject ): id_list += str ( getattr ( user , 'id' , None )) else : raise InvalidPassedDataError ( \"The passed recipient is not in the correct \" \"format!\" , data = data ) else : raise InvalidPassedDataError ( \"The passed recipients are not in the correct format!\" , data = data ) data [ 'recipients' ] = id_list return data get_cached_data ( self ) \u00b6 Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. Source code in openhivenpy\\types\\private_room.py def get_cached_data ( self ) -> Optional [ dict ]: \"\"\" Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. \"\"\" return self . _client . find_private_group_room ( self . id ) json_validator ( data ) \u00b6 send ( self , content , delay = None ) async \u00b6 Sends a message in the private room. Not implemented Parameters: Name Type Description Default content str Content of the message required delay float Seconds to wait until sending the message (in seconds) None Returns: Type Description Optional[Message] A Message instance if successful else None Source code in openhivenpy\\types\\private_room.py async def send ( self , content : str , delay : float = None ) -> Optional [ Message ]: \"\"\" Sends a message in the private room. *Not implemented* :param content: Content of the message :param delay: Seconds to wait until sending the message (in seconds) :return: A Message instance if successful else None \"\"\" raise NotImplementedError ( \"This is not implemented yet for Private Rooms\" ) start_call ( self , delay = None ) async \u00b6 Starts a call with the user in the private room Not implemented Parameters: Name Type Description Default delay float Delay until calling (in seconds) None Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\private_room.py async def start_call ( self , delay : float = None ) -> bool : \"\"\" Starts a call with the user in the private room *Not implemented* :param delay: Delay until calling (in seconds) :raise HTTPError: If any HTTP error is raised while executing \"\"\" raise NotImplementedError ( \"This is not implemented yet for Private Rooms\" ) openhivenpy.types.relationship.Relationship \u00b6 Represents a user-relationship with another user or bot Possible Type of the Relationship: 0 - No Relationship 1 - Outgoing Friend Request 2 - Incoming Friend Request 3 - Friend 4 - Restricted User 5 - Blocked User Attributes \u00b6 id : Optional [ str ] property readonly \u00b6 Alias for user_id. Stored using the target user id in the cache type : Optional [ int ] property readonly \u00b6 Possible Type of the relationship: 0 - No Relationship 1 - Outgoing Friend Request 2 - Incoming Friend Request 3 - Friend 4 - Restricted User 5 - Blocked User user : Optional [ User ] property readonly \u00b6 Target User Object user_id : Optional [ str ] property readonly \u00b6 ID of the target user Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Source code in openhivenpy\\types\\relationship.py @log_type_exception ( 'Relationship' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _user_id = data . get ( 'user_id' ) self . _user = data . get ( 'user' ) self . _type = data . get ( 'type' ) self . _last_updated_at = data . get ( 'last_updated_at' ) self . _client = client __repr__ ( self ) special \u00b6 Source code in openhivenpy\\types\\relationship.py def __repr__ ( self ) -> str : info = [ ( 'id' , self . id ), ( 'user_id' , self . user_id ), ( 'user' , repr ( self . user )), ( 'type' , self . type ) ] return '<Relationship {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info )) format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\relationship.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = cls . validate ( data ) data [ 'type' ] = utils . safe_convert ( int , data . get ( 'type' )) if not data . get ( 'user_id' ) and data . get ( 'user' ): user = data . pop ( 'user' ) if type ( user ) is dict : user_id = user . get ( 'id' ) elif isinstance ( user , DataClassObject ): user_id = getattr ( user , 'id' , None ) else : user_id = None if user_id is None : raise InvalidPassedDataError ( \"The passed user is not in the correct format!\" , data = data ) else : data [ 'user_id' ] = user_id elif not data . get ( 'user_id' ) and not data . get ( 'user' ): raise InvalidPassedDataError ( \"user_id and user missing from required data\" , data = data ) data [ 'user' ] = data [ 'user_id' ] return data get_cached_data ( self ) \u00b6 Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. Source code in openhivenpy\\types\\relationship.py def get_cached_data ( self ) -> Optional [ dict ]: \"\"\" Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. \"\"\" return self . _client . find_relationship ( self . user_id ) json_validator ( data ) \u00b6 openhivenpy.types.textroom.TextRoom \u00b6 Represents a Hiven Room inside a House Possible Types: 0 - Text 1 - Portal Attributes \u00b6 description : Optional [ str ] property readonly \u00b6 The description of the Room emoji : Optional [ str ] property readonly \u00b6 The assigned emoji of the room house : Optional [ House ] property readonly \u00b6 The parent house object house_id : Optional [ str ] property readonly \u00b6 The ID of the parent house id : Optional [ str ] property readonly \u00b6 ID of the Room name : Optional [ str ] property readonly \u00b6 Name of the Room position : Optional [ int ] property readonly \u00b6 Position on the sidebar of the Room type : Optional [ int ] property readonly \u00b6 Type of the Room (always 0 for TextRoom) Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Source code in openhivenpy\\types\\textroom.py @log_type_exception ( 'TextRoom' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _id = data . get ( 'id' ) self . _name = data . get ( 'name' ) self . _house_id = data . get ( 'house_id' ) self . _position = data . get ( 'position' ) self . _type = data . get ( 'type' ) self . _emoji = data . get ( 'emoji' ) self . _description = data . get ( 'description' ) self . _last_message_id = data . get ( 'last_message_id' ) self . _house = data . get ( 'house' ) self . _client = client __repr__ ( self ) special \u00b6 Source code in openhivenpy\\types\\textroom.py def __repr__ ( self ) -> str : info = [ ( 'name' , self . name ), ( 'id' , self . id ), ( 'house_id' , self . house_id ), ( 'position' , self . position ), ( 'type' , self . type ), ( 'emoji' , self . emoji ), ( 'description' , self . description ) ] return str ( '<Room {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ))) edit ( self , ** kwargs ) async \u00b6 Changes the rooms data on Hiven Available options: emoji, name, description Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\textroom.py async def edit ( self , ** kwargs ) -> None : \"\"\" Changes the rooms data on Hiven Available options: emoji, name, description :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : for key in kwargs . keys (): if key in [ 'emoji' , 'name' , 'description' ]: await self . _client . http . patch ( f \"/rooms/ { self . id } \" , json = { key : kwargs . get ( key )} ) else : raise NameError ( \"The passed value does not exist in the Room!\" ) except Exception as e : keys = \"\" . join ( key + \" \" for key in kwargs . keys () ) if kwargs != {} else '' utils . log_traceback ( brief = f \"Failed to change the values { keys } in room { repr ( self ) } \" , exc_info = sys . exc_info () ) raise e format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\textroom.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" if not data . get ( 'house_id' ) and data . get ( 'house' ): house = data . pop ( 'house' ) if type ( house ) is dict : house_id = house . get ( 'id' ) elif isinstance ( house , DataClassObject ): house_id = getattr ( house , 'id' , None ) else : house_id = None if house_id is None : raise InvalidPassedDataError ( \"The passed house is not in the correct format!\" , data = data ) else : data [ 'house_id' ] = house_id data [ 'house' ] = data [ 'house_id' ] data = cls . validate ( data ) return data get_cached_data ( self ) \u00b6 Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. Source code in openhivenpy\\types\\textroom.py def get_cached_data ( self ) -> Optional [ dict ]: \"\"\" Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. \"\"\" return self . _client . find_room ( self . id ) get_recent_messages ( self ) async \u00b6 Gets the recent messages from the current room Returns: Type Description Optional[List[Message]] A list of all messages in form of Message instances if successful. Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\textroom.py async def get_recent_messages ( self ) -> Optional [ List [ Message ]]: \"\"\" Gets the recent messages from the current room :return: A list of all messages in form of Message instances if successful. :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : raw_data = await self . _client . http . get ( f \"/rooms/ { self . id } /messages\" ) raw_data = await raw_data . json () data = raw_data . get ( 'data' ) messages_ = [] for _ in data : msg = Message ( _ , self . _client ) messages_ . append ( msg ) return messages_ except Exception as e : utils . log_traceback ( brief = f \"Failed to create invite for house { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e json_validator ( data ) \u00b6 send ( self , content , delay = None ) async \u00b6 Sends a message in the current room. Parameters: Name Type Description Default content str Content of the message required delay float Seconds to wait until sending the message (in seconds) None Returns: Type Description Optional[Message] A new message object if the request was successful Source code in openhivenpy\\types\\textroom.py async def send ( self , content : str , delay : float = None ) -> Optional [ Message ]: \"\"\" Sends a message in the current room. :param content: Content of the message :param delay: Seconds to wait until sending the message (in seconds) :return: A new message object if the request was successful \"\"\" try : if delay is not None : await asyncio . sleep ( delay = delay ) resp = await self . _client . http . post ( f \"/rooms/ { self . id } /messages\" , json = { \"content\" : content } ) raw_data = await resp . json () # Raw_data not in correct format => needs to access data field data = raw_data . get ( 'data' ) data = Message . format_obj_data ( data ) return Message ( data , self . _client ) except Exception as e : utils . log_traceback ( brief = f \"Failed to send message in room { repr ( self ) } \" , exc_info = sys . exc_info () ) raise e start_typing ( self ) async \u00b6 Adds the client to the list of users typing Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\textroom.py async def start_typing ( self ) -> None : \"\"\" Adds the client to the list of users typing :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : await self . _client . http . post ( f \"/rooms/ { self . id } /typing\" ) except Exception as e : utils . log_traceback ( brief = f \"Failed to create invite for house { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e Important The class LazyUser is inherited into the class User , meaning all properties of the LazyUser class are also available in the standard User class openhivenpy.types.user.User \u00b6 Represents the regular extended Hiven User Attributes \u00b6 blocked : Optional [ bool ] property readonly \u00b6 Returns whether the user is blocked email : Optional [ str ] property readonly \u00b6 The e-mail of the user. Client-limited location : Optional [ str ] property readonly \u00b6 Set location of the user mfa_enabled : Optional [ bool ] property readonly \u00b6 Returns whether mfa is enabled presence : Optional [ str ] property readonly \u00b6 Current presence of the User website : Optional [ str ] property readonly \u00b6 Set website of the user Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Source code in openhivenpy\\types\\user.py @log_type_exception ( 'User' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ ( data , client ) self . _location = data . get ( 'location' ) self . _website = data . get ( 'website' ) self . _blocked = data . get ( 'blocked' ) self . _presence = data . get ( 'presence' ) self . _email = data . get ( 'email' ) self . _mfa_enabled = data . get ( 'mfa_enabled' ) __repr__ ( self ) special \u00b6 Source code in openhivenpy\\types\\user.py def __repr__ ( self ) -> str : info = [ ( 'username' , self . username ), ( 'name' , self . name ), ( 'id' , self . id ), ( 'icon' , self . icon ), ( 'header' , self . header ), ( 'bot' , self . bot ) ] return '<User {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info )) format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\user.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = LazyUser . format_obj_data ( data ) data = cls . validate ( data ) return data json_validator ( data ) \u00b6 openhivenpy.types.user.LazyUser \u00b6 Represents the standard Hiven User Note! This class is a lazy class and does not have every available data! Consider fetching for more data the regular user object with HivenClient.get_user() Attributes \u00b6 account : Optional [ str ] property readonly \u00b6 Returns the account id/string. Currently client-limited application : Optional [ bool ] property readonly \u00b6 Returns the application string passed. Currently client-limited bio : Optional [ str ] property readonly \u00b6 Bio of the user bot : Optional [ bool ] property readonly \u00b6 Returns true when the user is a bot email_verified : Optional [ bool ] property readonly \u00b6 Returns True if the email is verified flags : Optional [ Union [ int , str ]] property readonly \u00b6 User flags represented as an numeric value/str header : Optional [ str ] property readonly \u00b6 The header of the user as a link icon : Optional [ str ] property readonly \u00b6 The icon of the user as a link id : Optional [ str ] property readonly \u00b6 Unique string id of the user name : Optional [ str ] property readonly \u00b6 Name of the user user_flags : Optional [ Union [ int , str ]] property readonly \u00b6 Alias for flags username : Optional [ str ] property readonly \u00b6 Username of the user Methods \u00b6 __init__ ( self , data , client ) special \u00b6 Source code in openhivenpy\\types\\user.py @log_type_exception ( 'LazyUser' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _username = data . get ( 'username' ) self . _name = data . get ( 'name' ) self . _bio = data . get ( 'bio' ) self . _id = data . get ( 'id' ) self . _email_verified = data . get ( 'email_verified' ) # ToDo: Discord.py-esque way of user flags self . _flags = data . get ( 'flags' ) self . _icon = data . get ( 'icon' ) self . _header = data . get ( 'header' ) self . _bot = data . get ( 'bot' , False ) self . _client = client __repr__ ( self ) special \u00b6 Source code in openhivenpy\\types\\user.py def __repr__ ( self ) -> str : info = [ ( 'username' , self . username ), ( 'name' , self . name ), ( 'id' , self . id ), ( 'icon' , self . icon ), ( 'header' , self . header ), ( 'bot' , self . bot ) ] return '<LazyUser {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info )) format_obj_data ( data ) classmethod \u00b6 Validates the data and appends data if it is missing that would be required for the creation of an instance. Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\user.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = cls . validate ( data ) return data get_cached_data ( self ) \u00b6 Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. Source code in openhivenpy\\types\\user.py def get_cached_data ( self ) -> Optional [ dict ]: \"\"\" Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. \"\"\" return self . _client . find_user ( self . id ) json_validator ( data ) \u00b6 openhivenpy.types.usertyping.UserTyping \u00b6 Represents a Hiven User typing in a room Attributes \u00b6 author : Optional [ User ] property readonly \u00b6 Author object of the User-Typing Class author_id : Optional [ str ] property readonly \u00b6 ID of the parent Author object of the Context Class house : Optional [ House ] property readonly \u00b6 House object of the Context Class house_id : Optional [ str ] property readonly \u00b6 ID of the parent House object of the Context Class is_house_typing : bool property readonly \u00b6 Returns whether the typing is inside a house room : Optional [ TextRoom ] property readonly \u00b6 Room object of the Context Class room_id : Optional [ str ] property readonly \u00b6 ID of the parent Room object of the Context Class timestamp : Optional [ datetime . datetime ] property readonly \u00b6 Time-stamp of the User-Typing (unix) __init__ ( self , data , client ) special \u00b6 Source code in openhivenpy\\types\\usertyping.py @log_type_exception ( 'UserTyping' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _author = data . get ( 'author' ) self . _room = data . get ( 'room' ) self . _house = data . get ( 'house' ) self . _author_id = data . get ( 'author_id' ) self . _house_id = data . get ( 'house_id' ) self . _room_id = data . get ( 'room_id' ) self . _timestamp = data . get ( 'timestamp' ) self . _client = client __repr__ ( self ) special \u00b6 Source code in openhivenpy\\types\\usertyping.py def __repr__ ( self ) -> str : info = [ ( 'house_id' , self . house_id ), ( 'author_id' , self . author_id ), ( 'room_id' , self . room_id ), ( 'author' , repr ( self . author )) ] return '<Typing {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ))","title":"Hiven Types"},{"location":"reference/types.html#hiven-types","text":"Important Note that each type has a property that is cached ! Meaning when you access one, it is stored forever without any changes (deletions or updates) being applied to it. For example: When you access the rooms property of the House class and use it for a longer time and in the meantime one of them gets deleted. The library will be unable to correctly delete it, since it's now stored by the user themselves. Therefore watch out for the proper existance! In the next releases a property exists() will be added to validate the existance of objects to not possibly use an outdated one!","title":"Hiven Types"},{"location":"reference/types.html#list-of-represented-types","text":"List of Type Description Attachment Represents a Hiven message attachment containing a file Context Represents a Command Context for a triggered command that was registered prior Embed Represents an embed message object either customised or from a website Entity Represents a Hiven Entity inside a House which can contain Rooms Feed Represents the feed that is displayed on Hiven specifically for the user House Represents a Hiven House which can contain rooms and entities LazyHouse Represents a Hiven House which can contain rooms and entities (Lazy) Invite Represents an Invite to a Hiven House Member Represents a House Member on Hiven which contains the Hiven User, role-data and member-data Mention Represents an mention for a user in Hiven DeletedMessage Represents a Deleted Message in a Room Message Represents a standard Hiven message sent by a user PrivateRoom Represents a private chat room with only one user PrivateGroupRoom Represents a private group chat room with multiple users Relationship Represents a user-relationship with another user or bot TextRoom Represents a Hiven Room inside a House User Represents the standard Hiven User LazyUser Represents the standard Hiven User (Lazy) UserTyping Represents a Hiven User typing in a room","title":"List of represented Types"},{"location":"reference/types.html#openhivenpy.types.attachment.Attachment","text":"Represents a Hiven Message Attachment containing a file","title":"Attachment"},{"location":"reference/types.html#openhivenpy.types.attachment.Attachment-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.attachment.Attachment.filename","text":"Name of the file","title":"filename"},{"location":"reference/types.html#openhivenpy.types.attachment.Attachment.media_url","text":"Media-url to access the file","title":"media_url"},{"location":"reference/types.html#openhivenpy.types.attachment.Attachment.raw","text":"The raw data dictionary received over the Swarm","title":"raw"},{"location":"reference/types.html#openhivenpy.types.attachment.Attachment-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.attachment.Attachment.__init__","text":"Represents a Hiven Message Attachment containing a file Parameters: Name Type Description Default data dict Data that should be used to create the object required client HivenClient The HivenClient required Source code in openhivenpy\\types\\attachment.py @log_type_exception ( 'Attachment' ) def __init__ ( self , data : dict , client : HivenClient ): \"\"\" Represents a Hiven Message Attachment containing a file :param data: Data that should be used to create the object :param client: The HivenClient \"\"\" super () . __init__ () self . _filename = data . get ( 'filename' ) self . _media_url = data . get ( 'media_url' ) self . _raw = data . get ( 'raw' ) self . _client = client","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data","text":"Validates the data and appends data if it iis missing that would be required for the creation of an instance. Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\attachment.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it iis missing that would be required for the creation of an instance. :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data [ 'raw' ] = { ** data . pop ( 'raw' , {}), ** data } return cls . validate ( data )","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.attachment.Attachment.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.context.Context","text":"Represents a Command Context for a triggered command that was registered prior","title":"Context"},{"location":"reference/types.html#openhivenpy.types.context.Context-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.context.Context.author","text":"Author object of the Context Class","title":"author"},{"location":"reference/types.html#openhivenpy.types.context.Context.author_id","text":"ID of the author","title":"author_id"},{"location":"reference/types.html#openhivenpy.types.context.Context.house","text":"House object of the Context Class","title":"house"},{"location":"reference/types.html#openhivenpy.types.context.Context.house_id","text":"ID of the room","title":"house_id"},{"location":"reference/types.html#openhivenpy.types.context.Context.room","text":"Room object of the Context Class","title":"room"},{"location":"reference/types.html#openhivenpy.types.context.Context.room_id","text":"ID of the room","title":"room_id"},{"location":"reference/types.html#openhivenpy.types.context.Context.timestamp","text":"Time-stamp of the message - when the command was received","title":"timestamp"},{"location":"reference/types.html#openhivenpy.types.context.Context-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.context.Context.__init__","text":"Represents a Command Context for a triggered command that was registered prior Parameters: Name Type Description Default data dict Data that should be used to create the object required client HivenClient The HivenClient required Source code in openhivenpy\\types\\context.py @log_type_exception ( 'Context' ) def __init__ ( self , data : dict , client : HivenClient ): \"\"\" Represents a Command Context for a triggered command that was registered prior :param data: Data that should be used to create the object :param client: The HivenClient \"\"\" super () . __init__ () self . _room = data . get ( 'room' ) self . _room_id = data . get ( 'room_id' ) self . _author = data . get ( 'author' ) self . _author_id = data . get ( 'author_id' ) self . _house = data . get ( 'house' ) self . _house_id = data . get ( 'house_id' ) self . _timestamp = data . get ( 'timestamp' ) self . _client = client","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.context.Context.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\context.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = cls . validate ( data ) data [ 'timestamp' ] = utils . safe_convert ( int , data . get ( 'timestamp' )) if not data . get ( 'room_id' ) and data . get ( 'room' ): room = data . pop ( 'room' ) if type ( room ) is dict : room = room . get ( 'id' , None ) elif isinstance ( room , DataClassObject ): room = getattr ( room , 'id' , None ) else : room = None if room is None : raise InvalidPassedDataError ( \"The passed room is not in the correct format!\" , data = data ) else : data [ 'room_id' ] = room if not data . get ( 'house_id' ) and data . get ( 'house' ): house = data . pop ( 'house' ) if type ( house ) is dict : house = house . get ( 'id' , None ) elif isinstance ( house , DataClassObject ): house = getattr ( house , 'id' , None ) else : house = None if house is None : raise InvalidPassedDataError ( \"The passed house is not in the correct format!\" , data = data ) else : data [ 'house_id' ] = house if not data . get ( 'author_id' ) and data . get ( 'author' ): author = data . pop ( 'author' ) if type ( author ) is dict : author = author . get ( 'id' , None ) elif isinstance ( author , DataClassObject ): author = getattr ( author , 'id' , None ) else : author = None if author is None : raise InvalidPassedDataError ( \"The passed author is not in the correct format!\" , data = data ) else : data [ 'author_id' ] = author data [ 'room' ] = data [ 'room_id' ] data [ 'author' ] = data [ 'author_id' ] data [ 'house' ] = data [ 'house_id' ] return data","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.context.Context.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.embed.Embed","text":"Represents an embed message object. This can represent an either customised embed or fetched embed from a website","title":"Embed"},{"location":"reference/types.html#openhivenpy.types.embed.Embed-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.embed.Embed.description","text":"The description of the embed, if it has one","title":"description"},{"location":"reference/types.html#openhivenpy.types.embed.Embed.image","text":"The URL to the image of the embed","title":"image"},{"location":"reference/types.html#openhivenpy.types.embed.Embed.title","text":"The title of the embed","title":"title"},{"location":"reference/types.html#openhivenpy.types.embed.Embed.type","text":"The type of the Embed","title":"type"},{"location":"reference/types.html#openhivenpy.types.embed.Embed.url","text":"The URL of the embed, if it's a web embed","title":"url"},{"location":"reference/types.html#openhivenpy.types.embed.Embed-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.embed.Embed.__init__","text":"Represents an embed message object either customised or from a website Parameters: Name Type Description Default data dict Data that should be used to create the object required client HivenClient The HivenClient required Source code in openhivenpy\\types\\embed.py @log_type_exception ( 'Embed' ) def __init__ ( self , data : dict , client : HivenClient ): \"\"\" Represents an embed message object either customised or from a website :param data: Data that should be used to create the object :param client: The HivenClient \"\"\" super () . __init__ () self . _url = data . get ( 'url' ) self . _type = data . get ( 'type' ) self . _title = data . get ( 'title' ) self . _image = data . get ( 'image' ) self . _description = data . get ( 'description' ) self . _client = client","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\embed.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" return cls . validate ( data )","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.embed.Embed.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.entity.Entity","text":"Represents a Hiven Entity inside a House which can contain Rooms","title":"Entity"},{"location":"reference/types.html#openhivenpy.types.entity.Entity-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.entity.Entity.house","text":"House object of the entity","title":"house"},{"location":"reference/types.html#openhivenpy.types.entity.Entity.house_id","text":"ID of the House parent of the Entity","title":"house_id"},{"location":"reference/types.html#openhivenpy.types.entity.Entity.id","text":"ID of the entity","title":"id"},{"location":"reference/types.html#openhivenpy.types.entity.Entity.name","text":"Name of the entity","title":"name"},{"location":"reference/types.html#openhivenpy.types.entity.Entity.position","text":"Position on the sidebar of the Room","title":"position"},{"location":"reference/types.html#openhivenpy.types.entity.Entity.resource_pointers","text":"Objects contained inside the entity. If dict is returned it's a type that is not yet included in the lib","title":"resource_pointers"},{"location":"reference/types.html#openhivenpy.types.entity.Entity.type","text":"Type of the entity","title":"type"},{"location":"reference/types.html#openhivenpy.types.entity.Entity-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.entity.Entity.__init__","text":"Represents a Hiven Entity inside a House which can contain Rooms Parameters: Name Type Description Default data dict Data that should be used to create the object required client HivenClient The HivenClient required Source code in openhivenpy\\types\\entity.py @log_type_exception ( 'Entity' ) def __init__ ( self , data : dict , client : HivenClient ): \"\"\" Represents a Hiven Entity inside a House which can contain Rooms :param data: Data that should be used to create the object :param client: The HivenClient \"\"\" super () . __init__ () self . _type = data . get ( 'type' ) self . _position = data . get ( 'position' ) self . _resource_pointers = data . get ( 'resource_pointers' ) self . _name = data . get ( 'name' ) self . _id = data . get ( 'id' ) self . _house_id = data . get ( 'house_id' ) self . _house = data . get ( 'house' ) self . _client = client","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.entity.Entity.__repr__","text":"Source code in openhivenpy\\types\\entity.py def __repr__ ( self ) -> str : info = [ ( 'name' , self . name ), ( 'id' , self . id ), ( 'position' , self . position ), ( 'type' , self . type ) ] return '<Entity {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ))","title":"__repr__()"},{"location":"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\entity.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" if not data . get ( 'house_id' ) and data . get ( 'house' ): house = data . pop ( 'house' ) if type ( house ) is dict : house_id = house . get ( 'id' ) elif isinstance ( house , DataClassObject ): house_id = getattr ( house , 'id' , None ) else : house_id = None if house_id is None : raise InvalidPassedDataError ( \"The passed house is not in the correct format!\" , data = data ) else : data [ 'house_id' ] = house_id data [ 'house' ] = data . get ( 'house_id' ) data = cls . validate ( data ) return data","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data","text":"Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. Source code in openhivenpy\\types\\entity.py def get_cached_data ( self ) -> Optional [ dict ]: \"\"\" Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. \"\"\" return self . _client . find_entity ( self . id )","title":"get_cached_data()"},{"location":"reference/types.html#openhivenpy.types.entity.Entity.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.feed.Feed","text":"Represents the feed that is displayed on Hiven specifically for the user","title":"Feed"},{"location":"reference/types.html#openhivenpy.types.feed.Feed.__init__","text":"Source code in openhivenpy\\types\\feed.py @log_type_exception ( 'Feed' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ ()","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.feed.Feed.__repr__","text":"Source code in openhivenpy\\types\\feed.py def __repr__ ( self ) -> str : info = [ ( 'unknown' , \"\" ) ] return '<Feed {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ))","title":"__repr__()"},{"location":"reference/types.html#openhivenpy.types.feed.Feed.__str__","text":"Source code in openhivenpy\\types\\feed.py def __str__ ( self ) -> str : return repr ( self ) Important The class LazyHouse is inherited into the class House , meaning all properties of the LazyHouse class are also available in the standard House class","title":"__str__()"},{"location":"reference/types.html#openhivenpy.types.house.House","text":"Represents a Hiven House which can contain rooms and entities","title":"House"},{"location":"reference/types.html#openhivenpy.types.house.House-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.house.House.banner","text":"The banner of the House","title":"banner"},{"location":"reference/types.html#openhivenpy.types.house.House.client_member","text":"The logged-in client as the member object","title":"client_member"},{"location":"reference/types.html#openhivenpy.types.house.House.default_permissions","text":"Returns the default permissions for this House","title":"default_permissions"},{"location":"reference/types.html#openhivenpy.types.house.House.entities","text":"A list of the entities in this House","title":"entities"},{"location":"reference/types.html#openhivenpy.types.house.House.members","text":"A list of members in this house","title":"members"},{"location":"reference/types.html#openhivenpy.types.house.House.owner","text":"Owner Object of this House","title":"owner"},{"location":"reference/types.html#openhivenpy.types.house.House.roles","text":"A list of the roles in this House","title":"roles"},{"location":"reference/types.html#openhivenpy.types.house.House.users","text":"A list of members in this house. Alias for members","title":"users"},{"location":"reference/types.html#openhivenpy.types.house.House-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.house.House.__init__","text":"Source code in openhivenpy\\types\\house.py @log_type_exception ( 'House' ) def __init__ ( self , data : dict , client : HivenClient ): self . _roles = data . get ( 'roles' ) self . _roles_data = self . _roles self . _entities : list = data . get ( 'entities' ) self . _default_permissions = data . get ( 'default_permissions' ) self . _members : dict = data . get ( 'members' ) self . _member_data = self . _members self . _client_member = data . get ( 'client_member' ) self . _banner = data . get ( 'banner' ) self . _owner = data . get ( 'owner' ) self . _client = client super () . __init__ ( data , client )","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.house.House.create_entity","text":"Creates a entity in the house with the specified name. Parameters: Name Type Description Default name str The name of the new entity required Returns: Type Description Optional[Entity] The newly created Entity Instance Source code in openhivenpy\\types\\house.py async def create_entity ( self , name : str ) -> Optional [ Entity ]: \"\"\" Creates a entity in the house with the specified name. :param name: The name of the new entity :return: The newly created Entity Instance \"\"\" try : resp = await self . _client . http . post ( endpoint = f \"/houses/ { self . id } /entities\" , json = { 'name' : name , 'type' : 1 } ) raw_data = await resp . json () data = raw_data . get ( 'data' ) # Fetching all existing ids existing_entity_ids = [ e [ 'id' ] for e in self . entities ] for d in data : id_ = d . get ( 'id' ) if id_ not in existing_entity_ids : d = Entity . format_obj_data ( d ) _entity = Entity ( d , self . _client ) self . _entities . append ( _entity ) return _entity except Exception as e : utils . log_traceback ( brief = f \"Failed to create category ' { name } ' in house { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e","title":"create_entity()"},{"location":"reference/types.html#openhivenpy.types.house.House.create_invite","text":"Creates an invite for the current house. Parameters: Name Type Description Default max_uses int Maximal uses for the invite code required Returns: Type Description Optional[Invite] The invite url if successful. Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\house.py async def create_invite ( self , max_uses : int ) -> Optional [ Invite ]: \"\"\" Creates an invite for the current house. :param max_uses: Maximal uses for the invite code :return: The invite url if successful. :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : from . import Invite resp = await self . _client . http . post ( endpoint = f \"/houses/ { self . id } /invites\" , json = { \"max_uses\" : max_uses } ) raw_data = await resp . json () data = raw_data . get ( 'data' ) data = Invite . format_obj_data ( data ) return Invite ( data , self . _client ) except Exception as e : utils . log_traceback ( brief = f \"Failed to create invite for house { repr ( self ) } \" , exc_info = sys . exc_info () ) raise e","title":"create_invite()"},{"location":"reference/types.html#openhivenpy.types.house.House.create_room","text":"Creates a Room in the house with the specified name. Returns: Type Description Optional[TextRoom] A Room Instance for the Hiven Room that was created if successful Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\house.py async def create_room ( self , name : str , parent_entity_id : Optional [ int ] = None ) -> Optional [ TextRoom ]: \"\"\" Creates a Room in the house with the specified name. :return: A Room Instance for the Hiven Room that was created if successful :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : from . import TextRoom default_entity = utils . get ( self . entities , name = \"Rooms\" ) json = { 'name' : name , 'parent_entity_id' : parent_entity_id if parent_entity_id else default_entity . id } # Creating the room using the api resp = await self . _client . http . post ( f \"/houses/ { self . _id } /rooms\" , json = json ) raw_data = await resp . json () data = TextRoom . format_obj_data ( raw_data . get ( 'data' )) return TextRoom ( data , self . _client ) except Exception as e : utils . log_traceback ( brief = f \"Failed to create room ' { name } ' in house { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e","title":"create_room()"},{"location":"reference/types.html#openhivenpy.types.house.House.delete","text":"Deletes the house if permissions are sufficient! Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\house.py async def delete ( self ) -> None : \"\"\" Deletes the house if permissions are sufficient! :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : await self . _client . http . delete ( f \"/houses/ { self . id } \" ) except Exception as e : utils . log_traceback ( brief = f \"Failed to delete House { repr ( self ) } \" , exc_info = sys . exc_info () ) raise e","title":"delete()"},{"location":"reference/types.html#openhivenpy.types.house.House.edit","text":"Changes the houses data on Hiven. Available options: name, icon(base64) Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\house.py async def edit ( self , ** kwargs ) -> None : \"\"\" Changes the houses data on Hiven. Available options: name, icon(base64) :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : for key , data in kwargs . items (): if key in [ 'name' ]: await self . _client . http . patch ( endpoint = f \"/houses/ { self . id } \" , json = { key : data } ) else : raise NameError ( \"The passed value does not exist in the House!\" ) except Exception as e : keys = \"\" . join ( key + \" \" for key in kwargs . keys () ) if kwargs != {} else '' utils . log_traceback ( brief = f \"Failed edit request of values ' { keys } ' in house { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e","title":"edit()"},{"location":"reference/types.html#openhivenpy.types.house.House.find_entity","text":"Fetches the raw data of a entity Parameters: Name Type Description Default entity_id str The id of the entity which should be fetched required Returns: Type Description Optional[dict] The data in the cache if it was found Source code in openhivenpy\\types\\house.py def find_entity ( self , entity_id : str ) -> Optional [ dict ]: \"\"\" Fetches the raw data of a entity :param entity_id: The id of the entity which should be fetched :return: The data in the cache if it was found \"\"\" return self . _client . find_entity ( entity_id )","title":"find_entity()"},{"location":"reference/types.html#openhivenpy.types.house.House.find_member","text":"Fetches the raw data of a member Parameters: Name Type Description Default member_id str The id of the Member which should be fetched required Returns: Type Description Optional[dict] The dictionary of the member if it was found Source code in openhivenpy\\types\\house.py def find_member ( self , member_id : str ) -> Optional [ dict ]: \"\"\" Fetches the raw data of a member :param member_id: The id of the Member which should be fetched :return: The dictionary of the member if it was found \"\"\" return self . _client . find_house_member ( member_id , self . id )","title":"find_member()"},{"location":"reference/types.html#openhivenpy.types.house.House.find_room","text":"Fetches the raw data of a room Parameters: Name Type Description Default room_id str The id of the room which should be fetched required Returns: Type Description Optional[dict] The data in the cache if it was found Source code in openhivenpy\\types\\house.py def find_room ( self , room_id : str ) -> Optional [ dict ]: \"\"\" Fetches the raw data of a room :param room_id: The id of the room which should be fetched :return: The data in the cache if it was found \"\"\" return self . _client . find_room ( room_id )","title":"find_room()"},{"location":"reference/types.html#openhivenpy.types.house.House.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\house.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = LazyHouse . format_obj_data ( data ) data = cls . validate ( data ) return data","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.house.House.get_entity","text":"Fetches a entity from the cache based on the id Returns: Type Description Optional[Entity] The Entity Instance if it exists else returns None Source code in openhivenpy\\types\\house.py def get_entity ( self , entity_id : str ) -> Optional [ Entity ]: \"\"\" Fetches a entity from the cache based on the id :return: The Entity Instance if it exists else returns None \"\"\" return self . _client . get_entity ( entity_id )","title":"get_entity()"},{"location":"reference/types.html#openhivenpy.types.house.House.get_member","text":"Fetches a member from the cache based on the id Parameters: Name Type Description Default member_id str The id of the Member which should be fetched required Returns: Type Description Optional[Member] The Member Instance if it exists else returns None Source code in openhivenpy\\types\\house.py def get_member ( self , member_id : str ) -> Optional [ Member ]: \"\"\" Fetches a member from the cache based on the id :param member_id: The id of the Member which should be fetched :return: The Member Instance if it exists else returns None \"\"\" return self . _client . get_house_member ( member_id , self . id )","title":"get_member()"},{"location":"reference/types.html#openhivenpy.types.house.House.get_room","text":"Fetches a room from the cache based on the id Returns: Type Description Optional[TextRoom] The Room Instance if it exists else returns None Source code in openhivenpy\\types\\house.py def get_room ( self , room_id : str ) -> Optional [ TextRoom ]: \"\"\" Fetches a room from the cache based on the id :return: The Room Instance if it exists else returns None \"\"\" return self . _client . get_room ( room_id )","title":"get_room()"},{"location":"reference/types.html#openhivenpy.types.house.House.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.house.House.leave","text":"Leaves the house Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\house.py async def leave ( self ) -> None : \"\"\" Leaves the house :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : await self . _client . http . delete ( endpoint = f \"/users/@me/houses/ { self . id } \" ) except Exception as e : utils . log_traceback ( brief = f \"Failed to leave { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e","title":"leave()"},{"location":"reference/types.html#openhivenpy.types.house.LazyHouse","text":"Represents a Hiven House which can contain rooms and entities Note! This class is a lazy class and does not have every available data! Consider fetching for more data the regular house object with HivenClient.get_house()","title":"LazyHouse"},{"location":"reference/types.html#openhivenpy.types.house.LazyHouse-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.house.LazyHouse.icon","text":"URL to the ICON of this house. None if it doesn't exist","title":"icon"},{"location":"reference/types.html#openhivenpy.types.house.LazyHouse.id","text":"Id of the House","title":"id"},{"location":"reference/types.html#openhivenpy.types.house.LazyHouse.name","text":"Name of the House","title":"name"},{"location":"reference/types.html#openhivenpy.types.house.LazyHouse.owner_id","text":"Owner user-id of this House","title":"owner_id"},{"location":"reference/types.html#openhivenpy.types.house.LazyHouse.rooms","text":"List of all rooms in the house","title":"rooms"},{"location":"reference/types.html#openhivenpy.types.house.LazyHouse.type","text":"Type of the House","title":"type"},{"location":"reference/types.html#openhivenpy.types.house.LazyHouse-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.house.LazyHouse.__init__","text":"Represents a Hiven House which can contain rooms and entities Parameters: Name Type Description Default data dict Data that should be used to create the object required client HivenClient The HivenClient required Source code in openhivenpy\\types\\house.py @log_type_exception ( 'LazyHouse' ) def __init__ ( self , data : dict , client : HivenClient ): \"\"\" Represents a Hiven House which can contain rooms and entities :param data: Data that should be used to create the object :param client: The HivenClient \"\"\" super () . __init__ () self . _id = data . get ( 'id' ) self . _name = data . get ( 'name' ) self . _icon = data . get ( 'icon' ) self . _owner_id = data . get ( 'owner_id' ) self . _owner = data . get ( 'owner' ) self . _rooms = data . get ( 'rooms' ) self . _type = data . get ( 'type' ) self . _client = client","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__","text":"Source code in openhivenpy\\types\\house.py def __repr__ ( self ) -> str : info = [ ( 'name' , self . name ), ( 'id' , self . id ), ( 'owner_id' , self . owner_id ) ] return '<House {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ))","title":"__repr__()"},{"location":"reference/types.html#openhivenpy.types.house.LazyHouse.__str__","text":"Source code in openhivenpy\\types\\house.py def __str__ ( self ): return self . name","title":"__str__()"},{"location":"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Only exceptions are member objects which are unique in every house Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\house.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Only exceptions are member objects which are unique in every house :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = cls . validate ( data ) if not data . get ( 'owner_id' ) and data . get ( 'owner' ): owner = data . pop ( 'owner' ) if type ( owner ) is dict : owner_id = owner . get ( 'id' ) elif isinstance ( owner , DataClassObject ): owner_id = getattr ( owner , 'id' , None ) else : owner_id = None if owner_id is None : raise InvalidPassedDataError ( \"The passed owner is not in the correct format!\" , data = data ) else : data [ 'owner_id' ] = owner_id if type ( data . get ( 'members' )) is list : members = data [ 'members' ] data [ 'members' ] = {} for member_ in members : id_ = member_ [ 'user_id' ] if member_ . get ( 'user_id' ) \\ else member_ . get ( 'user' , {}) . get ( 'id' ) data [ 'members' ][ id_ ] = utils . update_and_return ( member_ , user = id_ # replacing the object with an id ref ) if type ( data . get ( 'roles' )) is list : roles = data [ 'roles' ] data [ 'roles' ] = {} for role in roles : id_ = role . get ( 'id' ) data [ 'roles' ][ id_ ] = role if type ( data . get ( 'rooms' )) is list : data [ 'rooms' ] = [ i [ 'id' ] for i in data [ 'rooms' ]] if type ( data . get ( 'entities' )) is list : data [ 'entities' ] = [ i [ 'id' ] for i in data [ 'entities' ]] data [ 'owner' ] = data [ 'owner_id' ] return data","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data","text":"Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. Source code in openhivenpy\\types\\house.py def get_cached_data ( self ) -> Optional [ dict ]: \"\"\" Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. \"\"\" return self . _client . find_house ( self . id )","title":"get_cached_data()"},{"location":"reference/types.html#openhivenpy.types.house.LazyHouse.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.invite.Invite","text":"Represents an Invite to a Hiven House","title":"Invite"},{"location":"reference/types.html#openhivenpy.types.invite.Invite.code","text":"","title":"code"},{"location":"reference/types.html#openhivenpy.types.invite.Invite.created_at","text":"","title":"created_at"},{"location":"reference/types.html#openhivenpy.types.invite.Invite.house","text":"","title":"house"},{"location":"reference/types.html#openhivenpy.types.invite.Invite.house_id","text":"","title":"house_id"},{"location":"reference/types.html#openhivenpy.types.invite.Invite.house_members","text":"","title":"house_members"},{"location":"reference/types.html#openhivenpy.types.invite.Invite.max_age","text":"","title":"max_age"},{"location":"reference/types.html#openhivenpy.types.invite.Invite.max_uses","text":"","title":"max_uses"},{"location":"reference/types.html#openhivenpy.types.invite.Invite.type","text":"","title":"type"},{"location":"reference/types.html#openhivenpy.types.invite.Invite.url","text":"","title":"url"},{"location":"reference/types.html#openhivenpy.types.invite.Invite-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.invite.Invite.__init__","text":"Source code in openhivenpy\\types\\invite.py @log_type_exception ( 'Invite' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _code = data . get ( 'code' ) self . _url = data . get ( 'url' ) self . _created_at = data . get ( 'created_at' ) self . _house_id = data . get ( 'house_id' ) self . _max_age = data . get ( 'max_age' ) self . _max_uses = data . get ( 'max_uses' ) self . _type = data . get ( 'type' ) self . _house = data . get ( 'house' ) self . _house_members = data . get ( 'house_members' ) self . _client = client","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.invite.Invite.__repr__","text":"Source code in openhivenpy\\types\\invite.py def __repr__ ( self ) -> str : info = [ ( 'code' , self . code ), ( 'url' , self . url ), ( 'created_at' , self . created_at ), ( 'house_id' , self . house_id ), ( 'type' , self . type ), ( 'max_age' , self . max_age ), ( 'max_uses' , self . max_uses ), ] return '<Invite {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ))","title":"__repr__()"},{"location":"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\invite.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" if data . get ( 'invite' ) is not None : invite = data . get ( 'invite' ) else : invite = data data [ 'code' ] = invite . get ( 'code' ) data [ 'url' ] = \"https://hiven.house/ {} \" . format ( data [ 'code' ]) data [ 'created_at' ] = invite . get ( 'created_at' ) data [ 'max_age' ] = invite . get ( 'max_age' ) data [ 'max_uses' ] = invite . get ( 'max_uses' ) data [ 'type' ] = invite . get ( 'type' ) data [ 'house_members' ] = data . get ( 'counts' , {}) . get ( 'house_members' ) if not invite . get ( 'house_id' ) and invite . get ( 'house' ): house = invite . pop ( 'house' ) if type ( house ) is dict : house_id = house . get ( 'id' ) elif isinstance ( house , DataClassObject ): house_id = getattr ( house , 'id' , None ) else : house_id = None if house_id is None : raise InvalidPassedDataError ( \"The passed house is not in the correct format!\" , data = data ) else : data [ 'house_id' ] = house_id data [ 'type' ] = int ( data [ 'type' ]) data [ 'house' ] = data . get ( 'house_id' ) data = cls . validate ( data ) return data","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.invite.Invite.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.member.Member","text":"Represents a House Member on Hiven which contains the Hiven User, role-data and member-data","title":"Member"},{"location":"reference/types.html#openhivenpy.types.member.Member-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.member.Member.house","text":"Parent House object instance of this class","title":"house"},{"location":"reference/types.html#openhivenpy.types.member.Member.house_id","text":"Returns the ID of the parent House","title":"house_id"},{"location":"reference/types.html#openhivenpy.types.member.Member.id","text":"User-ID of the member. Alias for user_id","title":"id"},{"location":"reference/types.html#openhivenpy.types.member.Member.joined_at","text":"Joined at date (unix-timestamp probably)","title":"joined_at"},{"location":"reference/types.html#openhivenpy.types.member.Member.joined_house_at","text":"Joined at date (unix-timestamp probably). Alias for joined_at","title":"joined_house_at"},{"location":"reference/types.html#openhivenpy.types.member.Member.roles","text":"Returns the roles of the Member","title":"roles"},{"location":"reference/types.html#openhivenpy.types.member.Member.user_id","text":"User-ID of the member","title":"user_id"},{"location":"reference/types.html#openhivenpy.types.member.Member-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.member.Member.__init__","text":"Source code in openhivenpy\\types\\member.py @log_type_exception ( 'Member' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ ( data . get ( 'user' ), client ) data = { ** data . get ( 'user' ), ** data } self . _user_id = data . get ( 'user_id' ) self . _house_id = data . get ( 'house_id' ) self . _joined_at = data . get ( 'joined_at' ) self . _roles = data . get ( 'roles' ) self . _house = data . get ( 'house' )","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.member.Member.__repr__","text":"Source code in openhivenpy\\types\\member.py def __repr__ ( self ) -> str : info = [ ( 'username' , self . username ), ( 'name' , self . name ), ( 'id' , self . id ), ( 'icon' , self . icon ), ( 'header' , self . header ), ( 'bot' , self . bot ), ( 'house_id' , self . house_id ), ( 'joined_house_at' , self . joined_house_at ) ] return '<Member {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ))","title":"__repr__()"},{"location":"reference/types.html#openhivenpy.types.member.Member.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\member.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" if not data . get ( 'house_id' ) and data . get ( 'house' ): house = data . pop ( 'house' ) if type ( house ) is dict : house_id = house . get ( 'id' ) elif isinstance ( house , DataClassObject ): house_id = getattr ( house , 'id' , None ) else : house_id = None if house_id is None : raise InvalidPassedDataError ( \"The passed house is not in the correct format!\" , data = data ) else : data [ 'house_id' ] = house_id elif not data . get ( 'house_id' ) and not data . get ( 'house' ): raise InvalidPassedDataError ( \"house_id and house missing from required data\" , data = data ) data [ 'house' ] = data . get ( 'house_id' ) data = cls . validate ( data ) return data","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.member.Member.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.member.Member.kick","text":"Kicks a user from the house. Exceptions: Type Description HTTPError If any HTTP error is raised while executing Forbidden If the client does not have the permissions to execute this command Source code in openhivenpy\\types\\member.py async def kick ( self ) -> None : \"\"\" Kicks a user from the house. :raise HTTPError: If any HTTP error is raised while executing :raises Forbidden: If the client does not have the permissions to execute this command \"\"\" try : endpoint = f \"/ { self . _house_id } /members/ { self . _user_id } \" await self . _client . http . delete ( endpoint ) except ( HTTPForbiddenError , HTTPFailedRequestError ) as e : utils . log_traceback ( brief = f \"Failed to kick the member due to an exception \" \"occurring:\" , exc_info = sys . exc_info () ) raise e","title":"kick()"},{"location":"reference/types.html#openhivenpy.types.mention.Mention","text":"Represents an mention for a user in Hiven","title":"Mention"},{"location":"reference/types.html#openhivenpy.types.mention.Mention-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.mention.Mention.author","text":"The author of the message containing the mention","title":"author"},{"location":"reference/types.html#openhivenpy.types.mention.Mention.author_id","text":"","title":"author_id"},{"location":"reference/types.html#openhivenpy.types.mention.Mention.timestamp","text":"Returns the timestamp when the mention was made","title":"timestamp"},{"location":"reference/types.html#openhivenpy.types.mention.Mention.user","text":"Returns the User mentioned","title":"user"},{"location":"reference/types.html#openhivenpy.types.mention.Mention.user_id","text":"The id of the user mentioned","title":"user_id"},{"location":"reference/types.html#openhivenpy.types.mention.Mention-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.mention.Mention.__init__","text":"Source code in openhivenpy\\types\\mention.py @log_type_exception ( 'Mention' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _timestamp = data . get ( 'timestamp' ) self . _user = data . get ( 'user' ) self . _user_id = data . get ( 'user_id' ) self . _author = data . get ( 'author' ) self . _author_id = data . get ( 'author_id' ) self . _client = client","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\mention.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" if not data . get ( 'user_id' ) and data . get ( 'user' ): user = data . pop ( 'user' ) if type ( user ) is dict : user = user . get ( 'id' , None ) elif isinstance ( user , DataClassObject ): user = getattr ( user , 'id' , None ) else : user = None if user is None : raise InvalidPassedDataError ( \"The passed user is not in the correct format!\" , data = data ) else : data [ 'user' ] = user if not data . get ( 'author_id' ) and data . get ( 'author' ): author = data . pop ( 'author' ) if type ( author ) is dict : author = author . get ( 'id' , None ) elif isinstance ( author , DataClassObject ): author = getattr ( author , 'id' , None ) else : author = None if author is None : raise InvalidPassedDataError ( \"The passed author is not in the correct format!\" , data = data ) else : data [ 'author' ] = author data [ 'author' ] = data . get ( 'author_id' ) data [ 'user' ] = data . get ( 'user_id' ) data = cls . validate ( data ) return data","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.mention.Mention.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.message.DeletedMessage","text":"Represents a Deleted Message in a Room","title":"DeletedMessage"},{"location":"reference/types.html#openhivenpy.types.message.DeletedMessage-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.message.DeletedMessage.house_id","text":"ID of the original house (None if it does not exist)","title":"house_id"},{"location":"reference/types.html#openhivenpy.types.message.DeletedMessage.message_id","text":"ID of the original message","title":"message_id"},{"location":"reference/types.html#openhivenpy.types.message.DeletedMessage.room_id","text":"ID of the original room (can be private)","title":"room_id"},{"location":"reference/types.html#openhivenpy.types.message.DeletedMessage-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__","text":"Source code in openhivenpy\\types\\message.py @log_type_exception ( 'DeletedMessage' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _message_id = data . get ( 'message_id' ) self . _house_id = data . get ( 'house_id' ) self . _room_id = data . get ( 'room_id' ) self . _client = client","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.message.DeletedMessage.__str__","text":"Source code in openhivenpy\\types\\message.py def __str__ ( self ): return f \"Deleted message in room { self . room_id } \"","title":"__str__()"},{"location":"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\message.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = cls . validate ( data ) data [ 'message_id' ] = data [ 'id' ] return data","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.message.DeletedMessage.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.message.Message","text":"Represents a standard Hiven message sent by a user","title":"Message"},{"location":"reference/types.html#openhivenpy.types.message.Message-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.message.Message.attachment","text":"Returns the Attachment of the message, if it has one","title":"attachment"},{"location":"reference/types.html#openhivenpy.types.message.Message.author","text":"Returns the Author parent object instance","title":"author"},{"location":"reference/types.html#openhivenpy.types.message.Message.author_id","text":"ID of the parent Author","title":"author_id"},{"location":"reference/types.html#openhivenpy.types.message.Message.bucket","text":"Returns the bucket of the message","title":"bucket"},{"location":"reference/types.html#openhivenpy.types.message.Message.content","text":"Returns the string content of the message","title":"content"},{"location":"reference/types.html#openhivenpy.types.message.Message.device_id","text":"Returns the device id of the author of the message","title":"device_id"},{"location":"reference/types.html#openhivenpy.types.message.Message.edited_at","text":"Returns the date the message was edited (unix-timestamp)","title":"edited_at"},{"location":"reference/types.html#openhivenpy.types.message.Message.embed","text":"Returns the Embed of the message, if it has one","title":"embed"},{"location":"reference/types.html#openhivenpy.types.message.Message.exploding","text":"Returns whether the message is exploding","title":"exploding"},{"location":"reference/types.html#openhivenpy.types.message.Message.exploding_age","text":"Returns the exploding age of the message","title":"exploding_age"},{"location":"reference/types.html#openhivenpy.types.message.Message.house","text":"Returns the House parent object, if the message was sent inside a House","title":"house"},{"location":"reference/types.html#openhivenpy.types.message.Message.house_id","text":"Returns the id of the House parent object, if the message was sent inside a House","title":"house_id"},{"location":"reference/types.html#openhivenpy.types.message.Message.id","text":"ID of the message","title":"id"},{"location":"reference/types.html#openhivenpy.types.message.Message.is_house_message","text":"Returns whether the message was sent inside a House","title":"is_house_message"},{"location":"reference/types.html#openhivenpy.types.message.Message.mentions","text":"Returns the mentions of the message","title":"mentions"},{"location":"reference/types.html#openhivenpy.types.message.Message.recipient_ids","text":"A list of all recipients in the room - unique for the private rooms","title":"recipient_ids"},{"location":"reference/types.html#openhivenpy.types.message.Message.room","text":"Returns the Room parent object the message was sent in","title":"room"},{"location":"reference/types.html#openhivenpy.types.message.Message.room_id","text":"Returns the id of the Room parent object","title":"room_id"},{"location":"reference/types.html#openhivenpy.types.message.Message.timestamp","text":"Returns the date the message was created (unix-timestamp)","title":"timestamp"},{"location":"reference/types.html#openhivenpy.types.message.Message.type","text":"Returns the type of the message","title":"type"},{"location":"reference/types.html#openhivenpy.types.message.Message-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.message.Message.__init__","text":"Source code in openhivenpy\\types\\message.py @log_type_exception ( 'Message' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _id = data . get ( 'id' ) self . _author = data . get ( 'author' ) self . _author_id = data . get ( 'author_id' ) self . _attachment : Union [ dict , Attachment ] = data . get ( 'attachment' ) self . _content = data . get ( 'content' ) self . _timestamp = data . get ( 'timestamp' ) self . _edited_at = data . get ( 'edited_at' ) self . _mentions = data . get ( 'mentions' ) # I believe, 0 = normal message, 1 = system. self . _type = data . get ( 'type' ) self . _exploding = data . get ( 'exploding' ) self . _house_id = data . get ( 'house_id' ) self . _house = data . get ( 'house' ) self . _room_id = data . get ( 'room_id' ) self . _room = data . get ( 'room' ) self . _embed = data . get ( 'embed' ) self . _bucket = data . get ( 'bucket' ) self . _device_id = data . get ( 'device_id' ) self . _exploding_age = data . get ( 'exploding_age' ) self . _recipient_ids = data . get ( 'recipient_ids' ) self . _client = client","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.message.Message.__repr__","text":"Source code in openhivenpy\\types\\message.py def __repr__ ( self ) -> str : info = [ ( 'id' , self . id ), ( 'content' , self . content ), ( 'author' , repr ( self . author )), ( 'room' , repr ( self . room )), ( 'type' , self . type ), ( 'exploding' , self . exploding ), ( 'edited_at' , self . edited_at ) ] return '<Message {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ))","title":"__repr__()"},{"location":"reference/types.html#openhivenpy.types.message.Message.__str__","text":"Source code in openhivenpy\\types\\message.py def __str__ ( self ) -> str : return f \"<Message id=' { self . id } ' from ' { self . author . name } '>\"","title":"__str__()"},{"location":"reference/types.html#openhivenpy.types.message.Message.delete","text":"Deletes the message. Raises Forbidden if not allowed. Parameters: Name Type Description Default delay float Delay until deleting the message as read (in seconds) None Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\message.py async def delete ( self , delay : float = None ) -> None : \"\"\" Deletes the message. Raises Forbidden if not allowed. :param delay: Delay until deleting the message as read (in seconds) :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : if delay is not None : await asyncio . sleep ( delay = delay ) await self . _client . http . delete ( endpoint = f \"/rooms/ { self . room_id } /messages/ { self . id } \" ) except Exception as e : utils . log_traceback ( brief = f \"Failed to delete the message { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e","title":"delete()"},{"location":"reference/types.html#openhivenpy.types.message.Message.edit","text":"Edits a message on Hiven Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\message.py async def edit ( self , content : str ) -> None : \"\"\" Edits a message on Hiven :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : await self . _client . http . patch ( endpoint = f \"/rooms/ { self . room_id } /messages/ { self . id } \" , json = { 'content' : content } ) except Exception as e : utils . log_traceback ( brief = f \"Failed to edit message { repr ( self ) } \" , exc_info = sys . exc_info () ) raise e","title":"edit()"},{"location":"reference/types.html#openhivenpy.types.message.Message.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\message.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" # I believe, 0 = normal message, 1 = system. data [ 'type' ] = utils . safe_convert ( int , data . get ( 'type' ), None ) data [ 'bucket' ] = utils . safe_convert ( int , data . get ( 'bucket' ), None ) data [ 'exploding_age' ] = utils . safe_convert ( int , data . get ( 'exploding_age' ), None ) data [ 'timestamp' ] = utils . safe_convert ( int , data . get ( 'timestamp' )) data = cls . validate ( data ) if not data . get ( 'room_id' ) and data . get ( 'room' ): room_ = data . pop ( 'room' ) if type ( room_ ) is dict : room_ = room_ . get ( 'id' , None ) elif isinstance ( room_ , DataClassObject ): room_ = getattr ( room_ , 'id' , None ) elif type ( data . get ( 'room_id' )) is str : room_ = data [ 'room_id' ] else : room_ = None if room_ is None : raise InvalidPassedDataError ( \"The passed room is not in the correct format!\" , data = data ) else : data [ 'room_id' ] = room_ if not data . get ( 'house_id' ) and data . get ( 'house' ): house_ = data . pop ( 'house' ) if type ( house_ ) is dict : house_ = house_ . get ( 'id' , None ) elif isinstance ( house_ , DataClassObject ): house_ = getattr ( house_ , 'id' , None ) elif type ( data . get ( 'house_id' )) is str : house_ = data [ 'house_id' ] else : house_ = None data [ 'house_id' ] = house_ if not data . get ( 'author_id' ) and data . get ( 'author' ): author = data . pop ( 'author' ) if type ( author ) is dict : author = author . get ( 'id' , None ) elif isinstance ( author , DataClassObject ): author = getattr ( author , 'id' , None ) elif type ( data . get ( 'author_id' )) is str : author = data [ 'author_id' ] else : author = None if author is None : raise InvalidPassedDataError ( \"The passed author is not in the correct format!\" , data = data ) else : data [ 'author' ] = author data [ 'author' ] = data [ 'author_id' ] data [ 'house' ] = data [ 'house_id' ] data [ 'room' ] = data [ 'room_id' ] data [ 'device_id' ] = utils . safe_convert ( str , data . get ( 'device_id' ), None ) return data","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.message.Message.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.message.Message.mark_as_read","text":"Marks the message as read. This doesn't need to be done for bot clients. Parameters: Name Type Description Default delay float Delay until marking the message as read (in seconds) None Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\message.py async def mark_as_read ( self , delay : float = None ) -> None : \"\"\" Marks the message as read. This doesn't need to be done for bot clients. :param delay: Delay until marking the message as read (in seconds) :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : if delay is not None : await asyncio . sleep ( delay = delay ) await self . _client . http . post ( endpoint = f \"/rooms/ { self . room_id } /messages/ { self . id } /ack\" ) except Exception as e : utils . log_traceback ( brief = f \"Failed to mark message as read { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e","title":"mark_as_read()"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom","text":"Represents a private chat room with only one user","title":"PrivateRoom"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.client_user","text":"Returns the client_user of this class","title":"client_user"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.description","text":"Return the description of the PrivateRoom","title":"description"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.emoji","text":"The emoji of the PrivateRoom, if it has one","title":"emoji"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.id","text":"Returns the id of the PrivateRoom","title":"id"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.last_message_id","text":"The id of the last sent message","title":"last_message_id"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.name","text":"Name of the PrivateRoom","title":"name"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.recipient","text":"Returns the recipient object instance","title":"recipient"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.recipient_id","text":"The ID of the recipient","title":"recipient_id"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.type","text":"The type of the PrivateRoom","title":"type"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__","text":"Source code in openhivenpy\\types\\private_room.py @log_type_exception ( 'PrivateRoom' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _id = data . get ( 'id' ) self . _last_message_id = data . get ( 'last_message_id' ) self . _recipient = data . get ( 'recipient' ) self . _recipient_id = data . get ( 'recipient_id' ) self . _name = data . get ( 'name' ) self . _description = data . get ( 'description' ) self . _emoji = data . get ( 'emoji' ) self . _type = data . get ( 'type' ) self . _client_user = client . client_user","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__","text":"Source code in openhivenpy\\types\\private_room.py def __repr__ ( self ) -> str : info = [ ( 'id' , self . id ), ( 'last_message_id' , self . last_message_id ), ( 'recipients' , self . recipient ), ( 'type' , self . type ) ] return '<PrivateRoom {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ))","title":"__repr__()"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\private_room.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = cls . validate ( data ) name = \"\" if not data . get ( 'recipient_id' ) and data . get ( 'recipients' ): recipient = data . pop ( 'recipients' )[ 0 ] if type ( recipient ) is dict : name = recipient . get ( 'name' , None ) recipient = recipient . get ( 'id' , None ) elif isinstance ( recipient , DataClassObject ): name = getattr ( recipient , 'name' , None ) recipient = getattr ( recipient , 'id' , None ) else : recipient = None name = None if recipient is None : raise InvalidPassedDataError ( \"The passed recipient/s is/are not in the correct format!\" , data = data ) else : data [ 'recipient_id' ] = recipient data [ 'recipient' ] = data [ 'recipient_id' ] # If the passed recipient object does not contain the name parameter # it will be fetched later from the client based on the id if name : data [ 'name' ] = f \"Private chat with { name } \" else : data [ 'name' ] = None return data","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data","text":"Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. Source code in openhivenpy\\types\\private_room.py def get_cached_data ( self ) -> Optional [ dict ]: \"\"\" Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. \"\"\" return self . _client . find_private_room ( self . id )","title":"get_cached_data()"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send","text":"Sends a message in the private room. Parameters: Name Type Description Default content str Content of the message required delay float Delay until sending the message (in seconds) None Returns: Type Description Optional[Message] Returns a Message Instance if successful. Source code in openhivenpy\\types\\private_room.py async def send ( self , content : str , delay : float = None ) -> Optional [ Message ]: \"\"\" Sends a message in the private room. :param content: Content of the message :param delay: Delay until sending the message (in seconds) :return: Returns a Message Instance if successful. \"\"\" raise NotImplementedError ( \"This is not implemented yet for Private Rooms\" )","title":"send()"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call","text":"Starts a call with the user in the private room Not implemented Parameters: Name Type Description Default delay float Delay until calling (in seconds) None Source code in openhivenpy\\types\\private_room.py async def start_call ( self , delay : float = None ) -> bool : \"\"\" Starts a call with the user in the private room *Not implemented* :param delay: Delay until calling (in seconds) \"\"\" raise NotImplementedError ( \"This is not implemented yet for Private Rooms\" )","title":"start_call()"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom","text":"Represents a private group chat room with multiple users","title":"PrivateGroupRoom"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.client_user","text":"Returns the Client User inside this PrivateGroupRoom","title":"client_user"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.description","text":"Returns the description of the PrivateGroupRoom","title":"description"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.emoji","text":"Returns the emoji of this PrivateGroupRoom if it exists","title":"emoji"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.id","text":"Returns the id of the PrivateGroupRoom","title":"id"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.last_message_id","text":"Returns the id of the last message inside the PrivateGroupRoom","title":"last_message_id"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.name","text":"Returns the name of the PrivateGroupRoom","title":"name"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.recipients","text":"Returns a list of all recipients","title":"recipients"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.type","text":"Returns the type of this PrivateGroupRoom","title":"type"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__","text":"Source code in openhivenpy\\types\\private_room.py @log_type_exception ( 'PrivateGroupRoom' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _id = data . get ( 'id' ) self . _last_message_id = data . get ( 'last_message_id' ) self . _recipients = data . get ( 'recipients' ) self . _name = data . get ( 'name' ) self . _description = data . get ( 'description' ) self . _emoji = data . get ( 'emoji' ) self . _type = data . get ( 'type' ) self . _client_user = client . client_user self . _client = client","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__","text":"Source code in openhivenpy\\types\\private_room.py def __repr__ ( self ) -> str : info = [ ( 'id' , self . id ), ( 'last_message_id' , self . last_message_id ), ( 'recipients' , self . recipients ), ( 'type' , self . type ) ] return '<PrivateGroupRoom {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ) )","title":"__repr__()"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\private_room.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = cls . validate ( data ) data [ 'name' ] = f \"Private chat with { data [ 'recipients' ][ 0 ][ 'name' ] } \" rep = data . get ( 'recipients' ) id_list : List [ str ] = [] if type ( rep ) is list : for user in rep : if type ( user ) is dict : id_list += str ( user . get ( 'id' , None )) elif isinstance ( user , DataClassObject ): id_list += str ( getattr ( user , 'id' , None )) else : raise InvalidPassedDataError ( \"The passed recipient is not in the correct \" \"format!\" , data = data ) else : raise InvalidPassedDataError ( \"The passed recipients are not in the correct format!\" , data = data ) data [ 'recipients' ] = id_list return data","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data","text":"Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. Source code in openhivenpy\\types\\private_room.py def get_cached_data ( self ) -> Optional [ dict ]: \"\"\" Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. \"\"\" return self . _client . find_private_group_room ( self . id )","title":"get_cached_data()"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send","text":"Sends a message in the private room. Not implemented Parameters: Name Type Description Default content str Content of the message required delay float Seconds to wait until sending the message (in seconds) None Returns: Type Description Optional[Message] A Message instance if successful else None Source code in openhivenpy\\types\\private_room.py async def send ( self , content : str , delay : float = None ) -> Optional [ Message ]: \"\"\" Sends a message in the private room. *Not implemented* :param content: Content of the message :param delay: Seconds to wait until sending the message (in seconds) :return: A Message instance if successful else None \"\"\" raise NotImplementedError ( \"This is not implemented yet for Private Rooms\" )","title":"send()"},{"location":"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call","text":"Starts a call with the user in the private room Not implemented Parameters: Name Type Description Default delay float Delay until calling (in seconds) None Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\private_room.py async def start_call ( self , delay : float = None ) -> bool : \"\"\" Starts a call with the user in the private room *Not implemented* :param delay: Delay until calling (in seconds) :raise HTTPError: If any HTTP error is raised while executing \"\"\" raise NotImplementedError ( \"This is not implemented yet for Private Rooms\" )","title":"start_call()"},{"location":"reference/types.html#openhivenpy.types.relationship.Relationship","text":"Represents a user-relationship with another user or bot Possible Type of the Relationship: 0 - No Relationship 1 - Outgoing Friend Request 2 - Incoming Friend Request 3 - Friend 4 - Restricted User 5 - Blocked User","title":"Relationship"},{"location":"reference/types.html#openhivenpy.types.relationship.Relationship-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.relationship.Relationship.id","text":"Alias for user_id. Stored using the target user id in the cache","title":"id"},{"location":"reference/types.html#openhivenpy.types.relationship.Relationship.type","text":"Possible Type of the relationship: 0 - No Relationship 1 - Outgoing Friend Request 2 - Incoming Friend Request 3 - Friend 4 - Restricted User 5 - Blocked User","title":"type"},{"location":"reference/types.html#openhivenpy.types.relationship.Relationship.user","text":"Target User Object","title":"user"},{"location":"reference/types.html#openhivenpy.types.relationship.Relationship.user_id","text":"ID of the target user","title":"user_id"},{"location":"reference/types.html#openhivenpy.types.relationship.Relationship-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.relationship.Relationship.__init__","text":"Source code in openhivenpy\\types\\relationship.py @log_type_exception ( 'Relationship' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _user_id = data . get ( 'user_id' ) self . _user = data . get ( 'user' ) self . _type = data . get ( 'type' ) self . _last_updated_at = data . get ( 'last_updated_at' ) self . _client = client","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__","text":"Source code in openhivenpy\\types\\relationship.py def __repr__ ( self ) -> str : info = [ ( 'id' , self . id ), ( 'user_id' , self . user_id ), ( 'user' , repr ( self . user )), ( 'type' , self . type ) ] return '<Relationship {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ))","title":"__repr__()"},{"location":"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\relationship.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. Does NOT contain other objects and only their ids! :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = cls . validate ( data ) data [ 'type' ] = utils . safe_convert ( int , data . get ( 'type' )) if not data . get ( 'user_id' ) and data . get ( 'user' ): user = data . pop ( 'user' ) if type ( user ) is dict : user_id = user . get ( 'id' ) elif isinstance ( user , DataClassObject ): user_id = getattr ( user , 'id' , None ) else : user_id = None if user_id is None : raise InvalidPassedDataError ( \"The passed user is not in the correct format!\" , data = data ) else : data [ 'user_id' ] = user_id elif not data . get ( 'user_id' ) and not data . get ( 'user' ): raise InvalidPassedDataError ( \"user_id and user missing from required data\" , data = data ) data [ 'user' ] = data [ 'user_id' ] return data","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data","text":"Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. Source code in openhivenpy\\types\\relationship.py def get_cached_data ( self ) -> Optional [ dict ]: \"\"\" Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. \"\"\" return self . _client . find_relationship ( self . user_id )","title":"get_cached_data()"},{"location":"reference/types.html#openhivenpy.types.relationship.Relationship.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom","text":"Represents a Hiven Room inside a House Possible Types: 0 - Text 1 - Portal","title":"TextRoom"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.description","text":"The description of the Room","title":"description"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.emoji","text":"The assigned emoji of the room","title":"emoji"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.house","text":"The parent house object","title":"house"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.house_id","text":"The ID of the parent house","title":"house_id"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.id","text":"ID of the Room","title":"id"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.name","text":"Name of the Room","title":"name"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.position","text":"Position on the sidebar of the Room","title":"position"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.type","text":"Type of the Room (always 0 for TextRoom)","title":"type"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__","text":"Source code in openhivenpy\\types\\textroom.py @log_type_exception ( 'TextRoom' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _id = data . get ( 'id' ) self . _name = data . get ( 'name' ) self . _house_id = data . get ( 'house_id' ) self . _position = data . get ( 'position' ) self . _type = data . get ( 'type' ) self . _emoji = data . get ( 'emoji' ) self . _description = data . get ( 'description' ) self . _last_message_id = data . get ( 'last_message_id' ) self . _house = data . get ( 'house' ) self . _client = client","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__","text":"Source code in openhivenpy\\types\\textroom.py def __repr__ ( self ) -> str : info = [ ( 'name' , self . name ), ( 'id' , self . id ), ( 'house_id' , self . house_id ), ( 'position' , self . position ), ( 'type' , self . type ), ( 'emoji' , self . emoji ), ( 'description' , self . description ) ] return str ( '<Room {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info )))","title":"__repr__()"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.edit","text":"Changes the rooms data on Hiven Available options: emoji, name, description Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\textroom.py async def edit ( self , ** kwargs ) -> None : \"\"\" Changes the rooms data on Hiven Available options: emoji, name, description :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : for key in kwargs . keys (): if key in [ 'emoji' , 'name' , 'description' ]: await self . _client . http . patch ( f \"/rooms/ { self . id } \" , json = { key : kwargs . get ( key )} ) else : raise NameError ( \"The passed value does not exist in the Room!\" ) except Exception as e : keys = \"\" . join ( key + \" \" for key in kwargs . keys () ) if kwargs != {} else '' utils . log_traceback ( brief = f \"Failed to change the values { keys } in room { repr ( self ) } \" , exc_info = sys . exc_info () ) raise e","title":"edit()"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\textroom.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" if not data . get ( 'house_id' ) and data . get ( 'house' ): house = data . pop ( 'house' ) if type ( house ) is dict : house_id = house . get ( 'id' ) elif isinstance ( house , DataClassObject ): house_id = getattr ( house , 'id' , None ) else : house_id = None if house_id is None : raise InvalidPassedDataError ( \"The passed house is not in the correct format!\" , data = data ) else : data [ 'house_id' ] = house_id data [ 'house' ] = data [ 'house_id' ] data = cls . validate ( data ) return data","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data","text":"Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. Source code in openhivenpy\\types\\textroom.py def get_cached_data ( self ) -> Optional [ dict ]: \"\"\" Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. \"\"\" return self . _client . find_room ( self . id )","title":"get_cached_data()"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages","text":"Gets the recent messages from the current room Returns: Type Description Optional[List[Message]] A list of all messages in form of Message instances if successful. Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\textroom.py async def get_recent_messages ( self ) -> Optional [ List [ Message ]]: \"\"\" Gets the recent messages from the current room :return: A list of all messages in form of Message instances if successful. :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : raw_data = await self . _client . http . get ( f \"/rooms/ { self . id } /messages\" ) raw_data = await raw_data . json () data = raw_data . get ( 'data' ) messages_ = [] for _ in data : msg = Message ( _ , self . _client ) messages_ . append ( msg ) return messages_ except Exception as e : utils . log_traceback ( brief = f \"Failed to create invite for house { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e","title":"get_recent_messages()"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.send","text":"Sends a message in the current room. Parameters: Name Type Description Default content str Content of the message required delay float Seconds to wait until sending the message (in seconds) None Returns: Type Description Optional[Message] A new message object if the request was successful Source code in openhivenpy\\types\\textroom.py async def send ( self , content : str , delay : float = None ) -> Optional [ Message ]: \"\"\" Sends a message in the current room. :param content: Content of the message :param delay: Seconds to wait until sending the message (in seconds) :return: A new message object if the request was successful \"\"\" try : if delay is not None : await asyncio . sleep ( delay = delay ) resp = await self . _client . http . post ( f \"/rooms/ { self . id } /messages\" , json = { \"content\" : content } ) raw_data = await resp . json () # Raw_data not in correct format => needs to access data field data = raw_data . get ( 'data' ) data = Message . format_obj_data ( data ) return Message ( data , self . _client ) except Exception as e : utils . log_traceback ( brief = f \"Failed to send message in room { repr ( self ) } \" , exc_info = sys . exc_info () ) raise e","title":"send()"},{"location":"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing","text":"Adds the client to the list of users typing Exceptions: Type Description HTTPError If any HTTP error is raised while executing Source code in openhivenpy\\types\\textroom.py async def start_typing ( self ) -> None : \"\"\" Adds the client to the list of users typing :raise HTTPError: If any HTTP error is raised while executing \"\"\" try : await self . _client . http . post ( f \"/rooms/ { self . id } /typing\" ) except Exception as e : utils . log_traceback ( brief = f \"Failed to create invite for house { repr ( self ) } :\" , exc_info = sys . exc_info () ) raise e Important The class LazyUser is inherited into the class User , meaning all properties of the LazyUser class are also available in the standard User class","title":"start_typing()"},{"location":"reference/types.html#openhivenpy.types.user.User","text":"Represents the regular extended Hiven User","title":"User"},{"location":"reference/types.html#openhivenpy.types.user.User-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.user.User.blocked","text":"Returns whether the user is blocked","title":"blocked"},{"location":"reference/types.html#openhivenpy.types.user.User.email","text":"The e-mail of the user. Client-limited","title":"email"},{"location":"reference/types.html#openhivenpy.types.user.User.location","text":"Set location of the user","title":"location"},{"location":"reference/types.html#openhivenpy.types.user.User.mfa_enabled","text":"Returns whether mfa is enabled","title":"mfa_enabled"},{"location":"reference/types.html#openhivenpy.types.user.User.presence","text":"Current presence of the User","title":"presence"},{"location":"reference/types.html#openhivenpy.types.user.User.website","text":"Set website of the user","title":"website"},{"location":"reference/types.html#openhivenpy.types.user.User-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.user.User.__init__","text":"Source code in openhivenpy\\types\\user.py @log_type_exception ( 'User' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ ( data , client ) self . _location = data . get ( 'location' ) self . _website = data . get ( 'website' ) self . _blocked = data . get ( 'blocked' ) self . _presence = data . get ( 'presence' ) self . _email = data . get ( 'email' ) self . _mfa_enabled = data . get ( 'mfa_enabled' )","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.user.User.__repr__","text":"Source code in openhivenpy\\types\\user.py def __repr__ ( self ) -> str : info = [ ( 'username' , self . username ), ( 'name' , self . name ), ( 'id' , self . id ), ( 'icon' , self . icon ), ( 'header' , self . header ), ( 'bot' , self . bot ) ] return '<User {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ))","title":"__repr__()"},{"location":"reference/types.html#openhivenpy.types.user.User.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\user.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = LazyUser . format_obj_data ( data ) data = cls . validate ( data ) return data","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.user.User.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser","text":"Represents the standard Hiven User Note! This class is a lazy class and does not have every available data! Consider fetching for more data the regular user object with HivenClient.get_user()","title":"LazyUser"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.account","text":"Returns the account id/string. Currently client-limited","title":"account"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.application","text":"Returns the application string passed. Currently client-limited","title":"application"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.bio","text":"Bio of the user","title":"bio"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.bot","text":"Returns true when the user is a bot","title":"bot"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.email_verified","text":"Returns True if the email is verified","title":"email_verified"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.flags","text":"User flags represented as an numeric value/str","title":"flags"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.header","text":"The header of the user as a link","title":"header"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.icon","text":"The icon of the user as a link","title":"icon"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.id","text":"Unique string id of the user","title":"id"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.name","text":"Name of the user","title":"name"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.user_flags","text":"Alias for flags","title":"user_flags"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.username","text":"Username of the user","title":"username"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser-methods","text":"","title":"Methods"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.__init__","text":"Source code in openhivenpy\\types\\user.py @log_type_exception ( 'LazyUser' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _username = data . get ( 'username' ) self . _name = data . get ( 'name' ) self . _bio = data . get ( 'bio' ) self . _id = data . get ( 'id' ) self . _email_verified = data . get ( 'email_verified' ) # ToDo: Discord.py-esque way of user flags self . _flags = data . get ( 'flags' ) self . _icon = data . get ( 'icon' ) self . _header = data . get ( 'header' ) self . _bot = data . get ( 'bot' , False ) self . _client = client","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.__repr__","text":"Source code in openhivenpy\\types\\user.py def __repr__ ( self ) -> str : info = [ ( 'username' , self . username ), ( 'name' , self . name ), ( 'id' , self . id ), ( 'icon' , self . icon ), ( 'header' , self . header ), ( 'bot' , self . bot ) ] return '<LazyUser {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ))","title":"__repr__()"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data","text":"Validates the data and appends data if it is missing that would be required for the creation of an instance. Parameters: Name Type Description Default data dict Data that should be validated and used to form the object required Returns: Type Description dict The modified dictionary, which can then be used to create a new class instance Source code in openhivenpy\\types\\user.py @classmethod def format_obj_data ( cls , data : dict ) -> dict : \"\"\" Validates the data and appends data if it is missing that would be required for the creation of an instance. :param data: Data that should be validated and used to form the object :return: The modified dictionary, which can then be used to create a new class instance \"\"\" data = cls . validate ( data ) return data","title":"format_obj_data()"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data","text":"Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. Source code in openhivenpy\\types\\user.py def get_cached_data ( self ) -> Optional [ dict ]: \"\"\" Fetches the most recent data from the cache based on the instance id. If updated while the object exists, the data might differentiate, due to the object not being updated unlike the cache. \"\"\" return self . _client . find_user ( self . id )","title":"get_cached_data()"},{"location":"reference/types.html#openhivenpy.types.user.LazyUser.json_validator","text":"","title":"json_validator()"},{"location":"reference/types.html#openhivenpy.types.usertyping.UserTyping","text":"Represents a Hiven User typing in a room","title":"UserTyping"},{"location":"reference/types.html#openhivenpy.types.usertyping.UserTyping-attributes","text":"","title":"Attributes"},{"location":"reference/types.html#openhivenpy.types.usertyping.UserTyping.author","text":"Author object of the User-Typing Class","title":"author"},{"location":"reference/types.html#openhivenpy.types.usertyping.UserTyping.author_id","text":"ID of the parent Author object of the Context Class","title":"author_id"},{"location":"reference/types.html#openhivenpy.types.usertyping.UserTyping.house","text":"House object of the Context Class","title":"house"},{"location":"reference/types.html#openhivenpy.types.usertyping.UserTyping.house_id","text":"ID of the parent House object of the Context Class","title":"house_id"},{"location":"reference/types.html#openhivenpy.types.usertyping.UserTyping.is_house_typing","text":"Returns whether the typing is inside a house","title":"is_house_typing"},{"location":"reference/types.html#openhivenpy.types.usertyping.UserTyping.room","text":"Room object of the Context Class","title":"room"},{"location":"reference/types.html#openhivenpy.types.usertyping.UserTyping.room_id","text":"ID of the parent Room object of the Context Class","title":"room_id"},{"location":"reference/types.html#openhivenpy.types.usertyping.UserTyping.timestamp","text":"Time-stamp of the User-Typing (unix)","title":"timestamp"},{"location":"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__","text":"Source code in openhivenpy\\types\\usertyping.py @log_type_exception ( 'UserTyping' ) def __init__ ( self , data : dict , client : HivenClient ): super () . __init__ () self . _author = data . get ( 'author' ) self . _room = data . get ( 'room' ) self . _house = data . get ( 'house' ) self . _author_id = data . get ( 'author_id' ) self . _house_id = data . get ( 'house_id' ) self . _room_id = data . get ( 'room_id' ) self . _timestamp = data . get ( 'timestamp' ) self . _client = client","title":"__init__()"},{"location":"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__","text":"Source code in openhivenpy\\types\\usertyping.py def __repr__ ( self ) -> str : info = [ ( 'house_id' , self . house_id ), ( 'author_id' , self . author_id ), ( 'room_id' , self . room_id ), ( 'author' , repr ( self . author )) ] return '<Typing {} >' . format ( ' ' . join ( ' %s = %s ' % t for t in info ))","title":"__repr__()"},{"location":"setup/index.html","text":"Setup of a Bot \u00b6 Warning This documentation page is not finished yet! Information can be outdated or entirely not available!","title":"Setup of a Bot"},{"location":"setup/index.html#setup-of-a-bot","text":"Warning This documentation page is not finished yet! Information can be outdated or entirely not available!","title":"Setup of a Bot"}],"index":{"fieldVectors":[["title/index.html",[0,6.5]],["text/index.html",[1,5.2,2,5.347,3,6.334,4,2.761,5,5.027,6,6.334,7,6.938,8,5.347,9,5.751,10,8.072,11,3.999,12,3.027,13,4.864,14,4.282,15,3.507,16,4.948,17,4.948,18,3.766,19,5.469,20,5.919,21,3.316,22,6.938,23,6.334,24,6.938,25,2.344,26,4.087,27,5.919,28,6.334,29,6.334,30,6.334,31,6.334,32,6.11,33,5.751,34,6.334,35,8.072,36,6.334,37,6.334,38,6.334,39,6.334,40,6.334,41,6.11]],["title/changelog.html",[42,5.317]],["text/changelog.html",[5,0.935,9,1.33,11,3.729,12,0.563,14,0.99,15,0.811,16,1.144,17,1.144,18,1.527,21,2.911,22,1.605,24,1.605,25,2.186,26,2.213,27,2.4,33,1.33,42,2.677,43,1.53,44,1.709,45,3.711,46,2.677,47,0.897,48,3.963,49,1.676,50,1.043,51,2.4,52,1.465,53,1.709,54,2.218,55,1.709,56,1.41,57,3.14,58,1.265,59,1.413,60,1.709,61,1.709,62,1.709,63,4.565,64,2.814,65,1.709,66,5.199,67,2.409,68,2.888,69,1.398,70,3.114,71,2.473,72,1.237,73,1.029,74,2.263,75,1.709,76,1.058,77,0.897,78,2.679,79,2.332,80,1.237,81,0.755,82,1.709,83,1.709,84,4.687,85,3.975,86,1.09,87,2.523,88,1.818,89,2.677,90,3.434,91,2.168,92,3.561,93,1.413,94,2.659,95,2.043,96,2.362,97,3.131,98,1.966,99,1.413,100,0.495,101,0.945,102,1.829,103,1.413,104,1.527,105,1.829,106,1.972,107,1.527,108,1.709,109,1.736,110,1.709,111,2.568,112,1.527,113,1.695,114,1.349,115,2.002,116,1.782,117,3.034,118,1.709,119,1.211,120,4.597,121,2.4,122,1.527,123,0.897,124,1.972,125,2.123,126,4.807,127,1.985,128,1.709,129,1.369,130,2.634,131,1.809,132,1.413,133,0.897,134,1.705,135,1.709,136,1.369,137,1.972,138,1.709,139,1.709,140,1.165,141,0.316,142,1.211,143,2.568,144,1.413,145,1.165,146,1.33,147,1.211,148,1.527,149,1.782,150,1.527,151,1.125,152,1.527,153,1.823,154,1.237,155,1.237,156,1.33,157,2.568,158,0.879,159,4.268,160,1.413,161,1.296,162,1.33,163,2.4,164,4.764,165,1.413,166,1.265,167,2.779,168,1.296,169,2.123,170,1.703,171,1.226,172,1.709,173,1.695,174,2.218,175,1.709,176,1.709,177,2.551,178,3.351,179,1.296,180,2.895,181,1.709,182,2.677,183,1.33,184,1.709,185,1.354,186,1.187,187,1.527,188,1.413,189,2.779,190,0.951,191,1.709,192,2.814,193,1.527,194,1.073,195,1.709,196,1.709,197,2.814,198,2.814,199,2.121,200,4.121,201,1.709,202,1.003,203,2.634,204,2.814,205,2.568,206,1.527,207,0.749,208,1.709,209,1.941,210,1.709,211,2.616,212,1.016,213,1.882,214,0.791,215,1.709,216,1.709,217,2.078,218,1.709,219,1.709,220,1.709,221,1.709,222,7.558,223,0.99,224,1.709,225,1.527,226,1.527,227,1.413,228,1.709,229,0.935,230,1.709,231,1.709,232,2.814,233,1.709,234,1.709,235,1.715,236,1.709,237,1.187,238,1.709,239,1.709,240,1.413,241,1.058,242,2.272,243,2.934,244,1.413,245,1.709,246,1.709,247,1.709,248,1.211,249,1.709,250,1.709,251,1.527,252,1.709,253,1.709,254,1.709,255,2.513,256,2.814,257,0.925,258,1.709,259,2.143,260,1.09,261,1.107,262,1.058,263,1.073,264,1.211,265,1.016,266,1.237,267,1.237,268,2.679,269,3.742,270,1.413,271,1.369,272,1.709,273,1.369,274,1.966,275,0.897,276,1.709,277,1.709,278,1.709,279,3.781,280,3.899,281,0.897,282,1.107,283,1.709,284,1.709,285,1.073,286,0.733,287,1.709,288,1.709,289,1.003,290,1.527,291,1.709,292,1.709,293,1.296,294,1.125,295,1.527,296,0.863,297,1.265,298,1.994,299,1.635,300,1.795,301,1.768,302,2.478,303,1.409,304,1.029,305,1.33,306,1.527,307,1.369,308,1.781,309,0.879,310,0.694,311,2.814,312,1.709,313,1.422,314,1.33,315,1.709,316,2.996,317,1.709,318,2.332,319,2.996,320,1.709,321,1.709,322,2.996,323,2.568,324,1.709,325,1.709,326,1.709,327,1.709,328,1.237,329,1.527,330,0.785,331,1.073,332,1.211,333,1.709,334,1.187,335,1.709,336,2.123,337,1.401,338,0.847,339,1.237,340,1.265,341,1.465,342,0.922,343,1.527,344,1.709,345,1.527,346,2.006,347,0.785,348,0.935,349,1.829,350,1.41,351,1.413,352,1.709,353,1.709,354,1.211,355,1.413,356,1.369,357,1.413,358,1.369,359,1.413,360,2.568,361,1.165,362,1.33,363,0.99,364,1.527,365,1.709,366,1.709,367,1.709,368,0.804,369,1.709,370,1.527,371,1.33]],["title/changelog.html#changelog",[42,5.317]],["text/changelog.html#changelog",[16,5.411,42,7.221,43,1.43,44,8.081,45,4.258,46,8.674,47,4.241,48,6.849,49,4.52,50,4.933,51,6.474,52,6.927,53,8.081,54,5.981,55,8.081,56,3.804,57,3.683,58,5.981,59,6.683,60,8.081,61,8.081]],["title/changelog.html#v02dev2-2021-08-23",[62,2.847,63,2.159,64,2.673,65,2.847]],["text/changelog.html#v02dev2-2021-08-23",[]],["title/changelog.html#added",[66,3.583]],["text/changelog.html#added",[51,6.983,66,5.249,67,6.113,68,3.338,69,2.229,70,6.785,71,3.942,72,6.308,73,5.249,74,4.103,75,8.717]],["title/changelog.html#changed",[45,2.61]],["text/changelog.html#changed",[17,5.87,43,1.291,57,3.995,67,5.279,76,5.426,77,4.6,78,5.87,79,7.928,80,6.344,81,3.874]],["title/changelog.html#v02dev1-2021-08-13",[63,2.159,64,2.673,82,2.847,83,2.847]],["text/changelog.html#v02dev1-2021-08-13",[45,3.912,49,4.988,54,6.6,57,4.064,84,7.644,85,7.374,86,5.686,87,4.679]],["title/changelog.html#added_1",[66,3.583]],["text/changelog.html#added_1",[11,5.048,21,4.483,25,2.563,26,4.467,43,1.429,45,2.12,48,3.182,57,2.203,66,2.911,68,1.851,74,3.801,87,4.238,88,2.616,89,6.18,90,3.036,91,3.498,92,3.97,93,3.997,94,4.467,95,3.295,96,4.331,97,5.34,98,3.398,99,3.997,100,1.399,101,2.674,102,2.95,103,3.997,104,4.319,105,2.95,106,3.182,107,4.319,108,4.833,109,2.801,110,4.833,111,4.143,112,4.319,113,3.913,114,1.55,115,4.04,116,3.596,117,6.124,118,4.833,119,3.425,120,4.901,121,5.54,122,4.319,123,2.537,124,4.553,125,4.901,126,8.815,127,2.471,128,4.833,129,3.872,130,3.182,131,2.186,132,3.997,133,2.537,134,3.441,135,4.833,136,3.872,137,3.182,138,4.833,139,4.833,140,3.295,141,0.894,142,3.425,143,5.929,144,3.997,145,3.295,146,3.762,147,3.425,148,4.319,149,2.153,150,4.319,151,3.182,152,4.319,153,2.095,154,3.498,155,3.498,156,3.762,157,4.143,158,2.487,159,2.735,160,3.997,161,3.665,162,3.762]],["title/changelog.html#changed_1",[45,2.61]],["text/changelog.html#changed_1",[9,5.118,11,3.558,48,5.617,57,4.318,68,2.518,70,5.118,84,5.636,85,7.056,90,5.359,91,4.758,92,3.455,94,3.636,95,4.482,102,4.013,105,4.013,114,1.913,120,6.046,127,2.012,130,4.328,131,3.859,159,3.72,163,5.267,164,4.328,165,5.437,166,4.866,167,5.927,168,4.985,169,4.659,170,3.355,171,1.612,172,6.574,173,4.828,174,4.866,175,6.574,176,6.574,177,6.04,178,4.387,179,4.985,180,4.758,181,6.574,182,7.624,183,5.118,184,6.574,185,2.226,186,4.567,187,5.875,188,5.437,189,4.567,190,2.086,191,6.574]],["title/changelog.html#removed",[159,3.367]],["text/changelog.html#removed",[45,3.934,66,5.401,85,7.417,192,8.422,193,8.014,194,5.633,195,8.969]],["title/changelog.html#v0132-2021-04-09",[63,2.159,196,2.847,197,2.673,198,2.673]],["text/changelog.html#v0132-2021-04-09",[]],["title/changelog.html#added_2",[66,3.583]],["text/changelog.html#added_2",[68,3.357,159,4.96,178,4.717,199,4.647,200,7.514,201,8.766,202,5.143,203,5.771,204,8.232,205,7.514]],["title/changelog.html#changed_2",[45,2.61]],["text/changelog.html#changed_2",[84,7.733,206,8.061,207,1.689,208,9.021,209,5.842,210,9.021]],["title/changelog.html#removed_1",[159,3.367]],["text/changelog.html#removed_1",[78,5.903,200,7.557,203,5.804,205,7.557,211,4.12,212,5.239,213,5.537,214,4.083,215,8.816]],["title/changelog.html#v0131-2021-04-09",[63,2.159,197,2.673,198,2.673,216,2.847]],["text/changelog.html#v0131-2021-04-09",[]],["title/changelog.html#added_3",[66,3.583]],["text/changelog.html#added_3",[68,3.435,88,3.392,171,1.694,213,5.633,217,3.877,218,8.969,219,8.969]],["title/changelog.html#changed_3",[45,2.61]],["text/changelog.html#changed_3",[153,2.67,159,4.988,178,4.083,220,8.816,221,8.816,222,7.877,223,2.182,224,8.816,225,7.877,226,7.877]],["title/changelog.html#removed_2",[159,3.367]],["text/changelog.html#removed_2",[45,3.934,178,4.153,192,8.422,227,7.417,228,8.969,229,4.907,230,8.969]],["title/changelog.html#v013-2021-02-16",[63,2.159,231,2.847,232,2.673,233,2.847]],["text/changelog.html#v013-2021-02-16",[]],["title/changelog.html#added_4",[66,3.583]],["text/changelog.html#added_4",[22,6.071,43,1.243,57,2.947,68,3.232,88,2.445,92,3.078,109,3.746,111,5.542,120,5.98,127,2.875,137,4.256,164,6.186,167,4.491,169,4.581,171,1.594,174,4.785,199,4.474,207,1.211,211,2.607,234,6.465,235,4.832,236,6.465,237,4.491,238,6.465,239,6.465,240,5.346,241,4.002,242,2.955,243,3.946,244,5.346,245,6.465,246,6.465,247,6.465,248,4.581,249,6.465,250,6.465,251,5.777,252,6.465,253,6.465,254,6.465,255,5.301,256,6.071,257,3.499,258,6.465,259,4.52,260,4.122,261,4.187,262,4.002,263,4.06,264,4.581,265,3.842,266,4.679,267,4.679,268,5.651,269,5.032,270,5.346,271,5.179,272,6.465,273,5.179]],["title/changelog.html#changed_4",[45,2.61]],["text/changelog.html#changed_4",[14,4.408,71,3.44,92,2.774,157,6.52,164,6.159,171,1.437,178,3.522,203,5.007,209,4.926,217,4.044,222,9.874,255,4.777,256,7.142,268,5.093,274,3.737,275,3.991,276,7.606,277,7.606,278,7.606,279,6.364,280,6.059,281,3.991,282,4.926,283,7.606,284,7.606,285,4.777,286,3.264,287,7.606]],["title/changelog.html#removed_3",[159,3.367]],["text/changelog.html#removed_3",[78,6.076,204,8.521,288,9.073,289,5.324,290,8.108]],["title/changelog.html#v012-2021-02-03",[63,2.159,232,2.673,291,2.847,292,2.847]],["text/changelog.html#v012-2021-02-03",[]],["title/changelog.html#added_5",[66,3.583]],["text/changelog.html#added_5",[24,6.476,25,3.075,66,4.152,68,3.37,70,5.368,71,3.119,90,4.331,92,3.209,114,1.546,130,4.54,149,3.918,153,2.665,163,5.524,171,1.303,185,2.979,190,2.188,200,5.911,207,1.292,211,2.781,242,2.415,259,3.693,293,5.229,294,4.54,295,6.162,296,3.482,297,5.104,298,3.534,299,3.596,300,4.348,301,4.283,302,7.276,303,3.099,304,4.152,305,5.368,306,6.162,307,5.524,308,4.098,309,3.548,310,2.799,311,6.476,312,6.896,313,3.273,314,5.368]],["title/changelog.html#changed_5",[45,2.61]],["text/changelog.html#changed_5",[5,2.678,11,3.777,12,1.612,15,2.323,18,3.557,25,2.214,27,5.59,33,3.81,43,0.721,45,3.061,56,2.304,66,5.338,68,1.874,69,2.079,71,2.213,84,5.982,90,3.074,92,3.233,98,2.405,106,3.222,114,1.097,153,1.483,159,2.769,164,5.354,170,1.734,178,2.267,180,5.05,189,4.847,200,4.196,211,3.279,217,2.116,222,8.96,223,1.728,242,3.104,243,4.964,269,6.33,274,3.429,279,5.108,280,5.742,298,2.545,299,2,303,1.724,308,2.909,311,4.596,313,2.323,315,4.894,316,6.978,317,4.894,318,5.432,319,6.978,320,4.894,321,4.894,322,6.978,323,5.982,324,4.894,325,4.894,326,4.894,327,4.894,328,3.542,329,4.374,330,2.249,331,3.074,332,3.468,333,4.894,334,3.4,335,4.894,336,4.945,337,2.848,338,2.426,339,3.542,340,3.623,341,4.196,342,2.146,343,4.374,344,4.894,345,4.374,346,4.673,347,2.249,348,2.678,349,2.988,350,3.285,351,4.048,352,4.894,353,4.894,354,3.468,355,4.048,356,3.921,357,4.048,358,3.921,359,4.048,360,4.196,361,3.337,362,3.81,363,2.836,364,4.374,365,4.894,366,4.894,367,4.894,368,2.304]],["title/changelog.html#removed_4",[159,3.367]],["text/changelog.html#removed_4",[66,5.339,69,2.267,71,4.01,120,6.282,349,5.412,360,7.6,369,8.866,370,7.922,371,6.902]],["title/api_reference/hiven_exceptions.html",[211,1.76,301,1.929]],["text/api_reference/hiven_exceptions.html",[5,2.526,12,2.204,15,3.177,18,2.354,25,2.124,26,3.702,43,1.727,45,2.026,47,2.423,50,2.819,81,2.958,86,2.944,88,3.265,101,4.774,102,4.085,114,1.035,119,3.272,171,0.872,207,1.616,211,3.974,217,4.26,225,4.126,235,2.644,280,2.991,281,4.529,300,3.532,301,4.049,308,2.744,313,2.192,330,2.121,331,4.203,342,2.058,372,2.31,373,2.473,374,2.583,375,3.148,376,2.944,377,4.649,378,5.737,379,5.534,380,6.364,381,5.361,382,2.229,383,5.197,384,2.289,385,1.572,386,3.958,387,6.284,388,4.618,389,4.618,390,2.9,391,5.737,392,3.878,393,6.284,394,3.595,395,3.595,396,4.126,397,3.595,398,2.269,399,2.554,400,4.126,401,4.126,402,5.737,403,3.977,404,3.595,405,4.126,406,3.342,407,3.595,408,3.502,409,4.126,410,4.126]],["title/api_reference/hiven_exceptions.html#request-exceptions",[211,1.76,301,1.929]],["text/api_reference/hiven_exceptions.html#request-exceptions",[12,2.904,15,4.185,18,4.493,45,3.867,47,4.626,372,4.41,373,4.722,374,4.931,375,6.01,376,5.621]],["title/api_reference/hiven_exceptions.html#400-bad-request-no_auth",[301,1.258,377,1.978,378,2.44,379,2.354]],["text/api_reference/hiven_exceptions.html#400-bad-request-no_auth",[25,2.437,26,4.249,43,1.691,88,2.905,101,4.249,102,4.688,119,5.443,207,1.439,211,3.097,217,4.069,235,4.398,281,4.031,300,4.224,308,4.565,331,4.824,379,6.352,380,6.538,381,7.54,382,3.708,383,4.625,384,3.808,385,2.615,386,6.584]],["title/api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist",[301,1.258,377,1.978,378,2.44,387,2.673]],["text/api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist",[43,1.701,81,4.264,88,3.025,101,4.424,207,1.498,211,3.225,217,3.457,281,4.197,301,3.535,313,3.796,342,2.967,380,5.556,383,4.816,387,7.51,388,7.998,389,7.998,390,5.023]],["title/api_reference/hiven_exceptions.html#404-not-found-not_found",[391,2.954,392,1.997,393,3.236]],["text/api_reference/hiven_exceptions.html#404-not-found-not_found",[5,4.266,12,2.568,43,1.695,86,4.971,88,2.949,101,4.313,102,4.759,207,1.46,211,4.131,217,3.37,281,4.092,380,5.416,383,4.695,391,6.684,392,4.518,393,7.322,394,6.069,395,6.069,396,6.967,397,6.069,398,3.831,399,4.313]],["title/api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error",[171,0.458,225,2.167,400,2.167,401,2.167,402,2.079]],["text/api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error",[15,3.575,25,2.39,26,4.166,43,1.686,50,4.597,88,2.849,101,4.166,114,1.688,207,1.411,211,3.037,217,4.361,280,4.878,281,3.953,300,3.38,301,3.329,330,3.46,331,4.731,380,5.232,383,4.535,402,6.457,403,5.527,404,5.863,405,6.73,406,5.451,407,5.863,408,5.711,409,6.73,410,6.73]],["title/api_reference/hiven_request_endpoints.html",[5,1.885,301,1.523,398,1.693]],["text/api_reference/hiven_request_endpoints.html",[5,2.967,12,1.94,15,0.683,17,0.964,18,0.734,25,1.108,43,1.748,45,1.863,47,0.755,50,1.571,57,1.173,69,2.077,77,2.846,81,1.138,87,0.755,88,2.516,98,1.715,101,3,105,0.879,114,1.681,119,1.02,131,2.453,141,1.089,158,2.513,168,3.221,171,0.486,177,1.641,178,0.667,179,3.221,185,0.487,186,1,194,2.193,207,1.016,217,2.345,223,1.343,242,0.504,264,1.02,265,0.855,266,1.042,267,1.042,275,2.229,279,2.668,280,2.751,281,4.262,300,3.252,301,1.877,302,1.19,309,3.239,332,1.02,334,2.951,337,1.222,338,0.714,342,1.074,346,2.844,372,2.713,373,0.771,374,0.805,375,0.981,376,0.918,377,4.839,379,2.887,380,5.034,383,1.55,384,2.106,385,1.446,386,2.992,392,2.462,398,3.561,400,1.286,402,1.234,403,0.855,407,1.12,408,1.091,409,1.286,410,1.286,411,1.19,412,0.981,413,1.042,414,3.332,415,5.642,416,3.925,417,2.896,418,1.746,419,3.279,420,1.494,421,4.44,422,5.209,423,3.002,424,5.07,425,3.456,426,4.139,427,3.215,428,3.023,429,3.113,430,3.074,431,2.896,432,3.221,433,2.717,434,1.788,435,3.46,436,5.654,437,3.703,438,3.703,439,1.439,440,1.286,441,1.439,442,1.19,443,1.12,444,3.403,445,1.393,446,1.439,447,1.439,448,2.417,449,1.439,450,1.439,451,1.439,452,0.667,453,1.439,454,0.964,455,0.72,456,0.964,457,1.12,458,0.904,459,1.042,460,1.55,461,1.657,462,1.19,463,1.439,464,1.286,465,0.824,466,1.439,467,0.845,468,0.932]],["title/api_reference/hiven_request_endpoints.html#api-request-endpoints",[5,1.885,301,1.523,398,1.693]],["text/api_reference/hiven_request_endpoints.html#api-request-endpoints",[12,2.904,15,4.185,18,4.493,45,3.867,47,4.626,372,4.41,373,4.722,374,4.931,375,6.01,376,5.621]],["title/api_reference/hiven_request_endpoints.html#endpoints",[398,2.924]],["text/api_reference/hiven_request_endpoints.html#endpoints",[]],["title/api_reference/hiven_request_endpoints.html#user-endpoints",[69,1.116,398,2.144]],["text/api_reference/hiven_request_endpoints.html#user-endpoints",[]],["title/api_reference/hiven_request_endpoints.html#usersme",[411,4.921]],["text/api_reference/hiven_request_endpoints.html#usersme",[5,2.65,12,1.595,17,2.025,25,1.922,43,1.743,45,2.658,69,1.771,77,2.542,87,1.587,88,2.291,98,2.38,101,3.351,105,1.846,114,1.903,131,2.19,141,0.559,158,2.492,168,4.593,171,0.571,177,3.088,178,1.401,179,4.593,185,1.024,186,2.101,207,1.135,217,2.619,223,1.199,275,1.587,279,1.9,280,1.959,281,4.456,300,3.628,301,1.337,302,2.501,309,3.117,332,2.143,334,4.208,346,2.025,372,2.423,377,4.208,379,4.005,380,5.264,384,2.401,385,2.062,386,4.152,398,1.486,400,2.703,402,2.593,403,1.797,407,2.354,408,2.293,409,2.703,410,2.703,412,2.062,413,2.189,414,4.288,415,5.391,416,4.384,417,3.302,418,1.513,419,3.26,420,1.039,421,4.397,422,5.159,423,3.088,424,4.629,425,2.517,426,4.121,427,3.988,428,3.75,429,3.862,430,3.505,431,3.302,432,3.673,433,3.77,434,3.364,435,3.432,436,5.512,437,3.673,438,3.673,439,3.024,440,2.703,441,3.024,442,2.501,443,2.354,444,2.423,445,1.637]],["title/api_reference/hiven_request_endpoints.html#usersusername",[446,5.95]],["text/api_reference/hiven_request_endpoints.html#usersusername",[5,2.868,12,1.727,43,1.739,50,3.2,57,2.389,69,2.337,77,2.751,81,2.317,88,1.983,101,2.899,114,1.642,131,2.371,141,1.354,158,2.697,207,0.982,217,2.266,223,1.298,275,2.751,279,3.292,280,3.395,281,4.43,300,2.352,301,2.317,309,3.769,346,3.51,372,2.622,377,5.088,380,5.088,383,3.156,392,4.244,398,2.575,415,5.701,416,3.793,417,3.573,418,2.622,419,3.448,420,1.571,421,4.361,422,5.117,423,2.672,424,4.833,425,2.724,426,4.303,427,3.451,428,3.245,429,3.342,430,3.793,431,3.573,432,3.975,444,4.199,447,5.242,448,4.922]],["title/api_reference/hiven_request_endpoints.html#usersid",[449,5.95]],["text/api_reference/hiven_request_endpoints.html#usersid",[5,2.868,12,1.727,43,1.739,50,3.2,57,2.389,69,2.337,77,2.751,81,2.317,88,1.983,101,2.899,114,1.642,131,2.371,141,1.354,158,2.697,207,0.982,217,2.266,223,1.298,275,2.751,279,3.292,280,3.395,281,4.43,300,2.352,301,2.317,309,2.697,346,3.51,372,2.622,377,5.088,380,5.088,383,3.156,392,4.244,398,2.575,415,5.701,416,3.793,417,3.573,418,2.622,419,3.448,420,1.81,421,4.361,422,5.117,423,2.672,424,4.833,425,2.724,426,4.303,427,3.451,428,3.245,429,3.342,430,3.793,431,3.573,432,3.975,444,4.199,448,4.922,450,5.242]],["title/api_reference/hiven_request_endpoints.html#streamsmementions",[451,5.95]],["text/api_reference/hiven_request_endpoints.html#streamsmementions",[5,1.997,12,1.849,43,1.747,69,1.436,77,2.946,88,2.588,98,1.794,101,2.019,114,0.818,131,2.539,141,1.038,158,1.879,168,2.768,171,0.69,179,2.768,194,4.297,207,0.684,217,1.578,223,1.39,242,1.278,264,2.587,265,2.17,266,2.642,267,2.642,275,1.916,279,2.293,280,2.364,281,2.946,300,3.07,309,2.889,334,2.536,337,1.278,338,1.81,342,1.123,346,2.445,372,1.826,377,3.9,379,3.019,380,3.9,384,2.783,385,1.243,386,3.13,398,1.794,414,3.177,415,4.37,416,2.642,419,2.643,420,1.467,421,4.454,422,5.226,423,2.862,424,5.389,425,4.308,426,3.487,433,2.842,435,4.848,436,6.719,437,5.188,438,5.188,444,2.925,445,1.976,452,1.691,453,3.651,454,2.445,455,1.826,456,2.445,457,2.842,458,2.293,459,2.642,460,3.381,461,3.247,462,3.019,463,3.651,464,3.262,465,2.09]],["title/api_reference/hiven_request_endpoints.html#usersmerooms",[466,5.95]],["text/api_reference/hiven_request_endpoints.html#usersmerooms",[119,6.319,337,3.122,342,2.743,377,6.194,398,4.381,415,6.941,467,5.232,468,5.775]],["title/api_reference/hiven_request_endpoints.html#house-endpoints",[342,1.342,398,2.144]],["text/api_reference/hiven_request_endpoints.html#house-endpoints",[]],["title/api_reference/hiven_request_endpoints.html#message-endpoints",[88,1.651,398,2.144]],["text/api_reference/hiven_request_endpoints.html#message-endpoints",[]],["title/api_reference/hiven_request_endpoints.html#room-endpoints",[337,1.528,398,2.144]],["text/api_reference/hiven_request_endpoints.html#room-endpoints",[]],["title/api_reference/hiven_restapi.html",[5,1.885,127,1.054,469,3.079]],["text/api_reference/hiven_restapi.html",[2,2.828,5,4.675,12,2.815,15,1.855,16,2.617,17,2.617,18,1.992,20,3.131,25,2.264,43,1.555,45,1.715,47,2.051,50,2.386,56,1.84,69,1.512,86,2.492,87,2.051,98,2.906,105,2.386,112,3.492,113,2.211,114,1.783,127,2.435,141,0.722,149,2.634,153,1.184,159,2.211,163,3.131,168,2.964,171,1.699,177,3.771,211,2.877,217,1.689,229,2.138,235,2.238,244,3.232,275,2.051,280,3.83,289,3.47,296,2.986,298,2.157,299,2.916,300,3.835,301,4.435,304,3.561,372,2.959,373,3.168,374,2.186,375,2.664,376,2.492,377,2.715,378,3.35,381,3.131,382,1.887,383,2.353,384,2.932,385,2.429,394,3.042,398,4.199,399,5.165,403,4.24,406,2.828,412,2.664,414,4.502,417,5.826,418,1.955,419,2.784,434,2.715,445,4.626,468,2.531,469,5.285,470,2.531,471,2.492,472,3.492,473,6.193,474,3.232,475,3.492,476,3.908,477,3.232,478,3.042,479,2.964,480,3.908,481,2.769,482,3.232,483,3.232,484,3.908,485,3.492,486,3.83,487,3.908,488,2.455,489,4.28,490,2.531,491,4.604,492,3.232,493,6.7,494,3.492,495,2.715,496,4.956,497,5.9,498,2.715,499,3.908,500,2.293,501,5.07,502,2.664,503,3.908,504,3.908,505,5.285,506,3.908,507,3.908,508,3.35,509,3.715,510,3.908,511,5.281,512,4.191,513,3.908,514,3.042,515,2.419,516,3.908,517,4.604,518,2.386,519,2.573,520,3.908]],["title/api_reference/hiven_restapi.html#using-the-rest-api",[5,1.885,127,1.054,469,3.079]],["text/api_reference/hiven_restapi.html#using-the-rest-api",[5,5.012,12,3.018,15,3.49,16,4.924,18,3.748,45,3.226,47,3.859,69,1.88,127,2.25,149,3.275,229,4.023,244,6.081,275,3.859,289,4.315,296,3.713,301,3.25,304,4.428,372,3.679,373,3.938,374,4.113,375,5.013,376,4.689,398,4.904,399,4.067,412,5.013,469,6.571,470,4.763,471,4.689,472,6.571,473,5.724,474,6.081,475,6.571,476,7.353,477,6.081,478,5.724,479,5.576,480,7.353,481,5.211,482,6.081,483,6.081,484,7.353]],["title/api_reference/hiven_restapi.html#authentication-header",[300,1.958,381,3.496]],["text/api_reference/hiven_restapi.html#authentication-header",[5,4.181,12,3.091,20,6.123,25,2.425,43,1.496,69,1.954,86,4.873,87,4.011,112,6.83,127,2.339,153,2.315,168,5.796,296,3.859,300,4.557,301,4.148,373,4.094,384,4.652,394,5.95,414,5.992,485,6.83,486,6.078,487,7.643,488,4.801,489,5.531,490,4.95,491,5.95]],["title/api_reference/hiven_restapi.html#writing-a-request-with-a-json-body",[299,1.163,301,1.258,417,1.941,473,2.216]],["text/api_reference/hiven_restapi.html#writing-a-request-with-a-json-body",[]],["title/api_reference/hiven_restapi.html#specifying-the-content-type",[171,0.651,399,1.906,445,1.865]],["text/api_reference/hiven_restapi.html#specifying-the-content-type",[2,4.861,5,3.675,12,2.212,17,4.498,25,2.131,43,1.41,56,3.162,98,3.3,105,4.1,113,3.801,114,1.939,127,2.055,159,3.801,171,1.808,235,3.846,289,3.941,299,2.745,300,3.014,301,3.824,304,4.045,382,3.243,385,2.945,398,3.3,399,5.293,403,5.141,406,4.861,417,4.579,418,3.36,445,4.682,473,5.228,492,5.555,493,8.124,494,6.002,495,4.666,496,6.01,497,7.914,498,4.666,499,6.717,500,3.941,501,5.758,502,4.579,503,6.717,504,6.717,505,7.73,506,6.717,507,6.717,508,5.758,509,4.219,510,6.717]],["title/api_reference/hiven_restapi.html#passing-values-in-the-body",[25,1.093,177,2.197,417,2.349]],["text/api_reference/hiven_restapi.html#passing-values-in-the-body",[43,1.413,50,4.118,98,3.314,114,1.945,141,1.247,149,3.004,163,5.404,171,1.639,177,4.301,211,3.867,217,2.916,280,5.619,298,3.164,299,2.757,301,4.474,372,3.375,377,4.686,378,5.783,383,4.062,385,2.297,398,3.314,399,4.799,403,4.009,417,5.914,419,4.084,434,4.686,445,4.696,468,4.369,473,5.251,489,4.882,491,5.251,493,6.335,496,4.686,501,5.783,509,4.237,511,7.098,512,6.147,513,6.746,514,5.251,515,4.176,516,6.746,517,6.753,518,4.118,519,4.441,520,6.746]],["title/api_reference/hiven_swarm.html",[12,1.135,13,2.268,127,1.054]],["text/api_reference/hiven_swarm.html",[12,3.555,13,6.849,15,3.836,18,4.119,43,1.59,45,3.545,47,4.241,127,2.97,212,4.803,372,4.043,373,4.328,374,4.52,375,5.509,376,5.153,486,5.234,521,5.848,522,8.081]],["title/api_reference/hiven_swarm.html#using-the-hiven-swarm",[12,1.135,13,2.268,127,1.054]],["text/api_reference/hiven_swarm.html#using-the-hiven-swarm",[12,2.904,15,4.185,18,4.493,45,3.867,47,4.626,372,4.41,373,4.722,374,4.931,375,6.01,376,5.621]],["title/api_reference/hiven_swarm.html#getting-started-using-the-hiven-swarm",[12,0.799,13,1.597,127,0.742,486,1.571,521,1.755]],["text/api_reference/hiven_swarm.html#getting-started-using-the-hiven-swarm",[]],["title/api_reference/hiven_swarm.html#logging-into-the-hiven-swarm",[12,1.135,13,2.268,212,2.048]],["text/api_reference/hiven_swarm.html#logging-into-the-hiven-swarm",[]],["title/api_reference/hiven_swarm.html#lifesignal",[522,5.95]],["text/api_reference/hiven_swarm.html#lifesignal",[]],["title/api_reference/object_reference.html",[242,1.207,299,1.408,339,2.494]],["text/api_reference/object_reference.html",[1,1.155,12,1.51,15,0.969,18,1.041,43,1.75,45,0.896,47,1.071,49,1.142,51,1.635,57,0.931,69,2.295,72,1.477,73,2.105,77,2.406,79,1.589,88,0.772,91,1.477,100,1.012,109,1.183,114,0.458,123,1.071,131,0.923,171,1.153,185,0.691,202,1.198,223,1.762,242,1.224,248,1.447,262,2.164,282,2.264,293,1.548,299,0.834,300,2.057,301,1.545,304,1.229,309,2.359,313,0.969,336,1.447,337,1.605,339,1.477,342,1.67,347,1.606,349,1.246,350,2.158,372,1.021,373,1.093,374,1.142,375,1.392,376,1.302,420,1.526,421,4.549,422,5.338,423,2.336,424,5.519,425,5.061,426,1.782,429,1.302,431,1.392,435,1.447,436,5.712,437,1.548,438,1.548,456,1.367,458,1.282,460,2.76,461,4.177,470,1.322,523,2.041,524,2.041,525,2.041,526,2.041,527,1.061,528,2.041,529,1.816,530,5.099,531,4.349,532,5.099,533,5.048,534,2.797,535,5.099,536,1.688,537,2.041,538,1.589,539,2.041,540,1.511,541,1.511,542,2.8,543,0.873,544,2.196,545,2.041,546,2.477,547,2.8,548,2.97,549,2.105,550,2.891,551,2.724,552,0.994,553,1.367,554,1.635,555,3.476,556,1.418,557,1.548,558,1.635,559,1.635,560,1.635,561,1.418,562,1.688,563,3.146,564,1.447,565,1.511,566,1.635,567,1.635,568,1.635,569,1.635,570,1.635,571,1.264,572,1.418,573,2.477,574,2.477,575,1.418,576,1.418]],["title/api_reference/object_reference.html#json-object-reference",[242,1.207,299,1.408,339,2.494]],["text/api_reference/object_reference.html#json-object-reference",[12,2.904,15,4.185,18,4.493,45,3.867,47,4.626,372,4.41,373,4.722,374,4.931,375,6.01,376,5.621]],["title/api_reference/object_reference.html#default-user",[69,1.116,185,1.477]],["text/api_reference/object_reference.html#default-user",[43,1.738,51,4.376,69,1.397,72,3.954,73,3.29,77,2.867,79,4.253,100,1.582,109,3.166,114,1.225,131,2.471,223,1.352,300,2.452,309,2.811,420,1.172,421,4.455,422,5.227,423,2.784,424,5.921,425,4.834,426,3.842,429,3.483,431,3.724,436,6.342,461,4.416,523,5.463,524,5.463,525,5.463,526,5.463,527,2.839,528,5.463,529,2.839,530,7.078,531,6.038,532,7.078,533,5.716,534,3.167,535,7.078]],["title/api_reference/object_reference.html#lazy-user",[69,1.116,536,3.609]],["text/api_reference/object_reference.html#lazy-user",[43,1.72,57,2.997,69,1.681,73,3.959,77,3.45,223,1.628,300,2.95,309,3.383,420,1.41,421,4.46,422,5.232,423,3.351,424,4.885,425,4.433,436,6.834,461,4.759,529,3.416,530,8.012,531,6.835,532,8.012,533,6.47,534,3.585,535,8.012,537,6.574]],["title/api_reference/object_reference.html#objects-for-the-client-user",[69,0.881,100,0.998,242,1.207]],["text/api_reference/object_reference.html#objects-for-the-client-user",[]],["title/api_reference/object_reference.html#privateroom",[262,3.683]],["text/api_reference/object_reference.html#privateroom",[1,3.54,12,2.061,43,1.733,49,3.5,69,2.364,171,1.182,223,1.549,262,3.873,282,4.052,293,4.744,336,4.433,337,2.892,342,1.924,420,1.342,421,4.321,422,5.07,424,4.729,425,5.11,460,3.767,461,3.921,470,4.052,533,4.744,534,2.628,538,4.87,539,6.256,540,4.631,541,4.631,542,5.012,543,1.563,544,3.929,545,2.352,546,4.433,547,5.012,548,3.423,549,3.767,550,5.174]],["title/api_reference/object_reference.html#relationship",[551,3.536]],["text/api_reference/object_reference.html#relationship",[12,2.012,43,1.731,69,2.491,77,3.206,91,4.421,171,1.536,202,3.584,223,1.512,248,4.328,300,2.741,301,3.593,309,3.143,347,2.806,420,1.31,421,4.505,422,5.286,423,3.113,424,5.808,425,4.224,551,4.832,552,2.975,553,4.091,554,4.893,555,6.929,556,4.243,557,4.632,558,4.893,559,4.893,560,4.893,561,4.243,562,5.052]],["title/api_reference/object_reference.html#house",[342,1.83]],["text/api_reference/object_reference.html#house",[]],["title/api_reference/object_reference.html#member",[350,2.801]],["text/api_reference/object_reference.html#member",[43,1.729,69,2.357,342,2.283,347,3.411,349,4.531,350,3.495,421,4.313,422,5.061,424,4.25,460,4.47,461,4.375,533,5.629,534,3.119,545,2.791,550,6.139,563,5.341,564,5.26]],["title/api_reference/object_reference.html#room",[337,2.084]],["text/api_reference/object_reference.html#room",[43,1.738,171,1.269,223,1.663,282,4.35,420,1.44,421,4.406,422,5.169,424,4.953,425,5.251,435,4.759,436,6.524,437,5.093,438,5.093,460,4.045,461,3.188,542,5.381,543,1.678,544,4.219,545,2.525,546,4.759,547,5.381,548,3.675,549,4.045]],["title/api_reference/object_reference.html#entity",[313,2.824]],["text/api_reference/object_reference.html#entity",[43,1.734,171,1.43,223,1.874,420,1.623,421,4.343,422,5.095,425,4.847,548,4.141,565,5.602,566,6.063,567,6.063,568,6.063,569,6.063,570,6.063]],["title/api_reference/object_reference.html#role",[563,3.448]],["text/api_reference/object_reference.html#role",[43,1.727,123,3.859,223,1.82,304,4.428,342,2.262,350,3.461,420,1.577,421,4.299,422,5.044,425,4.761,545,2.764,548,4.023,563,4.261,571,4.552,572,5.108,573,6.492,574,6.492,575,5.108,576,5.108]],["title/api_reference/object_reference.html#message",[88,2.251]],["text/api_reference/object_reference.html#message",[]],["title/api_reference/object_reference.html#embed",[458,3.737]],["text/api_reference/object_reference.html#embed",[]],["title/api_reference/object_reference.html#attachment",[456,3.985]],["text/api_reference/object_reference.html#attachment",[]],["title/api_reference/swarm_events.html",[12,1.135,13,2.268,92,1.257]],["text/api_reference/swarm_events.html",[1,0.23,12,0.376,13,0.267,15,0.193,18,0.207,21,0.662,27,0.325,28,0.348,29,0.348,30,0.348,31,0.348,32,0.335,33,0.316,34,0.348,36,0.348,37,0.348,38,0.348,39,0.348,40,0.348,41,0.649,43,1.757,45,0.178,47,0.213,49,0.227,69,1.678,73,0.244,77,2.681,80,0.294,88,0.297,92,0.863,98,0.199,100,0.427,102,0.248,105,0.248,114,1.43,125,0.287,131,0.809,133,0.213,137,0.267,140,0.277,141,0.075,158,0.209,165,0.335,171,0.849,178,0.188,183,0.316,186,0.282,187,0.362,194,0.716,202,2.997,212,0.241,214,0.528,223,1.814,255,0.716,257,3.291,259,0.79,264,0.808,265,1.063,266,0.826,267,0.826,270,0.335,273,0.325,275,0.213,282,0.739,285,0.255,296,3.016,298,0.148,299,2.485,300,2.16,304,2.144,306,0.362,307,0.325,309,2.628,313,0.7,314,0.611,330,0.186,331,0.255,337,0.73,342,1.158,347,1.987,349,2.042,350,1.575,356,0.325,358,0.325,359,0.335,361,0.277,372,0.203,373,0.217,374,0.439,375,0.277,376,0.259,384,0.389,403,0.241,407,0.316,408,0.595,419,2.862,420,1.803,421,4.615,422,5.412,423,2.742,424,5.497,425,4.885,426,2.113,427,0.751,428,0.486,429,0.727,431,0.535,435,1.268,436,3.064,437,1.118,438,1.118,445,0.617,455,1.56,456,0.526,457,0.316,458,0.493,459,0.826,460,4.331,461,3.802,462,1.22,464,0.362,465,1.024,467,0.238,500,0.238,518,0.696,527,3.159,529,0.211,531,0.914,533,1.357,534,0.479,542,0.914,543,0.285,544,0.716,545,2.677,546,1.268,547,0.914,548,2.794,549,1.077,550,0.649,551,0.241,552,2.961,562,0.335,563,2.96,564,2.042,565,1.092,566,1.181,567,1.181,568,1.181,569,1.181,570,1.181,571,2.204,572,2.473,573,3.902,574,3.902,575,2.473,576,2.473,577,0.362,578,0.406,579,0.316,580,0.207,581,0.316,582,0.406,583,0.406,584,0.406,585,0.308,586,0.406,587,0.406,588,0.673,589,0.737,590,0.406,591,0.406,592,0.406,593,0.406,594,0.362,595,0.595,596,0.406,597,0.362,598,0.406,599,0.348,600,0.348,601,0.808,602,0.362,603,0.325,604,0.978,605,0.737,606,0.737,607,0.649,608,0.611,609,0.737,610,0.737,611,0.737,612,0.362,613,0.348,614,0.348,615,0.348,616,0.649,617,0.335,618,0.348,619,0.649,620,0.629,621,0.362,622,0.348,623,0.362,624,0.406,625,0.348,626,0.406,627,0.737,628,0.737,629,0.362,630,0.406,631,0.702,632,0.406,633,0.406,634,0.406,635,0.486,636,0.406,637,0.406,638,0.362,639,0.406,640,0.406,641,0.406,642,0.362,643,0.348,644,0.406,645,0.406,646,0.406,647,0.406,648,0.673,649,0.348,650,0.213,651,0.629,652,0.406,653,0.406,654,0.702,655,0.406,656,0.348,657,0.406,658,0.406,659,0.406,660,0.737,661,0.737,662,0.737,663,0.737,664,0.406,665,0.406,666,0.406,667,0.406,668,0.406,669,0.406,670,0.406,671,0.406,672,0.406]],["title/api_reference/swarm_events.html#hiven-swarm-events",[12,1.135,13,2.268,92,1.257]],["text/api_reference/swarm_events.html#hiven-swarm-events",[12,2.904,15,4.185,18,4.493,45,3.867,47,4.626,372,4.41,373,4.722,374,4.931,375,6.01,376,5.621]],["title/api_reference/swarm_events.html#init_state",[577,5.317]],["text/api_reference/swarm_events.html#init_state",[1,1.314,21,2.65,43,1.755,49,1.299,69,1.822,73,1.399,77,3.454,80,1.681,92,1.422,98,1.141,100,1.129,102,1.418,105,1.418,114,0.874,125,1.646,137,1.529,140,1.583,141,0.429,165,1.921,171,0.737,202,4.181,212,1.38,223,1.764,255,3.166,257,1.257,282,1.504,285,1.459,296,1.173,298,0.847,299,0.949,300,2.953,309,3.387,337,0.813,347,2.316,349,1.418,361,1.583,374,1.299,407,1.808,419,1.093,420,1.882,421,4.595,422,5.391,423,3.354,424,6.071,425,4.295,435,2.763,436,4.858,437,2.957,438,2.957,460,3.035,461,3.382,527,1.207,529,1.207,533,2.957,534,0.976,542,1.861,543,0.58,544,1.459,545,2.474,546,1.646,547,1.861,548,1.271,549,1.399,550,1.921,551,1.38,552,1.131,562,1.921,563,1.346,564,1.646,578,2.323,579,1.808,580,1.184,581,1.808,582,2.323,583,2.323,584,2.323,585,1.761,586,2.323,587,2.323,588,1.991,589,2.181,590,2.323,591,2.323,592,2.323,593,2.323,594,2.075,595,1.761,596,2.323,597,2.075,598,2.323]],["title/api_reference/swarm_events.html#user_update",[270,4.921]],["text/api_reference/swarm_events.html#user_update",[43,1.739,69,1.681,77,3.45,114,1.474,131,2.973,223,1.628,257,3.558,273,5.267,296,3.32,299,2.687,300,2.95,309,3.383,419,3.095,420,1.41,421,4.46,422,5.232,423,3.351,424,5.423,425,3.416,426,4.349,427,4.328,429,4.192,431,4.482,460,3.959,461,3.121,527,3.416,552,3.202]],["title/api_reference/swarm_events.html#presence_update",[39,5.101]],["text/api_reference/swarm_events.html#presence_update",[43,1.735,69,1.74,77,3.571,114,1.525,202,3.993,223,1.685,257,3.683,296,3.436,299,2.781,300,3.054,309,3.502,419,3.203,420,1.459,421,4.495,422,5.275,423,3.468,424,5.815,425,3.536,460,4.098,461,3.23,527,3.536,552,3.314,599,5.834]],["title/api_reference/swarm_events.html#relationship_update",[38,5.101]],["text/api_reference/swarm_events.html#relationship_update",[43,1.74,69,2.152,77,3.379,114,1.443,171,1.216,223,1.594,257,3.485,296,3.251,299,2.631,309,3.313,419,3.031,420,1.805,421,4.551,422,5.34,423,3.281,424,3.686,425,4.373,427,4.238,428,3.985,429,4.105,460,3.877,461,3.056,527,3.345,552,3.135,600,5.519,601,4.562]],["title/api_reference/swarm_events.html#message_create",[602,5.317]],["text/api_reference/swarm_events.html#message_create",[43,1.755,69,1.902,77,3.379,88,1.428,114,0.847,131,1.708,171,0.422,194,2.372,202,3.778,223,1.73,257,1.21,264,2.676,265,2.244,266,2.733,267,2.733,296,1.129,299,1.543,300,2.89,304,1.346,309,3.313,342,1.162,347,1.027,349,1.365,350,1.778,384,1.872,419,1.778,420,1.746,421,4.645,422,5.45,423,3.282,424,5.909,425,5.066,426,2.937,436,2.574,445,2.044,455,1.889,456,1.497,459,2.733,460,5.069,461,4.11,462,3.123,465,2.162,527,1.162,533,1.695,534,0.939,545,1.843,548,1.223,550,1.849,552,1.089,563,2.188,564,1.584,571,1.384,572,1.553,573,2.676,574,2.676,575,1.553,576,1.553,601,1.584,603,1.791,604,3.237,605,2.099,606,2.099,607,1.849,608,1.74,609,2.099,610,2.099,611,2.099]],["title/api_reference/swarm_events.html#message_delete",[612,5.317]],["text/api_reference/swarm_events.html#message_delete",[43,1.709,114,1.793,257,4.329,296,4.038,299,3.269,419,3.765,421,4.262,422,5.001,455,4.001,527,4.156,545,3.007,552,3.895,595,6.065,613,6.856]],["title/api_reference/swarm_events.html#message_update",[40,5.101]],["text/api_reference/swarm_events.html#message_update",[43,1.75,69,1.13,77,2.32,114,0.991,171,1.225,194,2.776,202,2.594,223,1.094,257,2.393,264,3.132,265,2.627,266,3.199,267,3.199,296,2.232,299,1.807,300,1.984,309,2.275,419,2.081,420,1.39,421,4.557,422,5.347,423,2.253,424,5.154,425,5.181,426,2.253,435,3.132,436,5.764,437,3.352,438,3.352,445,2.393,455,2.211,456,2.96,457,3.441,458,4.072,459,3.199,460,5.091,461,4.013,462,3.656,464,3.95,465,2.531,527,2.297,545,1.662,552,2.153,604,3.789,605,4.151,606,4.151,607,3.656,608,3.441,609,4.151,610,4.151,611,4.151,614,3.789]],["title/api_reference/swarm_events.html#room_create",[27,4.767]],["text/api_reference/swarm_events.html#room_create",[43,1.723,114,1.722,171,1.451,223,1.902,257,4.157,296,3.878,299,3.139,419,3.616,420,1.647,421,4.188,422,4.913,425,4.891,527,3.991,545,2.887,548,4.202,552,3.741,615,6.584]],["title/api_reference/swarm_events.html#room_update",[28,5.101]],["text/api_reference/swarm_events.html#room_update",[43,1.723,114,1.722,171,1.451,223,1.902,257,4.157,296,3.878,299,3.139,419,3.616,420,1.647,421,4.188,422,4.913,425,4.891,527,3.991,545,2.887,548,4.202,552,3.741,616,6.352]],["title/api_reference/swarm_events.html#room_delete",[29,5.101]],["text/api_reference/swarm_events.html#room_delete",[43,1.699,114,1.84,257,4.443,296,4.145,299,3.355,419,3.864,420,1.761,421,4.032,422,4.731,527,4.266,545,3.086,552,3.998,616,6.789]],["title/api_reference/swarm_events.html#house_join",[617,4.921]],["text/api_reference/swarm_events.html#house_join",[43,1.754,69,1.262,77,1.625,114,0.694,171,0.933,202,1.817,214,1.434,223,2.023,257,1.676,282,2.006,296,1.564,299,1.266,300,1.39,304,2.972,309,1.594,313,1.47,337,1.728,347,1.423,349,1.89,350,2.323,419,1.458,420,1.752,421,4.604,422,5.402,423,2.516,424,5.383,425,5.077,460,4.92,461,4.068,527,1.609,531,2.481,542,2.481,543,0.774,544,1.945,545,2.639,546,3.497,547,2.481,548,3.841,549,1.865,552,1.508,563,3.566,564,2.194,565,2.292,566,2.481,567,2.481,568,2.481,569,2.481,570,2.481,571,3.055,572,3.429,573,5.433,574,5.433,575,3.429,576,3.429,618,2.655,619,2.561,620,2.481]],["title/api_reference/swarm_events.html#house_update",[621,5.317]],["text/api_reference/swarm_events.html#house_update",[43,1.754,69,1.262,77,1.625,114,0.694,171,0.933,202,1.817,214,1.434,223,2.023,257,1.676,282,2.006,296,1.564,299,1.266,300,1.39,304,2.972,309,1.594,313,1.47,337,1.728,347,1.423,349,1.89,350,2.323,419,1.458,420,1.752,421,4.604,422,5.402,423,2.516,424,5.383,425,5.077,460,4.92,461,4.068,527,1.609,531,2.481,542,2.481,543,0.774,544,1.945,545,2.639,546,3.497,547,2.481,548,3.841,549,1.865,552,1.508,563,3.566,564,2.194,565,2.292,566,2.481,567,2.481,568,2.481,569,2.481,570,2.481,571,3.055,572,3.429,573,5.433,574,5.433,575,3.429,576,3.429,619,2.561,620,2.481,622,2.655]],["title/api_reference/swarm_events.html#house_leave",[623,5.317]],["text/api_reference/swarm_events.html#house_leave",[43,1.699,114,1.84,257,4.443,296,4.145,299,3.355,419,3.864,420,1.761,421,4.032,422,4.731,527,4.266,545,3.086,552,3.998,624,8.209]],["title/api_reference/swarm_events.html#house_member_join",[30,5.101]],["text/api_reference/swarm_events.html#house_member_join",[43,1.748,69,1.359,77,2.788,114,1.191,202,3.118,223,1.83,257,2.876,296,2.683,299,2.172,300,2.385,304,3.2,309,2.734,349,3.243,419,2.501,420,1.586,421,4.516,422,5.298,423,2.708,424,5.264,425,4.777,460,3.2,461,3.51,527,2.761,545,2.779,548,2.907,552,2.588,563,4.285,571,3.289,572,3.691,573,5.239,574,5.239,575,3.691,576,3.691,625,4.555,626,5.314,627,4.99,628,4.99,629,4.748]],["title/api_reference/swarm_events.html#house_member_leave",[31,5.101]],["text/api_reference/swarm_events.html#house_member_leave",[43,1.747,69,1.904,114,1.203,202,3.15,223,1.329,257,2.906,296,2.711,299,2.194,304,3.233,307,4.301,347,2.466,349,3.277,419,2.527,420,1.834,421,4.586,422,5.381,425,3.869,426,2.736,460,3.233,461,3.535,527,2.79,545,2.799,548,2.937,552,2.615,563,4.316,564,3.804,571,3.323,572,3.729,573,5.277,574,5.277,575,3.729,576,3.729,630,5.369,631,6.654,632,5.369,633,5.369]],["title/api_reference/swarm_events.html#house_member_enter",[32,4.921]],["text/api_reference/swarm_events.html#house_member_enter",[43,1.747,69,1.809,77,2.618,92,1.82,100,1.444,114,1.118,131,2.256,202,2.927,223,1.751,257,2.7,296,2.519,299,2.039,304,3.004,309,2.567,342,2.176,347,2.292,349,3.045,350,2.348,358,3.997,408,3.783,419,2.348,420,1.762,421,4.563,422,5.354,423,2.543,424,5.12,425,4.27,426,2.543,460,3.004,461,2.368,527,2.592,545,2.659,548,2.729,552,2.43,563,4.099,564,3.535,571,3.088,572,3.466,573,5.012,574,5.012,575,3.466,576,3.466,634,4.989,635,3.088,636,4.989]],["title/api_reference/swarm_events.html#house_member_exit",[33,4.632]],["text/api_reference/swarm_events.html#house_member_exit",[43,1.687,69,2.436,92,2.858,100,2.269,114,1.757,257,4.241,296,3.957,299,3.203,342,2.931,356,6.277,359,6.48,408,5.942,419,3.689,420,1.681,421,3.921,422,4.6,527,4.072,545,2.946,552,3.816,635,4.851]],["title/api_reference/swarm_events.html#house_member_update",[34,5.101]],["text/api_reference/swarm_events.html#house_member_update",[43,1.749,69,1.757,77,2.513,114,1.073,131,2.166,202,2.81,223,1.701,257,2.592,296,2.418,299,1.957,300,2.149,304,2.884,309,2.464,347,2.2,349,2.923,419,2.254,420,1.723,421,4.562,422,5.352,423,2.441,424,5.025,425,4.174,426,3.501,427,3.153,428,2.964,429,3.053,431,3.265,435,3.393,436,5.477,437,3.631,438,3.631,460,4.137,461,3.261,527,2.488,545,1.8,548,2.62,552,2.332,563,3.981,564,3.393,571,2.964,572,3.327,573,4.868,574,4.868,575,3.327,576,3.327,637,4.789]],["title/api_reference/swarm_events.html#house_members_chunk",[638,5.317]],["text/api_reference/swarm_events.html#house_members_chunk",[43,1.75,69,1.259,77,2.585,114,1.104,178,2.281,202,2.89,223,1.735,257,2.666,296,2.487,299,2.013,300,2.21,304,2.966,309,2.535,342,1.515,347,2.263,349,3.007,350,3.3,419,2.319,420,1.75,421,4.58,422,5.344,423,2.51,424,5.379,425,4.24,460,2.966,461,2.338,527,2.559,545,3.068,548,2.695,552,2.399,563,4.062,564,3.49,571,3.049,572,3.422,573,4.967,574,4.967,575,3.422,576,3.422,639,4.926,640,4.926,641,4.926]],["title/api_reference/swarm_events.html#house_entities_update",[642,5.317]],["text/api_reference/swarm_events.html#house_entities_update",[43,1.742,114,1.539,171,1.297,223,1.7,257,3.716,296,3.466,299,2.806,313,3.259,314,5.344,419,3.232,420,1.472,421,4.333,422,5.084,425,4.559,527,3.567,545,2.581,548,3.756,552,3.344,565,5.081,566,5.5,567,5.5,568,5.5,569,5.5,570,5.5]],["title/api_reference/swarm_events.html#batch_house_member_update",[36,5.101]],["text/api_reference/swarm_events.html#batch_house_member_update",[43,1.749,69,1.686,77,2.374,114,1.478,202,2.654,223,1.632,257,2.448,296,2.284,299,1.849,300,2.03,304,2.724,309,2.328,347,2.078,349,2.761,350,3.103,419,2.129,420,1.833,421,4.523,422,5.307,423,2.306,424,5.202,425,4.441,436,3.084,460,4.684,461,4.764,462,3.741,527,2.35,533,4.999,534,1.9,545,2.924,548,2.475,552,2.203,563,3.82,564,3.205,571,2.8,572,3.142,573,4.672,574,4.672,575,3.142,576,3.142,588,3.878,589,4.248,643,3.878,644,4.523,645,4.523,646,4.523,647,4.523]],["title/api_reference/swarm_events.html#house_entity_update",[37,5.101]],["text/api_reference/swarm_events.html#house_entity_update",[43,1.738,114,1.506,171,1.269,214,3.111,223,1.663,257,3.635,296,3.391,299,2.745,313,3.188,314,5.228,419,3.162,420,1.44,421,4.304,422,5.049,425,4.973,460,4.045,461,4.106,527,3.49,531,5.381,545,2.525,548,3.675,552,3.271,565,4.971,566,5.381,567,5.381,568,5.381,569,5.381,570,5.381]],["title/api_reference/swarm_events.html#house_down",[648,5.101]],["text/api_reference/swarm_events.html#house_down",[43,1.681,92,2.584,114,2.006,158,3.646,171,1.338,183,5.515,186,4.921,187,6.331,257,3.835,275,3.718,296,3.577,299,2.896,306,6.331,330,3.255,331,4.45,342,3.27,403,4.21,419,3.335,420,1.519,421,2.915,422,3.421,426,3.611,500,4.157,518,5.989,527,3.681,545,2.663,552,3.45,648,6.073,649,6.073,650,3.718,651,5.675,652,7.085,653,7.085,654,7.998,655,7.085]],["title/api_reference/swarm_events.html#typing_start",[41,4.921]],["text/api_reference/swarm_events.html#typing_start",[12,2.166,41,5.437,43,1.737,92,2.398,114,1.474,171,1.612,257,4.618,265,5.071,296,3.32,299,2.687,337,2.302,342,2.022,347,3.02,419,3.095,421,4.125,422,4.84,425,4.922,455,4.268,465,4.885,467,3.858,527,4.433,545,2.471,552,4.155,601,4.659,651,5.267,656,5.636,657,6.574,658,6.574]],["title/api_reference/swarm_events.html#call_create",[659,5.95]],["text/api_reference/swarm_events.html#call_create",[43,1.74,114,1.648,257,3.98,259,3.938,296,3.713,299,3.005,347,4.209,419,3.461,421,4.107,422,4.819,455,3.679,527,3.821,549,4.428,552,3.581,660,6.905,661,6.905,662,6.905,663,6.905]],["title/api_reference/swarm_events.html#call_update",[664,5.95]],["text/api_reference/swarm_events.html#call_update",[43,1.746,114,1.42,133,3.323,257,3.428,259,3.392,296,3.198,299,2.588,347,3.825,349,3.866,419,2.981,421,4.224,422,4.771,425,3.291,426,4.741,435,4.487,436,4.317,455,4.165,527,3.291,549,3.813,552,3.084,627,5.947,628,5.947,660,5.947,661,5.947,662,5.947,663,5.947,665,6.333,666,6.333,667,6.333,668,6.333,669,6.333,670,6.333]],["title/api_reference/swarm_events.html#call_delete",[671,5.95]],["text/api_reference/swarm_events.html#call_delete",[43,1.684,114,1.89,257,4.564,259,4.516,296,4.258,299,3.446,419,3.969,421,3.47,422,4.071,455,4.218,527,4.382,552,4.107]],["title/api_reference/swarm_events.html#role_update",[672,5.95]],["text/api_reference/swarm_events.html#role_update",[43,1.735,114,1.603,223,1.77,257,3.87,259,3.829,296,3.61,299,2.922,304,4.306,419,3.366,420,1.533,421,4.256,422,4.993,425,5.374,527,3.715,545,2.688,548,3.912,552,3.482,571,4.426,572,4.967,575,4.967,576,4.967]],["title/getting_started/index.html",[673,5.317]],["text/getting_started/index.html",[1,4.65,2,2.022,3,1.353,4,2.603,5,2.056,6,3.222,7,1.482,8,5.643,9,2.175,11,4.34,12,2.959,13,2.474,14,2.178,15,2.156,16,3.042,18,0.804,19,2.068,21,2.968,23,1.353,25,1.193,26,1.545,43,1.659,45,1.226,47,1.466,48,1.039,49,1.563,50,2.773,54,1.168,57,1.273,58,1.168,66,1.682,67,0.95,68,2.668,69,0.961,70,1.229,71,2.596,76,0.977,85,1.305,86,2.397,87,0.828,88,1.718,90,3.262,92,3.524,93,1.305,96,1.373,97,2.152,98,0.776,100,2.258,102,0.963,105,0.963,106,1.039,109,0.915,111,1.353,113,2.127,114,1.748,119,2.663,120,1.118,125,1.118,127,2.907,131,3.527,133,0.828,134,1.19,137,1.039,140,1.076,141,0.695,142,1.98,145,3.914,146,2.926,149,1.244,153,0.478,159,0.893,160,1.305,164,2.991,167,1.941,169,1.118,170,0.559,171,1.085,174,2.068,177,1.006,178,1.294,180,1.142,182,1.41,185,0.534,186,1.096,205,1.353,207,0.973,211,0.636,213,0.991,223,0.692,226,2.496,229,0.864,235,1.6,237,4.313,240,1.305,242,2.01,248,1.118,255,0.991,260,1.781,268,1.871,269,2.926,271,2.238,274,2.552,275,1.972,286,1.613,293,3.938,297,1.168,298,2.925,299,1.142,301,1.661,308,0.938,310,0.641,318,3.536,328,2.72,332,1.118,338,0.782,339,1.142,340,1.168,343,1.41,346,1.871,348,0.864,361,1.076,363,2.178,372,0.79,373,1.496,382,1.349,383,2.736,384,0.782,385,0.951,390,0.991,394,1.229,395,1.229,397,1.229,399,2.079,403,1.66,412,1.076,414,4.273,416,1.142,418,0.79,428,0.977,435,2.663,443,1.229,445,0.854,452,1.294,454,1.871,470,1.809,471,3.311,473,2.175,475,1.41,477,1.305,479,1.197,486,1.022,488,2.361,490,2.942,495,1.096,496,1.941,498,1.941,500,2.666,501,2.395,502,3.914,505,1.41,509,3.606,511,2.068,512,1.118,515,0.977,517,3.536,519,2.474,529,1.953,534,0.663,556,1.941,557,2.119,585,1.197,588,1.353,603,2.238,635,2.327,651,1.264,673,2.496,674,1.41,675,2.496,676,1.578,677,1.578,678,2.175,679,2.773,680,2.395,681,1.353,682,1.578,683,3.363,684,1.305,685,3.419,686,1.353,687,1.578,688,1.41,689,1.578,690,5.323,691,1.197,692,4.06,693,2.794,694,3.759,695,3.759,696,4.16,697,1.197,698,1.41,699,1.578,700,1.305,701,1.096,702,1.578,703,1.578,704,4.249,705,1.578,706,1.578,707,1.578,708,1.578,709,1.578,710,1.578,711,1.057,712,1.578,713,2.624,714,2.624,715,4.16,716,1.941,717,1.41,718,1.578,719,2.395,720,3.359,721,1.168,722,3.53,723,2.119,724,0.963,725,1.41,726,1.41,727,1.578,728,2.794,729,1.578,730,1.578,731,1.578,732,1.578,733,1.305,734,1.41,735,1.41,736,1.578,737,3.156,738,3.536,739,1.578,740,2.022,741,1.578,742,4.786,743,1.071,744,3.011,745,3.53,746,0.765,747,1.578,748,2.624,749,1.578,750,1.578,751,1.264,752,1.353,753,1.305,754,1.809,755,1.096,756,1.578,757,1.578,758,2.119,759,0.624,760,1.578,761,1.353,762,1.305,763,2.794,764,2.794,765,1.578,766,1.353,767,1.353,768,1.197,769,1.305,770,1.578,771,1.59,772,1.159,773,2.395,774,0.883,775,1.578,776,1.41,777,1.197,778,1.578,779,1.578,780,1.41,781,1.229,782,1.41,783,1.578,784,1.41,785,2.395,786,1.578,787,1.578,788,1.41,789,1.022]],["title/getting_started/index.html#quickstart",[673,5.317]],["text/getting_started/index.html#quickstart",[1,5.556,2,4.509,3,5.342,4,3.078,5,4.507,6,5.342,7,5.852,9,4.85,11,4.995,12,2.714,21,3.697,47,3.27,88,2.357,90,3.914,92,3.581,93,5.153,96,3.062,106,4.102,113,3.526,114,1.397,127,2.824,131,4.44,134,2.655,140,4.248,146,4.85,164,4.102,170,2.207,207,1.167,235,3.568,237,4.329,242,2.182,260,3.973,293,7.445,328,4.509,363,4.774,373,3.337,382,3.977,452,2.886,471,5.253,473,4.85,490,4.036,500,4.834,502,5.616,505,5.568,517,4.85,673,5.568,674,5.568,675,7.361,676,6.231,677,6.231,678,4.85,679,3.803,680,5.342,681,5.342,682,6.231,683,4.612,684,5.153]],["title/getting_started/index.html#environment",[683,4.404]],["text/getting_started/index.html#environment",[1,4.221,4,2.787,8,8.068,11,4.037,15,3.541,23,6.394,43,1.099,127,2.283,142,5.286,226,8.26,237,7.294,275,4.851,328,5.398,385,2.539,490,4.831,500,4.377,529,4.803,556,6.421,557,7.01,678,5.807,679,4.553,683,5.521,685,6.086,686,6.394,687,7.459,688,6.666,689,7.459]],["title/getting_started/index.html#installation",[690,5.101]],["text/getting_started/index.html#installation",[1,4.724,4,2.376,8,6.042,15,3.018,16,6.242,19,6.179,43,1.23,48,4.186,50,3.881,98,3.124,111,5.451,120,4.506,127,2.555,149,2.832,174,4.707,177,4.054,182,5.682,186,4.417,229,3.479,248,4.506,275,3.337,299,2.599,328,4.602,361,4.335,363,3.685,372,3.181,435,6.605,495,4.417,498,4.417,509,3.994,683,4.707,685,4.186,690,9.043,691,4.822,692,8.844,693,8.349,694,9.321,695,9.321,696,6.688,697,4.822,698,5.682,699,6.359,700,5.259,701,4.417,702,6.359,703,6.359,704,4.707,705,6.359,706,6.359,707,6.359,708,6.359,709,6.359,710,6.359,711,4.258,712,6.359]],["title/getting_started/index.html#basic-concept",[713,4.098,714,4.098]],["text/getting_started/index.html#basic-concept",[1,4.412,6,6.684,8,5.642,11,4.22,21,3.499,57,3.554,69,2.429,85,6.448,90,4.897,92,3.465,96,3.831,119,5.525,146,6.069,237,5.416,268,5.221,298,2.844,399,5.254,471,6.056,588,6.684,713,7.322,714,7.322,715,7.609,716,5.416,717,6.967,718,7.797,719,6.684,720,6.967,721,5.771]],["title/getting_started/index.html#the-hiven-swarm",[12,1.438,13,2.873]],["text/getting_started/index.html#the-hiven-swarm",[1,3.991,12,3.225,13,5.875,25,2.238,58,5.22,69,1.803,88,3.376,90,5.606,92,3.754,102,4.305,105,4.305,114,2.001,127,2.158,149,3.141,164,5.875,174,5.22,237,4.899,260,4.497,268,4.723,271,5.65,274,4.385,299,2.882,318,5.49,403,4.191,454,4.723,470,4.568,486,4.568,496,6.2,509,4.43,511,5.22,519,4.643,635,4.366,685,4.643,704,5.22,720,6.302,722,8.381,723,5.348,724,4.305,725,6.302,726,6.302,727,7.053]],["title/getting_started/index.html#event-listening-with-the-eventhandler",[21,1.546,92,1.257,318,2.682]],["text/getting_started/index.html#event-listening-with-the-eventhandler",[1,2.823,4,3.071,8,3.61,9,3.883,11,3.829,12,2.707,14,2.891,21,3.688,26,2.759,43,1.696,49,2.791,66,3.004,70,3.883,71,2.256,86,4.51,88,1.887,90,3.133,92,3.876,97,2.856,100,2.839,113,2.823,125,3.535,127,2.736,137,3.284,160,4.126,164,3.284,207,0.934,213,3.133,223,1.751,240,4.126,269,3.883,274,3.475,298,1.82,308,2.965,310,2.025,318,5.506,338,2.473,343,4.458,373,2.672,383,4.259,384,2.473,394,3.883,395,3.883,399,2.759,403,2.965,414,2.823,428,3.088,445,2.7,488,3.133,501,6.064,512,3.535,517,6.397,519,3.284,534,2.096,603,5.666,635,4.379,685,3.284,696,3.997,704,3.693,715,5.666,720,4.458,722,4.685,723,3.783,728,7.074,729,4.989,730,4.989,731,4.989,732,4.989,733,4.126,734,4.458,735,4.458,736,4.989,737,3.466,738,5.506,739,4.989,740,3.61,741,4.989,742,3.61,743,1.028,744,6.583,745,4.685]],["title/getting_started/index.html#using-openhivenpy",[1,2.469,127,1.335]],["text/getting_started/index.html#using-openhivenpy",[]],["title/getting_started/index.html#using-a-userclient",[127,1.335,742,3.158]],["text/getting_started/index.html#using-a-userclient",[4,2.206,11,3.856,12,2.959,14,3.421,15,1.85,18,1.987,21,1.749,25,1.873,43,1.708,45,1.71,49,2.181,57,1.777,67,2.347,68,3.043,71,3.593,86,2.486,92,2.898,97,3.38,100,2.472,113,2.206,114,1.323,119,2.762,127,2.855,131,4.062,133,2.046,141,0.721,142,2.762,145,5.82,159,2.206,167,4.1,169,2.762,171,1.346,180,2.821,185,1.32,205,3.342,207,0.73,211,1.572,242,2.067,269,4.595,274,1.915,286,1.673,298,3.403,301,1.723,332,2.762,339,2.821,383,2.347,385,1.327,390,2.448,397,3.035,414,5.674,416,2.821,418,1.95,443,3.035,454,2.611,490,2.525,498,2.708,502,4.024,509,4.991,515,2.413,529,2.026,651,3.123,679,3.603,696,4.729,704,4.369,737,4.949,738,4.595,740,2.821,742,5.75,743,1.638,745,5.543,746,0.793,747,3.898,748,3.661,749,3.898,750,3.898,751,3.123,752,3.342,753,3.224,754,2.525,755,2.708,756,3.898,757,3.898,758,2.956,759,1.541,760,3.898,761,3.342,762,3.224,763,5.903,764,5.903,765,3.898,766,3.342,767,3.342,768,2.956,769,3.224,770,3.898,771,3.014,772,1.905,773,5.06,774,2.181,775,3.898,776,3.483,777,2.956,778,3.898]],["title/getting_started/index.html#using-a-botclient",[127,1.335,758,3.309]],["text/getting_started/index.html#using-a-botclient",[6,6.52,11,5.484,12,2.505,16,5.093,26,4.207,43,1.12,50,5.711,54,5.629,66,4.58,68,3.583,71,3.44,100,2.202,119,5.389,127,2.327,131,4.231,146,5.92,178,3.522,207,1.424,235,4.355,297,5.629,298,2.774,471,4.849,502,5.185,716,5.283,719,6.52,742,6.77,746,1.547,748,7.142,779,7.606,780,6.796,781,5.92,782,6.796]],["title/getting_started/index.html#hiven-types",[12,1.438,171,0.825]],["text/getting_started/index.html#hiven-types",[1,5.211,2,4.491,5,3.395,8,4.491,12,2.706,15,2.946,43,0.914,45,2.723,47,3.257,50,3.788,68,3.527,76,3.842,87,3.257,92,2.264,109,3.597,114,2.396,127,2.514,134,2.644,141,1.519,145,4.231,153,1.88,171,1.552,178,2.874,207,1.162,242,3.225,255,3.898,271,4.972,286,3.526,293,4.706,298,3.359,301,3.631,340,4.594,346,5.502,348,3.395,383,3.737,412,4.231,452,2.874,470,4.02,473,4.831,475,5.546,477,5.132,479,4.706,488,5.16,490,4.02,500,3.642,502,4.231,511,4.594,519,4.086,585,4.706,680,5.32,704,4.594,715,4.972,746,1.263,754,4.02,783,6.206,784,5.546,785,7.043,786,6.206,787,6.206,788,5.546,789,4.02]],["title/getting_started/deploying_your_first_bot.html",[12,0.938,131,1.287,790,2.354,791,2.44]],["text/getting_started/deploying_your_first_bot.html",[1,3.611,2,3.732,11,3.454,12,2.756,15,1.554,17,2.192,19,3.817,23,2.806,25,2.298,43,1.337,47,1.718,50,1.998,51,2.622,58,3.817,69,2.239,73,5.756,76,2.026,90,2.056,92,1.194,95,2.231,96,2.534,98,3.135,100,2.281,102,3.895,109,2.989,114,0.734,127,2.216,130,2.155,131,4.699,133,2.706,134,2.719,137,2.155,140,4.35,141,0.605,145,2.231,168,2.482,169,3.654,171,0.974,180,2.369,189,3.583,203,3.395,207,0.966,209,2.12,242,1.146,244,2.707,259,1.753,274,2.534,275,2.706,285,2.056,296,1.653,301,2.279,304,1.971,310,2.094,318,2.548,328,2.369,330,1.504,332,2.319,339,3.732,345,2.925,348,1.791,372,1.638,373,3.878,374,1.831,375,2.231,381,4.131,382,1.58,383,3.106,385,1.114,394,2.548,395,2.548,412,3.516,414,5.608,416,2.369,452,1.516,470,4.133,471,2.087,474,4.265,479,3.911,485,2.925,486,5.102,488,3.239,492,2.707,500,3.744,502,4.35,509,2.056,515,3.192,517,4.968,529,1.701,551,1.945,553,2.192,556,2.274,557,2.482,558,2.622,629,2.925,678,4.015,679,4.42,697,2.482,704,2.423,711,2.192,716,4.433,721,4.723,723,2.482,742,3.732,755,2.274,758,4.839,766,4.421,768,2.482,769,4.265,782,2.925,790,4.265,791,2.806,792,2.192,793,5.491,794,3.273,795,3.273,796,3.273,797,3.273,798,3.273,799,4.421,800,3.273,801,2.707,802,2.274,803,4.843,804,3.273,805,4.421,806,3.273,807,5.157,808,6.47,809,3.273,810,2.707,811,3.273,812,5.702,813,2.369,814,7.241,815,2.231,816,5.157,817,3.273,818,2.925,819,2.806,820,3.273,821,2.925,822,1.58,823,2.056,824,3.273,825,3.273,826,3.273,827,3.273,828,4.843,829,3.273,830,5.157,831,3.273,832,3.273,833,2.622,834,3.273,835,3.273,836,3.273,837,3.273,838,3.273,839,4.265,840,3.273,841,2.423]],["title/getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot",[12,0.938,131,1.287,790,2.354,791,2.44]],["text/getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot",[1,3.919,2,5.013,11,3.749,15,3.288,19,5.127,25,2.198,47,3.635,90,4.35,109,4.014,127,2.12,131,3.99,242,2.425,244,5.728,274,3.403,275,3.635,296,3.497,318,5.392,330,3.182,339,6.385,348,3.789,372,3.465,373,5.2,374,3.875,383,4.171,479,5.252,500,4.064,502,4.722,515,5.462,517,5.392,529,3.599,678,5.392,679,4.228,697,5.252,716,6.129,766,5.938,790,5.728,792,4.638,793,7.363,794,6.927,795,6.927,796,6.927,797,6.927,798,6.927,799,5.938,800,6.927,801,5.728,802,4.812,803,6.505,804,6.927,805,5.938]],["title/getting_started/deploying_your_first_bot.html#authentication-and-tokens",[381,3.496,414,2.469]],["text/getting_started/deploying_your_first_bot.html#authentication-and-tokens",[1,5.094,12,2.965,25,2.269,58,6.663,69,1.828,73,5.934,100,2.07,127,2.755,131,3.234,274,3.513,328,5.174,332,5.066,345,6.389,373,3.829,383,4.306,414,5.852,416,5.174,470,4.631,471,4.559,486,4.631,488,4.491,500,4.195,509,4.491,517,7.008,678,5.566,679,4.364,711,4.788,723,5.422,769,7.445,805,6.129,806,7.15,807,9.003,808,8.044,809,7.15,810,5.913,811,7.15,812,6.389,813,3.285]],["title/getting_started/deploying_your_first_bot.html#getting-a-user-token",[69,0.881,414,1.95,486,2.232]],["text/getting_started/deploying_your_first_bot.html#getting-a-user-token",[19,5.22,25,2.238,43,1.039,73,4.247,95,4.808,96,3.465,141,1.304,169,4.997,180,5.104,189,4.899,203,5.875,207,1.672,304,4.247,310,2.863,381,5.65,395,5.49,414,5.823,452,3.266,485,6.302,486,4.568,488,4.43,553,4.723,556,4.899,557,5.348,558,5.65,629,6.302,704,5.22,768,5.348,808,6.302,812,6.302,814,10.291,815,4.808,816,8.925,817,7.053,818,6.302,819,6.046,820,7.053,821,6.302,822,3.405,823,4.43,824,7.053,825,7.053,826,7.053,827,7.053,828,6.623]],["title/getting_started/deploying_your_first_bot.html#getting-a-bot-token",[131,1.558,414,1.95,486,2.232]],["text/getting_started/deploying_your_first_bot.html#getting-a-bot-token",[12,3.238,73,4.97,130,5.433,131,4.748,134,3.517,137,5.433,145,5.626,168,6.258,169,5.848,275,4.331,301,4.345,375,5.626,382,3.985,385,2.81,829,8.253,830,9.83,831,8.253]],["title/getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot",[98,1.399,131,1.287,140,1.941,721,2.107]],["text/getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot",[2,4.335,11,4.343,12,1.973,17,4.012,23,5.135,25,1.901,50,3.657,51,4.799,69,2.577,73,5.82,76,3.708,92,2.185,96,2.943,98,2.943,100,2.799,102,5.524,109,3.472,114,1.343,127,1.833,131,4.691,133,4.211,134,2.553,140,4.084,171,1.516,189,4.161,209,3.88,259,3.208,285,3.763,310,2.432,394,4.663,412,5.471,414,3.39,470,5.197,474,6.636,479,4.543,486,3.88,492,4.954,500,3.515,502,5.471,551,3.56,679,4.898,716,4.161,721,4.434,742,5.807,755,4.161,758,6.862,766,5.135,782,5.353,793,4.543,799,5.135,803,5.626,808,5.353,812,5.353,813,2.752,828,5.626,832,5.991,833,4.799,834,5.991,835,5.991,836,5.991,837,5.991,838,5.991,839,6.636,840,5.991]],["title/getting_started/deploying_your_first_bot.html#creating-a-bot-account",[73,2.075,131,1.558,134,1.468]],["text/getting_started/deploying_your_first_bot.html#creating-a-bot-account",[]],["title/getting_started/deploying_your_first_bot.html#setting-up-a-simple-eventlistener",[98,1.399,140,1.941,721,2.107,841,2.107]],["text/getting_started/deploying_your_first_bot.html#setting-up-a-simple-eventlistener",[]],["title/getting_started/event_handling.html",[90,2.741,92,1.592]],["text/getting_started/event_handling.html",[43,1.291,47,4.6,90,5.506,92,3.197,372,4.385,373,4.695,374,4.903,500,5.143,515,5.426,529,4.555,792,5.87]],["title/getting_started/event_handling.html#event-handling",[90,2.741,92,1.592]],["text/getting_started/event_handling.html#event-handling",[47,4.679,372,4.461,373,4.776,374,4.988,500,5.232,515,5.52,529,4.633,792,5.971]],["title/getting_started/logging.html",[212,2.594,294,2.873]],["text/getting_started/logging.html",[1,2.894,8,2.344,12,1.685,13,2.132,14,4.828,25,1.028,43,1.68,47,1.7,48,4.173,57,2.331,68,1.241,69,1.308,71,2.313,86,2.065,87,1.7,88,1.225,100,1.481,102,3.122,109,1.877,114,0.726,119,2.295,125,2.295,127,1.94,133,2.684,134,2.701,140,2.208,145,2.208,146,2.521,167,2.25,180,2.344,183,2.521,188,4.23,207,0.607,212,6.767,217,4.023,223,0.802,235,1.855,237,5.445,269,6.485,274,2.513,279,2.034,281,2.684,285,2.034,286,1.39,294,4.173,296,1.635,331,3.981,340,2.397,346,2.169,351,2.679,370,2.894,371,2.521,372,3.171,376,2.065,382,3.784,383,3.817,384,1.606,385,1.741,399,4.608,414,1.833,443,2.521,489,2.344,500,1.901,502,3.487,509,2.034,512,2.295,514,2.521,515,4.456,529,1.683,543,0.809,571,6.017,581,2.521,608,2.521,651,4.097,679,1.977,684,2.679,686,4.385,691,3.878,696,2.595,716,3.553,734,2.894,735,2.894,751,6.279,752,4.385,768,2.456,769,2.679,788,2.894,789,3.313,790,2.679,793,4.806,802,2.25,818,2.894,819,4.385,842,2.894,843,3.239,844,4.097,845,5.664,846,2.894,847,5.664,848,2.894,849,3.239,850,2.295,851,3.239,852,3.239,853,2.521,854,6.338,855,2.595,856,5.115,857,3.239,858,3.239,859,3.239,860,3.239,861,3.239,862,3.239,863,3.239,864,3.239,865,3.239,866,2.456,867,4.321,868,3.239,869,3.239,870,3.239,871,3.239,872,3.239,873,3.239,874,3.239,875,2.894,876,3.239,877,3.239,878,3.239,879,3.239,880,3.239,881,3.239,882,3.239,883,3.239,884,3.239,885,3.239,886,3.239]],["title/getting_started/logging.html#logging-and-debugging",[212,2.594,294,2.873]],["text/getting_started/logging.html#logging-and-debugging",[1,4.797,8,6.136,127,2.594,212,6.516,217,3.665,237,5.89,331,5.325,399,4.69,691,6.429,802,5.89,842,7.576,843,8.478,844,6.792,845,7.576]],["title/getting_started/logging.html#specifying-the-log-level",[212,2.048,399,1.906,571,2.133]],["text/getting_started/logging.html#specifying-the-log-level",[14,3.978,57,3.999,69,2.243,102,4.191,119,4.865,188,7.256,212,6.749,217,4.655,237,4.769,285,4.312,294,4.52,296,3.466,331,4.312,351,5.678,372,4.837,382,3.315,399,4.853,515,4.25,529,3.567,543,1.715,571,6.518,679,4.191,686,5.885,716,4.769,751,7.746,752,5.885,789,4.446,845,6.135,846,6.135,847,8.64,848,6.135]],["title/getting_started/logging.html#simple-example-of-logging",[140,2.349,212,2.048,383,2.075]],["text/getting_started/logging.html#simple-example-of-logging",[1,3.147,12,2.513,13,3.661,14,5.432,43,1.559,71,3.451,86,3.546,87,2.918,100,2.209,102,3.395,109,3.223,114,1.247,125,3.941,127,1.702,134,2.37,146,4.329,167,3.863,180,4.025,183,4.329,207,1.042,212,6.456,217,3.298,237,6.051,274,3.749,279,3.493,281,4.004,294,3.661,331,3.493,340,4.116,370,4.969,371,4.329,376,3.546,382,4.205,383,4.595,384,2.757,385,1.893,399,3.076,414,3.147,443,4.329,502,5.202,509,3.493,512,3.941,515,5.392,571,5.803,581,4.329,651,6.112,684,4.599,686,4.767,716,3.863,734,4.969,751,6.112,752,4.767,768,4.217,789,3.602,790,4.599,819,4.767,849,5.561,850,3.941,851,5.561,852,5.561,853,4.329,854,8.71,855,4.455,856,7.63,857,5.561,858,5.561,859,5.561,860,5.561,861,5.561,862,5.561,863,5.561,864,5.561]],["title/getting_started/logging.html#advanced-logging",[212,2.594,865,4.364]],["text/getting_started/logging.html#advanced-logging",[14,3.27,25,1.79,43,1.723,47,2.961,48,5.777,68,2.161,88,2.134,127,1.726,133,4.044,134,3.283,145,3.846,212,6.588,223,1.397,235,3.23,269,7.933,286,2.421,346,3.778,382,2.724,385,1.921,399,3.121,489,4.083,500,3.31,514,4.392,571,3.493,608,4.392,691,4.278,696,4.52,735,5.042,769,4.666,788,5.042,793,6.655,818,5.042,819,4.837,844,4.52,845,5.042,866,4.278,867,5.983,868,5.642,869,5.642,870,5.642,871,5.642,872,5.642,873,5.642,874,5.642,875,5.042,876,5.642,877,5.642,878,5.642,879,5.642,880,5.642,881,5.642,882,5.642,883,5.642,884,5.642,885,5.642,886,5.642]],["title/home/bug_reporting.html",[279,2.741,802,3.032]],["text/home/bug_reporting.html",[43,1.291,47,4.6,279,5.506,372,4.385,373,4.695,374,4.903,500,5.143,515,5.426,529,4.555,792,5.87,802,6.089]],["title/home/bug_reporting.html#bug-reporting",[279,2.741,802,3.032]],["text/home/bug_reporting.html#bug-reporting",[47,4.679,372,4.461,373,4.776,374,4.988,500,5.232,515,5.52,529,4.633,792,5.971]],["title/home/contributing.html",[887,4.767]],["text/home/contributing.html",[1,4.632,2,2.994,3,3.547,12,1.363,17,2.771,19,6.06,43,1.29,45,4.466,47,2.171,49,2.314,52,5.292,58,3.062,59,7.871,69,1.888,73,2.491,74,2.906,76,4.571,86,2.638,109,3.577,125,2.932,127,2.259,133,2.171,174,3.062,179,3.137,240,3.422,279,5.142,281,2.171,285,2.599,297,3.062,301,2.728,310,1.68,328,4.467,331,5.769,341,5.292,371,3.221,372,2.07,373,4.691,374,2.314,382,1.998,392,2.398,407,3.221,413,2.994,418,2.07,471,4.708,472,3.697,474,3.422,478,3.221,481,2.932,488,2.599,489,5.925,490,4.782,492,3.422,495,2.874,496,2.874,500,2.428,509,4.638,512,4.374,515,3.821,529,2.15,674,3.697,678,3.221,691,3.137,697,6.965,716,2.874,721,3.062,733,3.422,746,0.842,789,2.68,792,2.771,799,3.547,801,3.422,802,6.084,810,6.106,813,1.901,815,2.821,833,4.945,866,3.137,887,7.837,888,3.697,889,4.137,890,6.598,891,4.137,892,4.137,893,3.697,894,4.137,895,4.137,896,4.137,897,6.934,898,4.137,899,4.137,900,3.697,901,6.934,902,3.697,903,6.173,904,6.934,905,4.137,906,4.137,907,4.137,908,4.137,909,4.137,910,3.062,911,4.137,912,3.547,913,4.137,914,4.137,915,4.137,916,6.173,917,4.137,918,3.697,919,3.697,920,3.697,921,3.697,922,4.137,923,4.137,924,3.697,925,4.137,926,3.697,927,3.697,928,3.697,929,4.137]],["title/home/contributing.html#contributing",[887,4.767]],["text/home/contributing.html#contributing",[1,5.109,12,2.366,19,5.317,45,3.961,47,3.77,59,5.94,69,2.309,74,3.381,86,4.58,133,3.77,174,5.317,279,4.512,310,2.916,328,5.198,372,3.594,373,4.836,374,4.018,471,4.58,472,6.419,500,4.215,509,4.512,512,5.09,515,4.447,529,3.732,674,6.419,716,4.99,721,5.317,733,5.94,792,4.81,802,4.99,810,5.94,866,5.447,887,7.233,888,6.419,889,7.183,890,6.419,891,7.183,892,7.183,893,6.419,894,7.183,895,7.183,896,7.183,897,6.745,898,7.183,899,7.183]],["title/home/contributing.html#using-github",[127,1.335,697,3.309]],["text/home/contributing.html#using-github",[1,4.434,2,5.671,19,5.8,45,3.438,59,6.48,74,3.689,76,4.851,127,2.398,179,5.942,240,6.48,297,5.8,471,4.996,481,5.553,492,6.48,496,5.443,509,5.984,697,8.3,833,6.277,887,7.633,900,7.002,901,7.359,902,7.002,903,9.528,904,7.359,905,7.836]],["title/home/contributing.html#issue-page",[331,2.741,373,2.337]],["text/home/contributing.html#issue-page",[1,4.262,19,6.883,49,4.213,58,5.575,109,4.365,127,2.305,279,5.841,331,6.336,373,4.981,382,3.636,407,5.863,489,5.451,495,5.232,515,4.662,691,5.711,801,6.229,802,7.008,810,6.229,813,3.46,887,7.45,890,6.73,904,8.733,906,7.532,907,7.532,908,7.532,909,7.532,910,5.575,911,7.532,912,6.457,913,7.532,914,7.532]],["title/home/contributing.html#contributing-changes",[45,1.915,887,3.496]],["text/home/contributing.html#contributing-changes",[3,6.394,17,4.995,45,4.825,52,6.394,73,4.492,76,4.618,109,4.323,125,5.286,281,3.915,285,4.685,301,4.086,331,5.806,341,6.394,371,5.807,392,4.323,418,3.732,489,6.69,490,6.506,512,5.286,678,5.807,789,4.831,799,6.394,901,8.681,915,7.459,916,9.244,917,7.459,918,6.666,919,6.666,920,6.666,921,6.666]],["title/home/contributing.html#summary",[52,5.101]],["text/home/contributing.html#summary",[59,9.052,69,2.004,76,4.851,279,4.922,328,5.671,341,6.717,413,5.671,471,4.996,474,6.48,478,6.1,488,4.922,489,5.671,746,1.594,802,5.443,810,6.48,815,5.342,833,6.277,890,7.002,897,8.947,922,7.836,923,7.836,924,7.002,925,7.836,926,7.002,927,7.002,928,7.002,929,7.836]],["title/home/license.html",[227,4.921]],["text/home/license.html",[9,4.61,20,4.744,43,0.872,47,3.108,48,3.899,63,4.491,92,2.16,93,4.897,127,2.437,151,5.242,227,6.585,274,2.91,332,6.375,361,6.133,384,2.936,478,4.61,559,4.744,725,7.115,784,7.115,823,6.043,833,4.744,893,5.292,930,5.922,931,8.997,932,5.292,933,5.922,934,5.922,935,5.922,936,6.199,937,5.922,938,5.922,939,5.922,940,7.963,941,5.922,942,10.879,943,5.922,944,2.835,945,5.922,946,5.922,947,5.922,948,5.922,949,5.922,950,5.922,951,5.922,952,5.922,953,5.922,954,5.922,955,7.963,956,5.922,957,5.922,958,7.963,959,5.922,960,5.292,961,5.922,962,5.922,963,5.922,964,5.922,965,5.922,966,5.922,967,5.922,968,5.922,969,5.922,970,5.922,971,5.922,972,3.666,973,5.292,974,5.922,975,5.922,976,5.922,977,5.922]],["title/home/license.html#license",[227,4.921]],["text/home/license.html#license",[9,4.645,20,4.78,47,3.132,48,3.929,63,4.525,92,2.177,93,4.935,127,2.449,151,5.269,227,4.935,274,2.932,332,6.4,361,6.157,384,2.958,478,4.645,559,4.78,725,7.152,784,7.152,823,6.061,833,4.78,893,5.332,930,5.967,931,9.031,932,5.332,933,5.967,934,5.967,935,5.967,936,6.231,937,5.967,938,5.967,939,5.967,940,8.004,941,5.967,942,10.896,943,5.967,944,2.857,945,5.967,946,5.967,947,5.967,948,5.967,949,5.967,950,5.967,951,5.967,952,5.967,953,5.967,954,5.967,955,8.004,956,5.967,957,5.967,958,8.004,959,5.967,960,5.332,961,5.967,962,5.967,963,5.967,964,5.967,965,5.967,966,5.967,967,5.967,968,5.967,969,5.967,970,5.967,971,5.967,972,3.694,973,5.332,974,5.967,975,5.967,976,5.967,977,5.967]],["title/home/troubleshooting.html",[978,5.317]],["text/home/troubleshooting.html",[1,3.438,8,4.397,11,3.289,12,1.334,14,2.348,15,2.884,16,4.069,26,2.241,43,1.193,46,5.43,47,3.189,86,3.874,96,1.99,109,4.695,114,1.362,127,3.042,131,1.832,140,2.762,149,1.804,188,3.35,193,3.62,206,3.62,209,2.624,212,4.815,217,3.152,235,2.319,237,2.814,251,3.62,259,2.17,274,1.99,279,2.544,280,4.722,285,2.544,294,4,295,3.62,298,1.478,301,2.686,330,1.861,331,6.36,338,2.008,339,2.932,372,3.648,373,3.254,374,2.266,385,1.379,392,2.348,396,3.62,397,3.153,403,2.408,404,4.73,433,3.153,443,3.153,488,2.544,489,2.932,494,3.62,496,2.814,500,2.377,511,2.998,512,4.306,515,2.508,521,2.932,529,2.105,675,3.62,684,5.025,688,3.62,690,8.814,692,7.756,697,3.072,698,7.239,701,2.814,704,2.998,716,2.814,751,3.245,768,4.608,789,2.624,791,3.473,792,4.069,801,3.35,805,3.473,813,3.35,815,2.762,842,3.62,850,4.306,875,3.62,902,5.43,918,3.62,919,5.43,920,3.62,921,5.43,926,3.62,927,3.62,932,3.62,978,5.43,979,4.051,980,4.051,981,5.706,982,4.051,983,10.126,984,4.051,985,4.051,986,4.051,987,9.114,988,5.706,989,6.076,990,4.051,991,6.076,992,7.291,993,4.051,994,4.051,995,4.051,996,4.051,997,4.051,998,4.051,999,5.706,1000,5.706,1001,4.051,1002,3.62,1003,3.35,1004,4.051,1005,4.051,1006,4.051,1007,4.051]],["title/home/troubleshooting.html#troubleshooting",[978,5.317]],["text/home/troubleshooting.html#troubleshooting",[14,4.783,43,1.216,47,4.331,209,5.345,212,5.842,295,7.375,372,4.129,373,4.42,374,4.616,488,5.184,500,4.842,515,5.109,521,5.973,529,4.288,768,6.258,792,5.527,805,7.075,850,5.848,978,7.375,979,8.253,980,8.253]],["title/home/troubleshooting.html#issues-downloading-the-module",[237,2.394,331,2.164,981,3.236]],["text/home/troubleshooting.html#issues-downloading-the-module",[1,3.113,8,5.481,15,2.612,16,5.072,46,6.768,86,4.829,109,4.389,127,3.23,140,3.751,206,4.916,217,2.378,235,3.15,251,4.916,259,2.947,280,4.906,285,3.456,330,2.528,331,5.44,338,2.728,339,3.982,372,3.789,385,1.873,396,4.916,404,4.283,433,4.283,494,4.916,512,3.899,675,4.916,688,4.916,690,9.385,692,8.744,698,8.338,701,3.822,704,4.072,716,3.822,792,3.684,813,2.528,902,6.768,918,4.916,919,6.768,920,4.916,921,6.768,927,4.916,932,4.916,981,5.167,982,5.502,983,10.841,984,5.502,985,5.502,986,5.502,987,10.114,988,5.167,989,7.574,990,5.502,991,7.574,992,8.662,993,5.502,994,5.502,995,5.502,996,5.502,997,5.502,998,5.502]],["title/home/troubleshooting.html#unexpected-behavior",[999,4.098,1000,4.098]],["text/home/troubleshooting.html#unexpected-behavior",[1,3.72,11,4.618,12,2.166,15,3.121,26,3.636,47,3.45,96,3.23,109,4.945,114,1.913,127,2.012,131,2.973,149,2.928,188,5.437,193,5.875,212,5.071,217,3.688,274,3.23,279,4.129,280,4.258,294,5.617,298,2.398,301,3.771,331,6.686,373,3.521,392,3.81,397,5.118,403,3.907,404,5.118,443,5.118,489,4.758,496,4.567,511,4.866,512,4.659,684,7.056,697,4.985,751,5.267,768,4.985,789,4.258,791,5.636,801,5.437,813,3.92,815,4.482,842,5.875,850,4.659,875,5.875,926,5.875,988,6.174,999,6.174,1000,6.174,1001,6.574,1002,5.875,1003,5.437,1004,6.574,1005,6.574,1006,6.574,1007,6.574]],["title/reference/cache.html",[100,1.264,170,1.546]],["text/reference/cache.html",[11,0.894,12,0.199,15,1.548,18,1.83,20,0.924,25,1.41,43,1.754,57,0.525,66,0.364,67,0.364,68,2.193,69,2.21,71,0.274,74,1.535,78,0.772,80,0.438,81,0.267,88,0.436,92,0.221,95,0.413,97,0.66,98,1.035,100,2.15,102,0.369,113,3.602,114,2.353,115,0.303,116,1.124,127,1.855,134,0.491,141,1.316,142,0.429,157,0.988,158,0.311,159,3.026,165,0.5,169,0.817,170,3.115,171,1.324,177,0.386,178,4.095,189,0.801,190,1.817,199,2.938,207,1.165,211,2.157,213,0.724,214,2.382,235,0.346,255,2.255,261,3.039,262,0.375,263,0.38,271,0.485,298,0.602,302,0.5,305,0.471,308,0.685,313,2.952,330,2.363,334,2.266,336,1.788,337,2.781,338,1.251,342,2.313,347,0.967,350,3.063,360,0.519,368,1.69,385,0.206,418,0.826,420,1.396,426,0.308,433,1.285,467,3.359,470,0.392,488,1.037,495,0.801,514,0.471,534,1.37,538,0.897,540,1.867,543,0.973,545,2.217,551,3.178,553,0.405,556,0.42,577,0.541,594,0.541,597,0.541,617,0.5,635,0.375,691,0.459,711,1.41,743,1.282,746,1.265,753,0.953,755,0.42,759,1.757,771,0.698,772,2.348,774,0.338,813,1.498,815,0.786,822,2.483,972,1.022,1008,0.661,1009,0.605,1010,0.321,1011,0.605,1012,3.796,1013,0.5,1014,2.344,1015,0.541,1016,1.083,1017,1.365,1018,6.184,1019,3.758,1020,3.195,1021,3.589,1022,2.598,1023,5.821,1024,1.647,1025,1.647,1026,2.597,1027,1.647,1028,2.222,1029,0.953,1030,1.323,1031,1.913,1032,0.519,1033,0.605,1034,0.5,1035,0.303,1036,0.605,1037,1.222,1038,0.605,1039,0.471,1040,1.882,1041,1.475,1042,1.153,1043,0.652,1044,0.981,1045,1.978,1046,1.365,1047,0.801,1048,0.398,1049,1.687,1050,0.988,1051,1.03,1052,1.153,1053,1.153,1054,1.153,1055,1.083,1056,1.475,1057,4.456,1058,1.438,1059,2.657,1060,0.953,1061,1.365,1062,0.988,1063,1.285,1064,1.083,1065,1.083,1066,1.083,1067,1.083,1068,1.153,1069,0.605,1070,1.153]],["title/reference/cache.html#client-cache",[100,1.264,170,1.546]],["text/reference/cache.html#client-cache",[]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache",[1013,4.921]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache",[11,5.337,68,3.178,95,5.656,100,3.046,114,1.86,127,3.017,170,3.493,235,4.75,360,7.113,418,4.151,470,5.374,514,6.459,691,6.292,1009,8.297,1010,4.398,1011,8.297]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache-methods",[298,2.17]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache-methods",[]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.__init__",[771,2.517]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.__init__",[18,3.515,25,2.792,43,1.737,71,3.119,100,2.805,114,1.546,115,3.45,116,4.545,142,4.886,178,4.075,189,4.79,207,1.292,302,5.703,368,3.246,743,1.422,746,1.403,771,3.722,772,2.278,774,3.857,1012,4.209,1013,5.703,1014,2.177,1015,6.162,1016,6.476]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity",[1017,4.921]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity",[15,2.331,18,2.503,25,1.558,43,1.74,68,2.678,74,2.311,100,1.422,113,4.609,114,2.402,127,2.14,141,1.506,170,3.145,171,1.321,178,4.517,190,1.558,199,3.707,207,0.92,211,2.82,214,3.239,313,4.956,330,3.213,334,3.411,368,2.311,420,1.053,534,2.063,543,1.227,743,1.012,746,0.999,759,1.941,772,2.094,813,2.256,822,3.377,1012,2.997,1014,2.571,1017,4.061,1018,6.03,1019,5.603,1020,3.656,1021,3.18,1022,3.553,1023,6.571,1024,2.479,1025,2.479,1026,3.531,1027,2.479,1028,3.039]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house",[1029,4.921]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house",[11,1.838,15,1.612,18,1.73,25,1.077,43,1.749,66,2.044,68,2.033,69,2.05,74,1.598,80,2.457,81,1.501,92,1.238,100,0.983,102,2.072,113,3.697,114,2.382,127,1.999,134,2.261,141,1.208,165,2.808,170,2.839,171,1.234,177,2.165,178,3.936,189,2.358,190,1.077,199,2.813,207,0.636,211,2.14,214,2.458,255,2.132,261,2.199,313,3.507,330,2.438,334,2.358,337,2.587,342,2.971,350,4.325,368,1.598,420,1.401,433,2.643,488,4.104,534,1.426,543,0.848,545,3.195,577,3.034,617,2.808,635,2.102,743,0.7,746,0.691,759,1.342,772,2.232,813,1.56,822,2.562,972,2.102,1012,2.072,1014,2.063,1017,2.808,1018,4.836,1019,4.252,1020,3.315,1021,2.199,1022,2.457,1023,6.99,1024,1.714,1025,1.714,1026,2.68,1027,1.714,1028,2.102,1029,2.808,1030,2.72,1031,2.574,1032,2.91,1033,3.395,1034,2.808,1035,1.698,1036,3.395,1037,2.513]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member",[1037,4.404]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member",[15,1.869,18,2.007,25,1.25,43,1.75,67,2.371,68,2.278,69,2.571,74,1.854,78,3.983,100,1.722,113,4.056,114,1.79,127,1.82,141,1.325,170,2.107,171,1.509,178,3.699,199,3.153,207,0.738,211,2.399,213,3.736,214,2.755,271,3.155,330,2.733,334,2.736,342,2.637,347,2.733,350,4.929,368,1.854,420,1.276,534,1.654,543,0.984,545,3.223,711,2.637,743,0.812,746,0.801,759,1.557,772,2.089,813,1.809,822,2.872,1012,2.404,1014,2.707,1018,7.56,1020,3.584,1021,2.55,1024,1.988,1025,1.988,1026,3.003,1027,1.988,1028,2.438,1031,2.986,1037,2.915,1038,3.938,1039,3.065,1040,7.137]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room",[1041,5.317]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room",[15,1.805,18,1.938,25,1.207,43,1.75,68,2.218,74,1.79,100,1.101,113,3.97,114,2.395,127,1.773,141,1.297,170,2.779,171,1.681,178,4.284,190,1.838,199,3.071,207,0.712,211,2.336,214,2.683,262,2.354,263,2.388,308,2.26,330,2.661,334,2.642,336,4.972,337,3.421,368,1.79,418,1.902,420,1.242,467,5.732,534,1.598,540,5.193,543,0.95,553,2.547,556,2.642,743,0.784,746,0.774,759,2.29,772,2.128,813,1.747,822,2.797,1012,2.321,1014,2.215,1018,5.193,1019,4.64,1020,3.521,1021,2.463,1022,2.752,1023,6.846,1024,1.92,1025,1.92,1026,2.925,1027,1.92,1028,2.354,1041,3.398,1042,5.793,1043,3.278,1044,2.26,1045,3.571]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship",[1046,4.921]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship",[15,1.938,18,2.081,25,1.296,43,1.747,68,2.341,69,2.227,74,1.922,100,2.121,113,4.145,114,2.49,127,1.87,141,1.354,170,2.881,171,1.155,178,4.233,190,1.296,199,3.24,207,0.765,211,2.465,214,2.831,305,3.178,308,2.427,330,2.808,334,2.836,347,2.808,368,1.922,418,2.043,420,1.744,534,1.715,543,1.02,551,5.921,711,4.093,743,0.842,746,0.831,759,2.417,772,2.04,813,1.876,822,2.951,1012,2.492,1014,2.312,1018,5.422,1019,4.896,1020,3.287,1021,2.644,1022,2.955,1023,6.766,1024,2.062,1025,2.062,1026,3.086,1027,2.062,1028,3.784,1031,3.096,1044,3.632,1046,3.377,1047,2.836]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room",[1030,4.767]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room",[15,2.287,18,2.456,25,1.529,43,1.742,68,2.643,74,2.268,100,1.395,113,4.562,114,2.393,127,2.112,141,1.49,170,3.118,171,1.304,178,4.489,190,1.529,199,3.658,207,0.902,211,2.783,214,3.196,330,3.17,334,3.347,337,3.575,342,2.48,368,2.268,420,1.033,534,2.024,543,1.204,743,0.993,746,0.98,759,1.905,772,2.079,813,2.214,822,3.332,1012,2.941,1014,2.545,1018,5.967,1019,5.528,1020,3.618,1021,3.121,1022,3.487,1023,6.515,1024,2.433,1025,2.433,1026,3.484,1027,2.433,1028,2.983,1030,3.86,1048,3.172]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user",[1031,4.512]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user",[15,2.218,18,2.382,25,1.483,43,1.744,68,2.585,69,2.638,74,2.2,100,1.353,113,4.484,114,2.403,127,2.066,141,1.465,170,3.074,171,1.275,178,4.442,190,1.483,199,3.578,207,0.875,211,2.722,214,3.126,261,3.027,330,3.101,334,3.246,368,2.2,420,1.448,534,1.963,543,1.168,743,0.963,746,0.951,759,1.848,772,2.207,813,2.147,822,3.259,1012,2.853,1014,2.501,1018,5.865,1019,5.408,1020,3.556,1021,3.027,1022,3.382,1023,6.813,1024,2.36,1025,2.36,1026,3.408,1027,2.36,1028,2.893,1031,3.544,1049,3.744]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised",[1021,3.854]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised",[12,2.388,43,1.694,100,2.871,141,1.34,158,3.731,171,1.37,178,3.358,207,1.358,211,2.924,255,6.723,261,6.423,385,2.468,426,3.695,433,7.069,543,1.811,743,1.495,746,1.475,759,3.591,772,2.027,972,5.622,1012,4.426,1021,4.696,1045,9.312]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup",[1050,5.101]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup",[43,1.674,97,5.308,100,2.684,114,2.078,157,7.948,178,3.471,190,2.378,207,1.404,298,3.382,538,7.217,743,1.545,746,1.525,753,7.668,772,2.069,1012,4.575,1016,7.039,1050,6.425,1051,8.285,1052,9.272,1053,9.272,1054,9.272]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj",[1055,5.588]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj",[43,1.709,57,4.239,69,2.694,100,2.921,114,2.085,141,1.392,170,3.294,171,1.757,207,1.411,255,5.841,261,4.878,743,1.553,746,1.532,772,2.251,1012,4.597,1055,7.073]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity",[1056,5.317]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity",[43,1.715,159,5.358,170,3.354,190,2.462,207,1.453,313,4.852,743,1.599,746,1.578,772,2.281,1012,4.735,1021,5.025,1056,6.932,1057,6.234,1058,2.671,1059,5.742]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house",[1060,4.921]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house",[43,1.743,159,5.211,170,2.91,190,1.969,207,1.162,313,4.653,337,3.433,338,3.077,342,3.136,545,3.089,743,1.279,746,1.263,772,2.451,1012,3.788,1021,4.02,1056,5.546,1057,6.713,1058,3.171,1059,4.594,1060,5.132,1061,5.132]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member",[1062,5.101]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member",[43,1.726,159,5.231,170,3.274,190,2.367,207,1.397,342,3.09,350,3.511,545,3.475,743,1.538,746,1.518,772,2.242,1012,4.553,1021,4.831,1058,3.182,1059,5.521,1062,6.394,1063,7.196]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room",[1064,5.588]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room",[43,1.746,141,1.157,159,4.674,170,2.926,190,1.985,207,1.172,336,5.853,337,3.677,420,1.771,467,6.162,540,6.114,743,1.29,746,1.273,772,2.344,1012,3.819,1021,4.052,1057,6.731,1058,2.154,1059,6.114,1064,5.875]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship",[1065,5.588]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship",[43,1.715,159,5.358,170,3.354,190,2.462,207,1.453,551,6.075,743,1.599,746,1.578,772,2.281,1012,4.735,1021,5.025,1057,6.234,1058,2.671,1059,5.742,1065,7.285]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room",[1061,4.921]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room",[43,1.718,159,5.326,170,3.334,190,2.437,207,1.439,337,3.564,342,2.362,743,1.583,746,1.563,772,2.271,1012,4.688,1021,4.975,1057,6.196,1058,2.644,1059,5.685,1061,6.352]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user",[1066,5.588]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user",[43,1.715,69,2.613,159,5.358,170,3.354,190,2.462,207,1.453,743,1.599,746,1.578,772,2.281,1012,4.735,1021,5.025,1057,6.234,1058,2.671,1059,5.742,1066,7.285]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user",[1049,4.767]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user",[25,2.433,43,1.74,68,2.937,69,2.6,100,2.22,114,2.462,127,2.346,141,1.616,170,2.716,171,1.449,178,4.354,190,1.777,199,4.065,207,1.049,261,6.586,420,1.875,543,1.399,743,1.155,746,1.14,772,2.198,1012,3.419,1014,3.109,1018,5.675,1020,3.924,1022,4.054,1049,4.487]],["title/reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data",[1067,5.588]],["text/reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data",[20,5.758,43,1.745,69,2.435,88,2.719,98,4.438,100,2.081,114,2.42,169,5.094,170,2.546,178,3.329,190,1.62,207,0.956,337,2.517,338,4.478,342,2.778,420,1.542,467,4.218,495,4.993,545,2.702,551,4.945,594,4.561,597,4.561,711,3.418,743,1.052,746,1.038,772,2.265,815,4.9,1012,3.115,1014,1.611,1018,5.32,1022,3.694,1041,4.561,1046,4.221,1047,3.545,1049,4.089,1067,4.793,1068,7.188,1069,5.104,1070,7.188]],["title/reference/events.html",[21,1.958,117,3.309]],["text/reference/events.html",[4,2.015,11,3.306,14,0.969,17,0.411,21,4.2,25,2.602,26,1.626,43,1.748,49,0.654,54,0.454,56,0.55,57,0.533,66,0.704,67,2.541,68,1.389,71,1.491,74,1.384,78,1.969,81,1.865,87,1.543,92,3.203,94,0.646,95,0.418,96,1.047,97,3.671,98,0.574,100,1.768,101,0.339,103,1.763,104,1.044,113,2.053,114,0.375,115,4.418,116,3.933,117,0.886,121,2.045,122,0.548,123,0.613,124,5.905,127,1.449,129,2.045,133,1.543,134,1.253,136,0.936,137,1.403,141,1.381,142,0.435,143,1.002,144,1.763,145,1.453,147,0.828,151,0.769,153,1.571,156,1.302,158,0.316,159,1.445,161,1.617,162,1.302,170,1.168,171,1.287,180,0.846,185,1.603,189,0.426,190,2.37,207,1.173,209,0.757,211,1.701,214,0.987,217,0.265,223,1.471,255,0.734,260,0.391,285,0.385,286,0.501,289,0.981,293,0.465,294,0.769,298,0.931,303,2.355,310,0.249,330,0.537,338,2.092,362,1.302,363,2.102,364,0.548,368,0.55,382,1.029,385,2.079,397,0.478,399,0.646,412,0.418,419,0.55,421,0.877,426,0.313,454,0.782,461,1.012,477,0.508,488,0.385,496,0.812,498,0.426,502,0.418,534,1.884,538,0.478,540,0.865,543,1.526,552,0.569,553,0.411,580,1.849,635,2.612,650,0.322,679,0.713,681,0.526,737,0.812,738,1.987,740,2.847,743,1.405,746,1.274,753,0.966,755,2.733,759,1.872,771,1.395,772,2.279,774,0.343,776,1.044,777,1.936,813,0.768,841,4.746,846,0.548,850,2.57,867,0.797,888,0.548,960,1.044,1003,2.111,1014,1.145,1024,0.59,1025,0.59,1026,1.076,1027,0.59,1035,0.307,1058,1.923,1071,3.062,1072,0.671,1073,4.349,1074,3.117,1075,3.754,1076,3.372,1077,6.282,1078,1.097,1079,4.64,1080,2.002,1081,0.614,1082,3.823,1083,1.683,1084,1.164,1085,0.614,1086,1.097,1087,1.494,1088,1.494,1089,1.076,1090,0.669,1091,0.745,1092,0.548,1093,1.168,1094,0.614,1095,1.002,1096,1.168,1097,0.614,1098,1.494,1099,1.302,1100,0.671,1101,0.614,1102,1.168,1103,1.002,1104,0.677,1105,0.671,1106,2.201,1107,1.097,1108,0.614,1109,1.097,1110,1.097,1111,0.671,1112,2.627,1113,1.828,1114,1.097,1115,0.526,1116,2.727,1117,1.168,1118,0.614,1119,0.614,1120,0.614,1121,2.761,1122,2.355,1123,2.002,1124,1.828,1125,1.828,1126,2.281,1127,1.494,1128,0.614,1129,1.097,1130,1.168,1131,0.865,1132,2.132,1133,1.168,1134,1.097,1135,0.936,1136,0.548,1137,0.614,1138,0.356,1139,0.614,1140,0.614,1141,0.492,1142,0.614,1143,0.426,1144,1.672,1145,1.044,1146,0.356,1147,1.168,1148,0.478,1149,0.614]],["title/reference/events.html#hiveneventhandler-and-listeners",[21,1.958,117,3.309]],["text/reference/events.html#hiveneventhandler-and-listeners",[14,5.167,43,1.313,57,4.064,68,3.415,121,7.143,127,2.729,129,7.143,1071,6.941]],["title/reference/events.html#openhivenpy.events.DispatchEventListener",[1071,4.632]],["text/reference/events.html#openhivenpy.events.DispatchEventListener",[57,4.185,68,3.516,1071,7.147]],["title/reference/events.html#openhivenpy.events.DispatchEventListener.awaitable",[1073,2.65]],["text/reference/events.html#openhivenpy.events.DispatchEventListener.awaitable",[]],["title/reference/events.html#openhivenpy.events.DispatchEventListener.client",[100,1.723]],["text/reference/events.html#openhivenpy.events.DispatchEventListener.client",[]],["title/reference/events.html#openhivenpy.events.DispatchEventListener.event_name",[1077,4.056]],["text/reference/events.html#openhivenpy.events.DispatchEventListener.event_name",[]],["title/reference/events.html#openhivenpy.events.DispatchEventListener-methods",[298,2.17]],["text/reference/events.html#openhivenpy.events.DispatchEventListener-methods",[]],["title/reference/events.html#openhivenpy.events.DispatchEventListener.__call__",[1078,5.588]],["text/reference/events.html#openhivenpy.events.DispatchEventListener.__call__",[11,5.051,25,2.961,26,4.19,43,1.718,68,2.901,92,2.763,114,1.698,115,5.06,116,4.504,124,6.822,127,2.318,141,1.809,153,1.667,171,1.431,180,5.481,185,1.863,207,1.03,223,1.362,286,3.251,303,3.05,363,4.389,385,1.873,543,1.892,743,1.134,746,1.119,772,1.69,960,6.768,1073,4.358,1074,5.702,1075,5.481,1078,5.167,1079,6.338,1080,7.113,1081,5.502,1082,3.358,1083,3.15]],["title/reference/events.html#openhivenpy.events.DispatchEventListener.__init__",[771,2.517]],["text/reference/events.html#openhivenpy.events.DispatchEventListener.__init__",[43,1.741,71,3.119,100,2.547,190,2.188,207,1.292,310,2.799,743,1.422,746,1.403,771,2.917,772,2.445,1058,2.374,1073,4.545,1074,4.54,1075,4.99,1077,5.998,1082,4.209,1084,4.01,1085,6.896,1086,6.476,1087,6.162,1088,6.162]],["title/reference/events.html#openhivenpy.events.DispatchEventListener.__repr__",[1089,3.004]],["text/reference/events.html#openhivenpy.events.DispatchEventListener.__repr__",[43,1.748,56,3.275,129,5.574,141,1.286,190,2.808,207,1.303,382,4.272,421,3.641,461,4.2,743,1.434,746,1.416,772,2.171,1073,3.941,1077,6.032,1082,4.247,1083,5.066,1089,3.513,1090,3.984]],["title/reference/events.html#openhivenpy.events.DispatchEventListener.__str__",[1091,3.794]],["text/reference/events.html#openhivenpy.events.DispatchEventListener.__str__",[43,1.713,92,2.963,141,1.502,207,1.521,534,3.413,743,1.675,746,1.653,772,2.327,777,6.16,1077,5.538,1082,4.959,1091,5.18,1092,7.259]],["title/reference/events.html#openhivenpy.events.DispatchEventListener.dispatch",[1079,3.854]],["text/reference/events.html#openhivenpy.events.DispatchEventListener.dispatch",[4,3.239,43,1.657,190,2.751,207,1.623,743,1.787,746,1.764,772,1.934,1079,5.614,1082,5.291]],["title/reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable",[1087,5.317]],["text/reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable",[4,2.724,11,5.381,14,3.017,25,2.313,26,4.032,43,1.706,68,1.994,87,3.825,92,2.659,96,3.582,97,4.174,98,3.582,124,7.058,127,2.231,133,3.825,151,4.799,153,2.548,171,1.377,185,1.763,190,1.652,207,0.975,223,1.289,255,4.578,289,4.277,303,1.834,362,5.674,363,4.224,385,1.772,419,2.451,502,3.549,534,2.187,543,1.301,650,2.732,743,1.734,746,1.059,759,2.059,772,1.627,776,6.514,1003,6.028,1071,4.053,1073,4.908,1074,3.428,1075,5.275,1082,3.178,1086,4.889,1087,4.652,1093,7.29,1094,5.207,1095,6.249,1096,7.29,1097,5.207,1098,4.652,1099,4.053]],["title/reference/events.html#openhivenpy.events.MultiDispatchEventListener",[129,4.767]],["text/reference/events.html#openhivenpy.events.MultiDispatchEventListener",[68,3.415,97,5.105,127,2.729,133,4.679,285,5.601,841,7.613,1101,8.917]],["title/reference/events.html#openhivenpy.events.MultiDispatchEventListener-methods",[298,2.17]],["text/reference/events.html#openhivenpy.events.MultiDispatchEventListener-methods",[]],["title/reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch",[1079,3.854]],["text/reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch",[4,1.985,25,3.175,43,1.737,87,3.88,92,1.938,96,2.611,97,4.233,115,5.005,116,4.456,123,2.788,124,6.757,153,1.609,171,1.004,185,1.799,190,1.686,207,0.995,211,3.897,214,3.424,223,1.315,303,2.604,330,2.441,368,2.501,534,3.572,543,1.328,743,1.095,746,1.081,759,3.362,772,2.052,777,4.029,813,2.441,841,5.473,1024,2.683,1025,2.683,1026,3.733,1027,2.683,1073,3.787,1079,5.507,1082,3.243,1099,4.136,1102,7.394,1103,4.555,1104,3.079]],["title/reference/events.html#openhivenpy.events.SingleDispatchEventListener",[121,4.767]],["text/reference/events.html#openhivenpy.events.SingleDispatchEventListener",[68,3.396,92,3.234,95,6.044,97,5.076,114,1.987,115,4.435,116,3.948,122,7.922,841,6.562]],["title/reference/events.html#openhivenpy.events.SingleDispatchEventListener.args",[115,2.977]],["text/reference/events.html#openhivenpy.events.SingleDispatchEventListener.args",[]],["title/reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatched",[1079,3.854]],["text/reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatched",[]],["title/reference/events.html#openhivenpy.events.SingleDispatchEventListener.kwargs",[116,2.65]],["text/reference/events.html#openhivenpy.events.SingleDispatchEventListener.kwargs",[]],["title/reference/events.html#openhivenpy.events.SingleDispatchEventListener-methods",[298,2.17]],["text/reference/events.html#openhivenpy.events.SingleDispatchEventListener-methods",[]],["title/reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__",[771,2.517]],["text/reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__",[43,1.737,71,3.175,100,2.577,101,3.883,190,3.101,207,1.315,743,1.447,746,1.428,771,3.765,772,2.366,774,3.927,1058,2.417,1073,4.351,1074,4.622,1075,5.081,1077,6.067,1082,4.285,1107,6.593,1108,7.021,1109,6.593,1110,6.593]],["title/reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__",[1089,3.004]],["text/reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__",[43,1.75,56,3.176,121,5.404,141,1.247,190,2.753,207,1.263,382,4.189,421,3.57,461,4.118,743,1.391,746,1.372,772,2.259,1073,3.864,1077,5.914,1079,5.619,1082,4.118,1083,4.967,1089,3.406,1090,3.862]],["title/reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch",[1079,3.854]],["text/reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch",[4,1.741,14,2.7,25,3.21,43,1.738,67,2.806,71,2.107,87,3.535,92,1.699,96,2.289,97,3.857,100,1.95,115,4.943,116,4.401,117,3.533,123,2.445,124,6.505,127,1.426,141,1.602,142,3.302,153,1.411,156,3.627,158,2.398,171,1.273,185,1.577,190,2.137,207,0.873,211,3.19,214,3.119,223,1.153,289,2.734,298,1.699,303,2.372,330,2.141,368,2.193,488,2.926,534,3.323,543,1.683,737,3.237,743,0.96,746,0.948,759,1.842,772,2.301,777,3.533,813,2.141,841,4.986,1024,2.353,1025,2.353,1026,3.401,1027,2.353,1073,3.523,1079,5.124,1080,6.325,1082,2.844,1099,3.627,1103,3.994,1104,2.7,1107,4.375,1109,4.375,1110,4.375]],["title/reference/events.html#openhivenpy.events.HivenEventHandler",[117,4.512]],["text/reference/events.html#openhivenpy.events.HivenEventHandler",[21,3.934,54,6.488,68,3.357,71,3.964,92,3.715,127,2.682,293,6.647,412,5.976,737,6.089,740,6.344]],["title/reference/events.html#openhivenpy.events.HivenEventHandler.active_listeners",[1112,5.317]],["text/reference/events.html#openhivenpy.events.HivenEventHandler.active_listeners",[]],["title/reference/events.html#openhivenpy.events.HivenEventHandler.available_events",[1113,5.101]],["text/reference/events.html#openhivenpy.events.HivenEventHandler.available_events",[]],["title/reference/events.html#openhivenpy.events.HivenEventHandler.non_buffer_events",[1114,5.588]],["text/reference/events.html#openhivenpy.events.HivenEventHandler.non_buffer_events",[]],["title/reference/events.html#openhivenpy.events.HivenEventHandler-methods",[298,2.17]],["text/reference/events.html#openhivenpy.events.HivenEventHandler-methods",[]],["title/reference/events.html#openhivenpy.events.HivenEventHandler.__init__",[771,2.517]],["text/reference/events.html#openhivenpy.events.HivenEventHandler.__init__",[4,2.769,11,4.611,21,4.132,43,1.746,71,3.352,78,3.57,92,3.107,97,3.053,100,2.146,127,1.632,161,4.043,189,3.704,207,0.999,217,2.305,294,3.51,362,4.15,364,4.764,397,4.15,477,4.409,498,3.704,534,2.24,552,3.61,553,3.57,580,4.342,740,6.165,743,1.099,746,1.085,771,2.256,772,2.374,813,2.449,867,3.635,888,4.764,1003,6.129,1073,3.794,1082,3.255,1084,2.43,1098,4.764,1114,5.007,1115,4.571,1116,4.409,1117,7.411,1118,5.332,1119,5.332,1120,5.332,1121,8,1122,4.271]],["title/reference/events.html#openhivenpy.events.HivenEventHandler.add_listener",[1088,5.317]],["text/reference/events.html#openhivenpy.events.HivenEventHandler.add_listener",[21,5.05,43,1.731,66,4.947,74,3.868,81,3.631,100,2.379,113,4.649,134,3.501,153,1.88,170,2.91,171,1.173,185,2.101,190,1.969,207,1.162,223,1.536,303,2.186,338,4.073,385,2.113,543,1.551,743,1.279,746,1.263,772,2.188,1035,3.105,1071,6.395,1077,6.952,1082,3.788,1088,5.546,1112,8.23]],["title/reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener",[161,4.512]],["text/reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener",[21,4.447,25,1.636,43,1.728,74,3.407,78,3.452,81,2.278,92,3.486,97,4.144,113,4.096,124,4.765,129,6.702,134,3.084,141,1.547,153,1.561,161,3.909,171,1.581,185,1.745,190,1.636,207,0.965,223,1.276,303,2.549,338,3.588,385,2.464,543,1.809,743,1.063,746,1.049,759,2.038,772,2.133,841,7.334,850,5.129,1058,2.492,1073,4.413,1074,3.393,1075,3.73,1077,7.198,1079,4.688,1082,3.146,1084,2.349,1113,4.419,1116,5.986,1122,4.129,1123,6.798,1124,4.419,1125,6.205,1126,4.606,1127,4.606]],["title/reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener",[162,4.632]],["text/reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener",[21,4.428,25,1.614,43,1.727,74,3.376,78,3.407,81,2.248,92,3.469,97,4.106,113,4.058,121,6.654,124,5.938,134,3.056,141,1.536,153,1.541,162,3.96,171,1.569,185,1.722,190,1.614,207,0.953,223,1.259,303,2.526,338,3.555,385,2.441,540,5.308,543,1.792,743,1.049,746,1.035,759,2.011,772,2.122,841,7.303,850,5.082,1058,2.469,1073,4.017,1074,3.349,1075,3.681,1077,7.176,1079,5.842,1082,3.105,1084,2.319,1113,4.361,1116,5.931,1122,4.075,1123,6.735,1124,4.361,1125,6.148,1126,4.546,1127,4.546]],["title/reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners",[144,4.921]],["text/reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners",[4,1.8,11,3.735,21,4.18,25,3.076,43,1.724,78,3.227,92,3.535,97,5.04,103,7.279,115,5.107,116,4.546,124,5.795,141,1.276,144,3.985,145,4.704,153,1.459,171,0.91,185,1.631,190,1.529,207,0.902,209,4.469,223,1.996,303,2.839,338,2.389,363,2.792,385,3.171,399,3.817,496,4.794,543,1.204,580,3.517,635,4.272,679,4.212,743,0.993,746,0.98,753,5.707,755,4.794,772,1.54,841,5.107,846,4.306,850,4.89,1014,2.178,1058,2.376,1071,3.751,1073,2.146,1077,6.001,1079,4.469,1082,2.941,1106,3.86,1116,3.985,1122,3.86,1128,4.818]],["title/reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners",[1129,5.588]],["text/reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners",[21,4.826,43,1.692,190,2.538,207,1.498,743,1.649,746,1.627,772,2.153,850,6.835,1082,4.882,1116,6.614,1129,7.51,1130,9.646,1131,7.14]],["title/reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event",[143,5.101]],["text/reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event",[11,3.71,21,3.933,25,3.066,43,1.718,49,3.834,92,3.524,94,3.792,97,5.018,100,1.382,104,6.125,113,3.879,115,5.095,116,4.535,124,5.77,133,4.209,141,1.267,143,4.092,144,5.669,145,4.673,147,4.857,153,1.446,171,0.902,185,1.616,190,1.515,207,0.894,223,1.985,303,2.824,363,3.972,385,3.16,543,1.193,580,3.494,635,5.426,681,4.092,743,0.984,746,0.971,772,1.79,1014,2.164,1058,2.36,1077,6.587,1082,2.914,1083,2.733,1106,3.834,1132,8.765,1133,6.855,1134,4.483,1135,5.491,1136,4.266,1137,4.774,1138,2.767,1139,4.774,1140,4.774]],["title/reference/events.html#openhivenpy.events.HivenEventHandler.event",[92,2.17]],["text/reference/events.html#openhivenpy.events.HivenEventHandler.event",[11,3.803,17,3.309,21,2.217,43,1.744,78,3.309,92,3.565,100,2.034,124,5.861,127,2.502,141,1.511,153,1.497,161,3.747,171,1.327,185,1.673,190,2.594,207,0.925,223,1.223,260,3.151,294,3.253,303,1.74,419,2.326,454,4.705,534,2.951,538,3.846,543,1.235,738,7.322,740,6.807,743,1.448,746,1.005,759,1.954,772,1.824,777,5.327,867,3.369,1003,4.086,1073,4.825,1074,4.625,1075,6.443,1082,3.016,1098,4.415,1121,7.677,1122,3.958,1124,4.236,1134,4.64,1141,3.958,1142,4.941,1143,3.432]],["title/reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener",[156,4.632]],["text/reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener",[21,5.087,43,1.72,81,4.095,100,2.398,153,1.903,156,4.89,159,5.793,170,3.626,171,1.565,185,2.127,190,1.993,207,1.176,211,2.533,223,1.555,303,2.212,385,2.138,543,2.069,743,1.295,746,1.278,759,3.274,772,2.068,1071,6.447,1077,5.646,1082,3.834,1112,7.4,1144,9.265]],["title/reference/events.html#openhivenpy.events.HivenEventHandler.wait_for",[136,4.767]],["text/reference/events.html#openhivenpy.events.HivenEventHandler.wait_for",[4,2.442,21,3.815,25,2.87,26,3.616,43,1.731,78,2.994,81,3.415,92,3.559,115,5.004,116,4.455,124,5.596,136,3.582,137,5.596,141,1.672,153,1.354,162,3.481,171,1.606,185,1.514,190,2.87,207,0.837,211,1.803,223,1.913,303,2.302,363,2.591,385,1.522,543,1.931,635,5.262,743,1.348,746,0.91,759,2.585,772,1.724,1014,2.064,1058,2.25,1073,4.345,1074,2.944,1075,3.236,1077,6.651,1079,2.896,1082,2.729,1106,4.755,1113,3.833,1122,3.582,1124,3.833,1126,6.905,1127,3.995,1145,5.841,1146,2.591,1147,6.537,1148,3.481,1149,4.471]],["title/reference/hiven_parsers.html",[12,1.438,580,2.224]],["text/reference/hiven_parsers.html",[4,2.757,12,0.252,21,3.858,25,1.869,27,0.613,28,0.656,29,0.656,30,0.656,31,0.656,32,0.633,33,0.596,34,0.656,36,0.656,37,0.339,38,0.656,39,0.656,40,0.656,41,0.633,43,1.751,49,0.428,67,0.67,69,1.533,71,0.179,88,1.156,92,2.594,94,4.116,96,0.376,97,0.438,100,2.644,101,0.423,106,0.504,113,0.815,114,2.249,115,4.887,116,4.35,123,2.711,124,0.948,127,0.121,133,0.584,134,0.326,141,1.626,153,1.605,158,0.203,164,0.504,170,2.678,171,1.637,173,4.244,178,0.515,185,0.134,189,0.274,190,0.125,199,0.209,207,1.061,223,0.276,259,0.212,265,0.235,270,0.633,273,0.613,298,2.736,303,0.27,307,0.613,310,0.16,313,0.968,314,0.596,337,1.604,338,1.276,342,1.993,346,0.512,347,1.697,348,0.216,350,2.919,355,1.446,356,0.613,357,1.446,358,0.613,359,0.633,363,0.444,372,0.383,385,0.261,392,0.229,408,0.58,420,1.19,455,1.288,465,1.167,486,0.256,496,0.274,534,0.166,543,1.416,545,1.661,551,1.212,556,0.274,580,4.784,595,0.3,599,0.656,600,0.656,601,0.542,602,0.684,603,0.613,612,0.684,613,0.656,614,0.656,615,0.656,616,0.633,617,0.633,618,0.656,621,0.684,622,0.656,623,0.684,625,0.656,635,0.474,638,0.684,642,0.353,643,0.656,648,1.234,649,0.656,654,0.994,656,0.656,679,0.467,711,0.265,738,1.121,743,1.168,744,1.153,746,1.153,754,0.496,755,0.773,771,0.324,772,2.203,785,0.656,822,2.427,867,0.269,912,1.234,944,3.532,1010,0.406,1013,0.327,1014,2.935,1017,0.327,1020,0.499,1022,0.286,1029,0.633,1030,0.613,1031,0.58,1035,0.875,1037,1.294,1040,0.994,1043,0.224,1046,0.327,1047,1.608,1048,1.695,1058,1.681,1060,0.633,1061,0.327,1062,0.339,1073,0.176,1075,0.286,1076,0.339,1079,0.933,1083,0.226,1106,5.019,1131,1.066,1135,0.613,1138,2.993,1146,2.993,1150,0.432,1151,3.206,1152,0.765,1153,0.395,1154,1.113,1155,0.395,1156,0.765,1157,0.765,1158,1.352,1159,3.144,1160,0.633,1161,1.352,1162,0.719,1163,1.642,1164,1.608,1165,3.148,1166,0.765,1167,0.765,1168,1.113,1169,0.765,1170,0.765,1171,0.765,1172,0.308,1173,0.765,1174,1.352,1175,1.915,1176,0.395,1177,0.395,1178,0.719,1179,0.765,1180,1.352,1181,2.528,1182,0.395,1183,1.352,1184,0.395,1185,0.765,1186,0.765,1187,1.042,1188,0.719,1189,0.765,1190,0.719,1191,0.765,1192,0.765,1193,0.765,1194,0.765,1195,0.765,1196,1.352,1197,0.765,1198,0.765,1199,0.765,1200,0.633,1201,0.765,1202,0.339,1203,0.765,1204,1.042,1205,0.719,1206,0.765,1207,0.765,1208,1.352,1209,0.765,1210,0.765,1211,0.353,1212,0.339,1213,0.339,1214,0.395,1215,0.395,1216,1.352,1217,0.395,1218,0.292,1219,0.395,1220,0.395,1221,0.765,1222,1.44,1223,0.765,1224,0.765,1225,0.765,1226,0.395]],["title/reference/hiven_parsers.html#hiven-parsers",[12,1.438,580,2.224]],["text/reference/hiven_parsers.html#hiven-parsers",[]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers",[1115,5.101]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers",[12,2.937,92,3.752,114,1.999,170,3.159,178,4.13,199,4.727,580,4.545]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers-attributes",[348,3.255]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers-attributes",[]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.storage",[822,2.873]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.storage",[141,1.697,170,3.252,822,4.433]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers-methods",[298,2.17]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers-methods",[]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.__init__",[771,2.517]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.__init__",[43,1.669,71,3.834,100,3.074,207,1.588,743,1.748,746,1.725,771,3.587,772,2.229,1151,4.797]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch",[1079,3.854]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch",[4,1.852,25,2.234,43,1.714,49,3.939,92,3.987,94,3.895,96,3.46,97,4.032,106,4.636,113,3.984,114,2.193,115,4.46,116,3.971,134,3,141,1.741,153,1.501,164,4.636,171,1.33,185,1.678,190,1.573,207,0.928,223,2.027,298,1.808,303,2.48,338,2.457,363,4.081,372,2.48,385,2.397,392,2.873,486,3.211,534,2.083,543,1.759,580,4.8,679,4.298,743,1.022,746,1.009,754,4.561,772,1.828,867,3.379,1014,2.973,1022,3.587,1058,2.424,1073,2.208,1075,3.587,1079,5.304,1083,2.838,1106,2.773,1151,2.805,1152,7.041,1153,4.957,1154,8.189,1155,4.957,1156,7.041]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update",[643,5.101]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update",[4,1.647,21,3.439,25,1.399,36,5.545,43,1.748,92,1.608,94,3.578,100,2.603,114,1.893,115,4.498,116,4.004,123,2.313,141,1.417,153,1.335,170,2.291,171,1.699,173,3.66,178,2.041,207,0.826,298,2.36,338,3.207,342,2.988,347,2.025,350,4.572,420,0.945,543,1.101,545,1.657,580,4.303,643,3.779,743,0.909,746,0.897,772,2.007,822,2.128,944,3.097,1014,2.838,1035,3.236,1037,3.262,1047,4.494,1106,4.287,1135,3.531,1138,2.554,1146,2.554,1151,2.494,1157,6.469,1158,6.075,1159,2.554,1160,3.645,1161,6.075,1162,4.139,1163,7.197,1164,3.062,1165,2.62]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down",[649,5.101]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down",[4,1.852,21,4.226,25,1.573,43,1.734,67,4.24,92,1.808,94,4.53,100,2.039,101,3.895,114,2.111,115,4.711,116,4.194,123,2.601,141,1.514,153,1.501,158,2.551,170,2.494,171,0.937,173,3.984,207,0.928,298,2.568,346,4.715,543,1.238,545,2.647,580,4.544,648,7.643,649,4.249,654,7.318,743,1.022,746,1.009,772,1.99,822,2.393,944,3.371,1010,3.733,1014,2.814,1058,3.069,1060,4.099,1106,4.987,1138,2.873,1146,2.873,1151,2.805,1159,2.873,1165,4.185,1166,7.041,1167,7.041,1168,8.189,1169,7.041]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update",[314,4.632]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update",[4,1.888,21,3.714,25,1.604,37,4.332,43,1.744,92,1.843,94,3.949,100,2.604,114,2.016,115,4.746,116,4.225,123,2.652,141,1.53,153,1.531,170,2.529,171,1.564,173,4.039,207,0.947,298,2.604,313,4.674,314,3.934,338,3.539,420,1.084,543,1.263,580,4.584,642,4.516,743,1.042,746,1.028,772,2.007,822,2.44,944,3.417,1014,2.839,1017,4.18,1035,2.528,1106,5.031,1138,2.929,1146,2.929,1151,2.86,1159,2.929,1165,3.004,1170,7.139,1171,7.139,1172,3.934]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join",[618,5.101]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join",[4,1.901,21,3.727,25,1.614,43,1.74,92,1.855,94,3.967,100,2.405,114,2.022,115,4.757,116,4.235,123,2.67,141,1.536,153,1.541,170,2.54,171,1.704,173,4.058,189,3.534,207,0.953,298,2.616,342,2.925,372,2.545,543,1.271,580,4.597,617,5.931,618,4.361,743,1.049,746,1.035,772,2.013,822,2.456,944,3.433,1014,2.847,1020,2.283,1029,4.207,1047,3.534,1106,5.319,1138,2.948,1146,2.948,1151,2.878,1159,2.948,1165,3.023,1173,7.172,1174,6.735,1175,6.735,1176,5.087,1177,5.087]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave",[1178,5.588]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave",[4,2.116,21,3.946,25,1.797,43,1.733,92,2.065,94,4.273,100,2.237,114,2.117,115,4.945,116,4.402,123,2.972,141,1.625,153,1.715,170,2.736,171,1.07,173,4.371,207,1.061,298,2.818,342,2.376,543,1.415,545,2.904,580,4.814,623,6.903,743,1.167,746,1.152,772,1.962,822,2.734,944,3.698,1014,2.981,1060,4.683,1106,5.283,1138,3.282,1146,3.282,1151,3.204,1159,3.282,1165,3.365,1178,5.318,1179,7.725]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter",[357,4.921]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter",[4,1.812,21,3.63,25,1.539,32,4.01,43,1.747,69,1.24,92,1.768,94,3.834,100,2.556,114,2.242,115,4.672,116,4.159,123,2.544,141,1.496,153,1.469,170,2.455,171,1.528,173,3.922,207,0.908,298,2.528,347,4.055,350,3.263,357,4.01,420,1.735,543,1.211,545,1.823,580,4.499,743,0.999,746,0.986,772,1.97,822,2.341,944,3.318,1014,2.786,1037,3.589,1058,1.669,1106,4.938,1138,2.81,1146,2.81,1151,2.744,1159,2.81,1164,3.368,1165,2.882,1180,6.509,1181,5.732,1182,4.849]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit",[355,4.921]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit",[4,1.894,21,3.721,25,1.609,33,3.947,43,1.733,69,2.303,92,3.024,94,3.958,100,2.75,114,2.019,115,4.752,116,4.23,123,2.661,141,1.533,153,1.536,170,2.534,171,1.566,173,4.049,207,0.95,298,2.61,342,2.77,350,3.368,355,4.193,359,5.917,408,5.426,420,1.778,543,1.267,545,1.906,580,4.59,635,4.429,743,1.045,746,1.032,772,1.85,944,3.425,1014,2.843,1106,5.038,1138,2.938,1146,2.938,1151,2.869,1159,2.938,1164,3.522,1165,3.013,1181,5.917,1183,6.719,1184,5.07]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join",[625,5.101]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join",[4,1.932,21,3.761,25,1.641,30,6.22,43,1.742,69,1.322,92,1.886,94,4.013,100,2.631,114,2.145,115,4.787,116,4.261,123,2.714,141,1.549,153,1.567,170,2.57,171,1.583,173,4.105,207,0.969,298,2.646,350,4.277,420,1.109,543,1.292,545,1.944,580,4.631,625,4.434,743,1.066,746,1.052,772,2.028,822,2.497,944,3.473,1014,2.868,1037,3.828,1106,5.082,1138,2.997,1146,2.997,1151,2.926,1159,2.997,1164,3.593,1165,3.074,1181,6,1185,7.255]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave",[307,4.767]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave",[4,1.852,21,3.675,25,1.573,31,6.036,43,1.744,69,1.267,92,1.808,94,3.895,100,2.581,114,1.999,115,4.711,116,4.194,123,2.601,141,1.514,153,1.501,170,2.494,171,1.547,173,3.984,207,0.928,298,2.568,307,3.971,350,4.197,420,1.063,543,1.238,545,3.352,580,4.544,743,1.022,746,1.009,772,1.99,822,2.393,944,3.371,1014,2.814,1040,7.318,1058,2.424,1062,4.249,1106,4.987,1138,2.873,1146,2.873,1151,2.805,1159,2.873,1164,3.443,1165,2.946,1181,5.823,1186,7.041]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline",[356,4.767]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline",[21,3.818,33,5.096,43,1.687,92,2.388,100,2.464,113,3.704,114,1.907,115,4.257,116,3.789,124,5.602,141,1.748,170,3.014,171,1.237,173,4.815,207,1.226,298,3.104,355,7.818,356,5.244,420,1.825,543,1.636,580,5.101,738,6.623,743,1.35,746,1.332,755,4.548,772,2.234,785,5.612,944,4.073,1014,2.067,1047,4.548,1151,3.704,1159,3.794,1183,7.99,1187,6.158]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online",[358,4.767]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online",[21,3.818,32,5.414,43,1.687,92,2.388,100,2.464,113,3.704,114,1.907,115,4.257,116,3.789,124,5.602,141,1.748,170,3.014,171,1.237,173,4.815,207,1.226,298,3.104,357,7.818,358,5.244,420,1.825,543,1.636,580,5.101,738,6.623,743,1.35,746,1.332,755,4.548,772,2.234,785,5.612,944,4.073,1014,2.067,1047,4.548,1151,3.704,1159,3.794,1180,7.99,1187,6.158]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update",[1188,5.588]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update",[4,1.87,21,3.695,25,1.588,34,6.078,43,1.749,69,1.28,92,1.826,94,3.921,100,2.053,114,2.262,115,4.729,116,4.209,123,2.627,141,1.522,153,1.516,171,1.555,173,4.012,207,0.937,347,4.114,350,4.215,420,1.073,543,1.25,545,1.881,580,3.613,743,1.032,746,1.018,772,1.998,822,2.416,1014,2.827,1037,3.705,1058,1.723,1106,5.009,1138,2.9,1146,2.9,1151,2.832,1159,2.9,1164,3.477,1165,2.974,1181,5.863,1188,4.7,1189,7.09]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk",[1190,5.588]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk",[4,1.558,21,3.329,25,1.324,43,1.751,69,1.066,92,1.521,94,3.435,100,2.544,114,2.065,115,4.396,116,3.914,123,2.189,141,1.372,153,1.263,170,2.2,171,1.66,173,3.514,178,1.932,207,0.781,298,2.265,338,3.079,342,2.935,347,3.776,350,4.616,420,1.332,543,1.042,545,1.568,580,4.189,638,5.549,743,0.86,746,0.849,772,1.961,822,2.014,944,2.973,1014,2.774,1035,3.107,1037,3.087,1047,4.314,1106,4.15,1135,3.341,1138,2.417,1146,2.417,1151,2.36,1158,5.832,1159,2.417,1160,3.449,1161,5.832,1162,3.917,1163,5.832,1164,2.897,1165,2.479,1190,3.917,1191,6.21]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update",[622,5.101]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update",[4,1.8,21,3.618,25,1.529,43,1.744,92,1.758,94,3.817,100,2.549,114,1.973,115,4.66,116,4.149,123,2.529,141,1.49,153,1.459,170,2.444,171,1.76,173,3.905,207,0.902,298,2.517,342,3.197,420,1.033,543,1.204,580,4.486,621,6.166,622,4.131,743,0.993,746,0.98,772,2.163,822,3.332,944,3.303,1014,2.779,1029,3.985,1106,4.509,1138,2.792,1146,2.792,1151,2.726,1159,2.792,1165,2.864,1174,6.48,1175,8.266,1192,6.9,1193,6.9,1194,6.9]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create",[603,4.767]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create",[4,2.006,21,3.837,25,1.704,43,1.739,88,3.669,92,1.958,94,4.119,100,2.476,114,1.917,115,4.853,116,4.32,123,2.817,141,1.581,153,1.626,170,2.638,171,1.745,173,4.214,207,1.006,298,2.716,543,1.341,580,4.707,602,6.654,603,4.301,743,1.107,744,5.966,746,1.092,772,1.908,944,3.565,1014,2.915,1020,2.409,1106,5.165,1138,3.111,1146,3.111,1151,3.038,1159,3.111,1165,3.191,1195,7.447,1196,6.993]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete",[613,5.101]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete",[4,1.999,21,3.83,25,1.698,43,1.737,92,1.951,94,4.109,100,2.151,114,2.172,115,4.847,116,4.314,123,2.808,141,1.578,153,1.621,170,2.632,171,1.011,173,4.204,207,1.002,298,2.71,455,4.27,543,1.337,545,3.208,580,4.7,595,4.057,612,6.639,613,4.586,743,1.103,746,1.089,772,1.658,944,3.556,1014,2.911,1058,3.665,1106,4.774,1138,3.1,1146,3.1,1151,3.027,1159,3.1,1165,3.18,1197,7.429]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update",[614,5.101]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update",[4,2.006,21,3.837,25,1.704,40,6.384,43,1.739,88,3.669,92,1.958,94,4.119,100,2.476,114,1.917,115,4.853,116,4.32,123,2.817,141,1.581,153,1.626,170,2.638,171,1.745,173,4.214,207,1.006,298,2.716,543,1.341,580,4.707,614,4.602,743,1.107,744,5.966,746,1.092,772,1.908,944,3.565,1014,2.915,1020,2.409,1106,5.165,1138,3.111,1146,3.111,1151,3.038,1159,3.111,1165,3.191,1196,6.993,1198,7.447]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update",[599,5.101]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update",[4,1.979,21,3.809,25,1.68,39,6.323,43,1.74,69,2.555,92,1.931,94,4.08,100,2.658,114,2.058,115,4.829,116,4.298,123,2.779,141,1.569,153,1.604,170,2.613,171,1.604,173,4.174,207,0.992,298,2.69,420,1.136,543,1.323,580,4.679,599,4.539,743,1.092,746,1.077,772,2.049,822,2.557,944,3.531,1014,2.898,1031,4.015,1106,5.135,1138,3.069,1146,3.069,1151,2.996,1159,3.069,1165,3.147,1199,7.376,1200,4.379]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update",[600,5.101]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update",[4,1.972,21,3.802,25,1.675,38,6.308,43,1.74,92,1.925,94,4.07,100,2.654,114,2.055,115,4.823,116,4.293,123,2.769,141,1.566,153,1.598,170,2.607,171,1.601,173,4.164,207,0.988,298,2.684,420,1.132,543,1.319,551,5.933,580,4.672,600,4.524,743,1.088,746,1.074,772,2.046,822,2.548,944,3.523,1014,2.893,1046,4.364,1106,5.127,1138,3.058,1146,3.058,1151,2.986,1159,3.058,1165,3.136,1201,7.359,1202,4.524]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create",[615,5.101]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create",[4,1.979,21,3.809,25,1.68,27,5.909,43,1.74,92,1.931,94,4.08,100,2.658,114,2.058,115,4.829,116,4.298,123,2.779,141,1.569,153,1.604,170,2.613,171,1.604,173,4.174,207,0.992,298,2.69,337,3.214,420,1.136,543,1.323,580,4.679,615,4.539,743,1.092,746,1.077,772,2.049,822,2.557,944,3.531,1014,2.898,1030,4.242,1048,4.856,1106,5.135,1138,3.069,1146,3.069,1151,2.996,1159,3.069,1165,3.147,1203,7.376,1204,3.832]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete",[1205,5.588]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete",[4,1.965,21,3.795,25,1.669,29,6.293,43,1.74,92,1.918,94,4.061,100,2.65,114,2.052,115,4.817,116,4.288,123,2.76,141,1.563,153,1.593,170,2.6,171,1.598,173,4.154,207,0.985,298,2.678,337,3.205,420,1.574,543,1.314,580,4.665,743,1.084,746,1.07,772,2.043,822,2.539,944,3.514,1014,2.889,1048,4.833,1061,4.35,1106,5.12,1138,3.048,1146,3.048,1151,2.976,1159,3.048,1165,3.126,1204,3.806,1205,4.939,1206,7.341]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update",[616,4.921]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update",[4,1.888,21,3.714,25,2.626,28,6.12,43,1.736,92,1.843,94,3.949,100,2.604,114,2.207,115,5.063,116,4.507,123,2.652,141,1.53,153,1.531,170,2.529,171,1.564,173,4.039,207,0.947,298,2.604,337,3.149,420,1.084,543,1.263,580,4.584,616,4.18,743,1.042,746,1.028,772,2.007,822,2.44,912,6.12,944,3.417,1014,2.839,1030,4.049,1048,4.7,1106,5.031,1131,5.284,1138,2.929,1146,2.929,1151,2.86,1159,2.929,1165,3.004,1204,3.657,1207,7.139,1208,6.704]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start",[656,5.101]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start",[4,1.453,21,3.192,25,2.257,41,4.872,43,1.747,69,2.18,92,1.418,94,3.259,100,2.598,114,2.204,115,4.663,116,4.151,123,2.041,127,1.19,133,3.733,141,1.315,153,1.178,170,2.087,171,1.113,173,3.334,207,0.728,259,2.083,265,2.311,298,2.149,337,3.142,338,1.928,455,4.266,465,5.138,496,2.701,543,0.972,556,2.701,580,4.045,601,4.175,656,3.333,711,2.604,743,0.802,746,0.791,772,2.003,912,5.051,944,2.82,1014,2.505,1043,2.2,1048,3.879,1058,1.339,1106,3.979,1131,4.361,1138,2.253,1146,2.253,1151,2.2,1159,2.253,1165,2.311,1200,3.216,1204,2.814,1208,5.533,1209,5.892,1210,5.892,1211,3.475,1212,3.333,1213,3.333,1214,3.889,1215,3.889,1216,7.452,1217,3.889,1218,2.878,1219,3.889,1220,3.889]],["title/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update",[273,4.767]],["text/reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update",[4,1.773,21,3.587,25,1.506,43,1.744,69,2.648,92,1.731,94,3.775,100,2.531,114,2.076,115,4.633,116,4.124,123,2.49,141,1.478,153,1.437,170,2.831,171,1.749,173,3.862,207,0.889,270,5.644,273,3.801,298,2.489,420,1.018,543,1.185,580,4.455,743,0.978,746,0.965,772,2.152,822,3.295,944,3.267,1014,2.759,1031,3.598,1106,4.471,1138,2.75,1146,2.75,1151,2.685,1159,2.75,1165,2.82,1221,6.825,1222,8.74,1223,6.825,1224,6.825,1225,6.825,1226,4.745]],["title/reference/hivenclient.html",[100,1.264,164,2.873]],["text/reference/hivenclient.html",[4,1.448,5,0.898,11,0.757,12,1.577,14,0.348,16,0.589,17,0.206,18,0.306,21,0.736,25,2.365,26,0.332,43,1.742,45,1.496,50,0.367,54,0.445,56,0.145,57,2.428,58,0.445,67,3.863,68,0.717,69,2.308,71,0.742,72,0.637,73,0.53,74,0.881,76,2.008,77,0.462,79,0.24,80,0.435,81,2.521,86,0.383,87,2.321,88,0.333,89,0.275,90,0.194,91,1.187,92,1.359,96,1.904,97,0.656,98,2.235,99,1.548,100,1.386,101,2.3,106,3.634,109,0.179,114,1.422,116,0.623,117,0.234,123,0.315,127,1.963,130,0.396,131,0.947,132,1.357,133,0.462,134,0.892,137,0.396,141,1.718,142,0.426,145,0.41,149,1.97,151,0.579,153,1.415,156,1.089,158,1.917,159,0.34,160,0.497,161,0.456,162,0.468,164,1.78,167,0.214,169,0.218,170,3.006,171,1.592,177,0.383,178,1.502,185,1.989,186,1.454,190,2.844,202,0.353,203,0.579,207,0.998,211,1.977,212,0.357,214,1.926,217,1.611,223,1.319,229,0.169,242,0.878,248,0.623,255,0.719,260,0.73,261,0.57,262,1.553,263,1.576,268,1.68,274,2.567,275,0.861,281,0.315,286,2.948,289,0.353,294,0.203,298,0.418,299,0.36,300,0.628,301,1.955,303,2.099,309,0.72,310,3.117,313,1.283,323,3.061,330,0.962,336,0.218,337,1.136,338,0.568,342,1.236,346,0.402,347,2.881,348,0.169,350,1.892,361,0.781,362,0.891,363,1.454,368,1.085,374,0.641,382,0.29,385,1.506,392,2.07,398,0.563,404,0.891,406,0.435,411,0.255,414,3.746,419,0.539,420,1.788,421,0.247,423,0.713,426,2.254,427,0.921,428,0.866,429,0.892,430,0.435,431,0.21,432,0.234,434,0.214,445,0.325,452,3.035,455,2.714,461,0.285,467,0.516,468,0.2,470,0.2,471,0.196,481,1.777,482,0.497,483,0.497,488,0.552,491,0.24,509,0.377,511,0.445,518,0.367,519,0.921,521,0.223,527,0.595,529,0.973,534,1.689,538,0.24,540,0.651,543,1.67,545,1.614,551,1.607,554,1.12,555,2.05,561,1.3,571,0.191,579,0.24,580,0.306,581,0.468,585,1.587,604,0.264,631,0.786,635,0.191,650,0.162,679,2.62,680,0.515,681,0.515,683,1.549,696,1.12,700,0.255,711,1.68,721,0.228,723,0.456,726,0.537,737,0.611,742,0.435,743,1.056,746,1.042,754,0.389,755,0.611,758,0.456,759,2.323,771,0.372,772,2.104,773,1.794,774,0.172,777,0.234,813,1.49,815,1.572,821,0.537,822,1.396,823,3.216,847,0.786,848,0.537,850,0.426,855,0.917,867,0.6,972,1.016,973,0.537,1010,1.893,1013,0.727,1014,2.089,1024,0.945,1025,0.945,1026,1.638,1027,0.945,1035,0.301,1039,0.685,1043,3.227,1044,0.831,1048,0.396,1050,0.264,1051,0.275,1058,2.814,1059,0.228,1063,1.953,1073,1.117,1074,0.579,1076,5.178,1083,1.758,1084,0.14,1089,0.303,1090,0.344,1091,0.383,1092,0.275,1095,0.982,1099,0.24,1103,0.264,1104,0.179,1115,0.264,1131,0.445,1136,0.275,1141,1.314,1145,0.537,1160,0.497,1164,0.417,1172,0.468,1187,0.223,1200,0.497,1202,0.515,1204,0.435,1211,0.275,1212,0.515,1213,0.515,1218,0.445,1227,0.337,1228,0.275,1229,1.548,1230,0.564,1231,2.165,1232,0.611,1233,0.308,1234,0.982,1235,0.961,1236,0.308,1237,0.275,1238,0.275,1239,0.275,1240,0.275,1241,0.497,1242,2.583,1243,0.308,1244,1.673,1245,0.727,1246,1.25,1247,0.275,1248,0.308,1249,0.308,1250,0.308,1251,0.308,1252,0.308,1253,0.308,1254,0.537,1255,0.601,1256,1.075,1257,0.445,1258,0.601,1259,0.601,1260,0.445,1261,0.601,1262,0.601,1263,0.601,1264,0.601,1265,2.669,1266,1.541,1267,0.264,1268,1.075,1269,0.308,1270,0.308,1271,0.308,1272,0.308,1273,1.87,1274,1.87,1275,0.308,1276,0.308,1277,0.308,1278,0.308,1279,0.308,1280,0.308,1281,0.308,1282,1.872,1283,0.601,1284,0.601,1285,0.601,1286,0.601,1287,0.564,1288,0.88,1289,0.88,1290,0.88,1291,0.601,1292,0.308,1293,0.308,1294,0.308,1295,0.829,1296,1.599,1297,0.264,1298,0.685,1299,2.074,1300,1.388,1301,3.873,1302,0.727,1303,0.727,1304,0.727,1305,0.727,1306,0.727,1307,0.685,1308,0.308,1309,0.308,1310,0.308,1311,0.88,1312,0.601,1313,0.308,1314,0.308,1315,0.308,1316,0.308,1317,0.308,1318,0.601,1319,0.308,1320,0.601,1321,0.601,1322,0.426,1323,0.601,1324,0.601,1325,0.308,1326,0.308,1327,0.308,1328,0.308,1329,0.337,1330,0.564,1331,1.157,1332,0.564,1333,0.564,1334,0.601,1335,0.308,1336,0.786,1337,0.564,1338,0.868,1339,0.88,1340,0.456,1341,0.88,1342,0.564,1343,0.564,1344,0.88,1345,0.337]],["title/reference/hivenclient.html#websocket-clients",[100,1.264,164,2.873]],["text/reference/hivenclient.html#websocket-clients",[]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient",[71,2.691]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient",[5,4.935,12,2.971,54,6.677,68,3.455,274,4.432,470,5.842]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient-attributes",[348,3.255]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient-attributes",[]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.account",[73,3.583]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.account",[73,5.432,100,2.612,141,1.668,151,5.939,275,4.734,1228,8.061]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.api_version",[1229,4.921]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.api_version",[5,4.935,12,2.971,16,6.041,127,2.76,141,1.668,275,4.734]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.application",[72,4.306]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.application",[25,2.846,72,6.49,100,2.597,141,1.658,151,5.904,203,5.904,275,4.707]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.bio",[429,3.794]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.bio",[69,2.361,429,5.889]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.blocked",[561,4.133]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.blocked",[69,2.334,141,1.687,561,6.34,972,5.65]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.bot",[131,2.691]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.bot",[69,2.334,131,4.128,141,1.687,158,4.696]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type",[1230,5.588]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type",[68,3.338,71,3.942,100,2.524,109,5.051,127,2.667,141,1.611,171,1.647,223,2.158,310,3.539,604,7.472,742,6.308,758,6.61]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_user",[261,3.854]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_user",[69,2.347,100,2.658,242,3.215]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close_timeout",[1231,5.588]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close_timeout",[98,4.432,268,6.041,274,4.432,1232,6.266,1233,9.021,1234,7.733]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connection",[274,2.924]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connection",[67,5.528,141,1.697,274,4.511]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connection_status",[1236,5.95]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connection_status",[141,1.687,203,6.008,274,4.484,700,7.548]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email",[430,4.306]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email",[69,2.32,100,2.627,151,5.973,214,4.202,1237,8.108]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email_verified",[431,4.056]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email_verified",[141,1.687,158,4.696,430,6.605,1238,8.155]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.flags",[77,3.123]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.flags",[69,2.32,77,4.762,650,4.762,1239,8.108,1240,8.108]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.header",[300,2.67]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.header",[69,2.347,300,4.12,1241,7.592]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.heartbeat",[1242,5.317]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.heartbeat",[1242,8.253,1243,9.235]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.host",[481,4.216]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.host",[12,3.006,141,1.687,229,4.993,481,6.467]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.house_ids",[545,2.237]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.house_ids",[141,1.668,170,3.195,338,4.472,342,2.775,420,1.935,529,4.687]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.http",[149,2.65]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.http",[81,3.987,100,2.612,141,1.668,149,4.017,242,3.159,274,4.432]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.icon",[423,3.033]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.icon",[69,2.347,423,4.679,1241,7.592]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.id",[420,1.276]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.id",[69,2.334,203,6.008,420,1.957,579,7.105]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.initialised",[255,3.737]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.initialised",[80,6.453,100,2.582,141,1.648,167,6.194,169,6.319,255,5.601,361,6.079,972,5.52]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.location",[427,3.917]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.location",[69,2.347,98,4.511,427,6.044]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.log_websocket",[1244,5.317]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.log_websocket",[67,5.401,141,1.658,511,6.638,679,5.474,972,5.552,1244,8.014,1245,7.417]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.loop",[106,3.917]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.loop",[92,3.329,106,6.008,141,1.687,363,5.289]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.message_broker",[1136,5.317]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.message_broker",[88,3.412,89,8.061,90,5.666,91,6.528,92,3.29,141,1.668]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.mfa_enabled",[432,4.512]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.mfa_enabled",[141,1.687,972,5.65,1245,7.548,1247,8.155]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.name",[223,1.473]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.name",[69,2.361,223,2.286]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.open",[815,4.056]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.open",[141,1.687,274,4.484,815,6.222,972,5.65]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.presence",[202,3.491]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.presence",[69,2.347,202,5.387,275,4.818]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.queue_events",[99,4.921]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.queue_events",[67,5.401,99,7.417,141,1.658,511,6.638,679,5.474,972,5.552,1245,7.417]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.room_ids",[455,2.977]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.room_ids",[141,1.611,170,3.088,337,3.761,338,4.321,342,2.681,361,5.942,420,1.869,467,5.114,529,4.529,1248,8.717]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.startup_time",[1249,5.95]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.startup_time",[131,4.08,133,4.734,141,1.668,1250,9.021,1251,9.021,1252,9.021]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.storage",[822,2.873]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.storage",[100,2.658,141,1.697,1253,9.181]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.token",[414,3.367]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.token",[100,2.658,141,1.697,414,5.195]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.user_flags",[79,4.632]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.user_flags",[77,4.847,1187,6.684]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.username",[309,3.062]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.username",[69,2.361,309,4.752]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.website",[428,3.683]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.website",[69,2.347,98,4.511,428,5.683]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient-methods",[298,2.17]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient-methods",[]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__",[771,2.517]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__",[5,3.258,12,1.299,16,2.641,25,2.723,26,2.182,43,1.731,68,0.902,69,0.602,74,1.857,87,4.195,88,1.492,92,2.419,96,1.938,97,2.915,98,4.433,99,4.925,100,1.724,101,3.969,106,4.724,117,1.785,123,2.07,127,2.626,131,1.784,133,2.07,145,2.689,153,0.713,158,3.065,164,5.262,171,0.745,185,3.116,186,4.984,190,3.132,207,0.441,212,2.344,223,0.583,248,2.795,274,1.157,303,2.815,310,3.483,346,2.641,362,3.07,363,2.95,398,1.938,414,5.208,426,3.657,445,2.135,481,5.4,482,3.262,483,3.262,509,2.477,519,2.597,529,2.05,543,0.588,580,2.01,581,3.07,585,5.441,635,1.457,679,4.38,680,3.381,683,5.311,723,2.991,737,1.636,743,0.485,746,0.479,771,1.669,772,2.152,773,3.381,774,1.317,821,3.525,848,3.525,1013,3.262,1043,4.06,1058,2.624,1095,3.381,1115,2.018,1145,3.525,1229,5.485,1231,7.157,1232,2.74,1242,7.425,1244,5.322,1246,4.549,1254,3.525,1255,3.944,1256,3.704,1257,2.92,1258,3.944,1259,3.944,1260,2.92,1261,3.944,1262,3.944,1263,3.944,1264,3.944,1265,1.381,1266,2.211,1267,2.018,1268,2.211,1269,2.354,1270,2.354,1271,2.354,1272,2.354,1273,5.322,1274,5.322,1275,2.354,1276,2.354,1277,2.354,1278,2.354,1279,2.354,1280,2.354,1281,2.354]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__",[1089,3.004]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__",[43,1.755,56,2.756,101,3.239,131,3.574,141,1.082,171,1.106,207,1.097,223,1.956,261,5.118,382,3.815,420,1.695,421,3.252,461,3.751,631,7.993,743,1.207,746,1.191,772,2.351,777,4.44,815,5.387,1058,2.016,1083,5.483,1089,2.956,1090,3.352,1092,5.232,1230,5.498,1265,3.435]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__str__",[1091,3.794]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__str__",[43,1.684,141,1.559,207,1.579,223,2.088,743,1.738,746,1.716,772,2.222,1058,2.903,1083,4.828,1091,5.377,1265,4.948]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close",[268,3.985]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close",[4,1.817,12,2.288,18,3.541,21,4.363,43,1.685,71,2.2,87,3.646,92,3.546,98,4.343,100,1.408,101,4.89,106,4.573,127,2.126,132,8.041,134,2.96,137,4.573,153,1.473,156,6.881,158,5.003,159,3.931,160,5.745,161,5.268,162,5.408,164,4.573,171,0.919,185,1.647,190,1.543,207,1.518,223,1.204,260,4.429,268,6.702,274,3.982,294,3.202,303,2.447,361,4.736,362,5.408,374,3.886,406,5.027,426,4.505,534,2.043,543,1.215,679,6.247,743,1.003,746,0.99,772,1.809,867,3.316,973,6.208,1073,2.166,1104,2.819,1265,2.854,1282,9.723,1283,6.947,1284,6.947]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect",[274,2.924]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect",[4,1.157,12,2.691,25,3.046,43,1.741,58,3.653,71,2.232,87,2.59,98,2.425,100,1.782,101,2.73,127,2.148,130,3.249,141,0.912,153,0.938,158,2.54,171,0.585,185,1.048,186,3.429,190,2.983,207,0.58,211,3.295,214,3.251,217,2.66,223,0.767,268,2.074,274,4.62,303,1.738,323,7.347,330,2.268,368,2.897,374,2.761,404,3.842,414,5.915,426,2.516,452,2.286,534,2.949,543,0.774,571,1.917,585,3.743,683,3.653,721,2.292,726,4.41,743,0.638,746,0.63,759,2.776,772,2.269,773,7.004,813,3.225,822,2.971,847,5.499,855,3.954,867,3.365,1024,1.564,1025,1.564,1026,2.492,1027,1.564,1043,3.972,1044,1.84,1050,2.655,1051,2.767,1058,1.699,1059,2.292,1073,2.198,1095,4.231,1103,2.655,1131,3.653,1211,2.767,1218,3.653,1265,1.817,1268,5.779,1273,5.499,1274,5.499,1285,4.936,1286,4.936,1287,2.908,1288,6.154,1289,6.154,1290,6.154,1291,4.936,1292,3.097,1293,3.097,1294,3.097]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit",[1295,4.306]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit",[4,1.817,12,2.288,25,1.543,43,1.743,45,2.134,81,2.15,96,3.413,100,2.346,114,1.557,116,3.937,149,3.609,171,0.919,177,4.429,190,1.543,207,0.911,211,3.268,214,3.217,217,3.003,299,1.988,300,3.637,309,4.17,310,2.82,330,2.234,368,2.29,398,2.39,411,4.022,423,4.13,427,5.335,428,5.016,429,5.167,434,3.379,529,3.61,534,2.043,543,1.215,711,7.077,743,1.003,746,0.99,759,3.697,772,1.55,813,2.234,1024,2.456,1025,2.456,1026,3.508,1027,2.456,1058,1.674,1073,2.166,1090,2.785,1265,2.854,1295,5.865,1296,3.842,1297,4.169]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity",[1298,4.632]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity",[25,2.566,43,1.704,57,3.686,81,3.575,141,1.924,153,1.836,170,3.824,171,1.528,185,2.052,190,2.888,207,1.135,223,1.5,303,2.134,310,2.46,313,4.32,385,2.063,420,2.083,452,3.745,543,2.021,743,1.249,746,1.233,772,1.805,822,2.926,823,5.08,1010,4.287,1014,3.285,1058,2.784,1265,3.556,1298,4.718,1299,8.031,1300,3.65,1301,5.556]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house",[1302,4.921]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house",[25,2.566,43,1.704,57,3.686,81,3.575,141,1.924,153,1.836,170,3.824,171,1.528,185,2.052,190,2.888,207,1.135,223,1.5,303,2.134,310,2.46,342,2.8,385,2.063,420,2.083,452,3.745,543,2.021,545,3.651,743,1.249,746,1.233,772,1.805,822,2.926,823,5.08,1010,4.287,1014,3.285,1058,2.784,1265,3.556,1300,3.65,1301,5.556,1302,5.012]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member",[1303,4.921]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member",[43,1.726,114,1.799,141,1.673,153,1.815,171,1.516,185,2.028,207,1.122,223,1.483,303,2.826,310,2.432,342,2.783,350,5.133,385,2.732,392,4.65,420,2.073,452,4.476,543,2.005,545,3.634,743,1.235,746,1.219,754,5.197,772,1.791,822,2.892,1010,4.254,1014,1.891,1058,3.328,1063,7.524,1265,3.515,1300,3.607,1303,4.954]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room",[1304,4.921]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room",[25,2.54,43,1.709,57,3.648,81,3.538,141,1.915,153,1.808,170,3.81,171,1.512,185,2.02,190,2.866,207,1.118,223,1.477,263,5.027,303,2.102,310,2.423,336,4.229,337,2.09,385,2.032,420,2.07,452,3.707,455,4.828,467,3.501,543,2,743,1.23,746,1.214,772,1.786,822,2.881,823,5.027,1010,4.243,1014,3.271,1058,2.755,1265,3.501,1300,3.593,1301,5.513,1304,4.935]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room",[1305,4.921]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room",[25,2.54,43,1.709,57,3.648,81,3.538,141,1.915,153,1.808,170,3.81,171,1.512,185,2.02,190,2.866,207,1.118,223,1.477,262,4.955,303,2.102,310,2.423,337,2.09,385,2.032,420,2.07,452,3.707,455,4.828,467,3.501,540,4.417,543,2,743,1.23,746,1.214,772,1.786,822,2.881,823,5.027,1010,4.243,1014,3.271,1058,2.755,1265,3.501,1300,3.593,1301,5.513,1305,4.935]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship",[1306,4.921]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship",[25,2.553,43,1.703,57,3.667,69,2.057,81,3.556,141,1.92,153,1.822,170,3.817,171,1.52,185,2.036,190,2.877,207,1.126,223,1.489,303,2.118,310,2.441,347,4.448,385,2.047,420,2.076,452,3.726,543,2.01,551,5.388,743,1.24,746,1.224,772,1.796,822,2.904,823,5.053,1010,4.265,1014,3.278,1058,2.77,1265,3.529,1300,3.621,1301,5.534,1306,4.973]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room",[1307,4.632]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room",[25,2.553,43,1.707,57,3.667,81,3.556,141,1.92,153,1.822,170,3.817,171,1.52,185,2.036,190,2.877,207,1.126,223,1.489,303,2.118,310,2.441,337,3.175,342,1.85,385,2.047,420,2.076,452,3.726,455,4.843,543,2.01,743,1.24,746,1.224,772,1.796,822,2.904,823,5.053,1010,4.265,1014,3.278,1058,2.77,1265,3.529,1300,3.621,1301,5.534,1307,4.681]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user",[1039,4.632]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user",[25,2.566,43,1.704,57,3.686,69,2.327,81,3.575,141,1.924,153,1.836,170,3.824,171,1.528,185,2.052,190,2.888,207,1.135,223,1.5,303,2.134,310,2.46,347,4.461,385,2.063,420,2.083,452,3.745,543,2.021,743,1.249,746,1.233,772,1.805,822,2.926,823,5.08,1010,4.287,1014,3.285,1039,4.718,1058,2.784,1265,3.556,1300,3.65,1301,5.556]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity",[1172,4.632]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity",[25,2.464,43,1.694,45,3.406,57,3.539,76,4.806,81,3.432,114,2.124,141,1.89,153,1.728,170,3.356,171,1.79,178,3.595,185,1.931,190,2.801,207,1.068,223,1.412,286,4.569,303,2.009,310,2.316,313,5.054,385,1.942,392,4.499,420,2.032,452,3.595,543,1.94,743,1.176,746,1.161,772,1.97,823,4.876,1058,2.673,1172,4.44,1265,3.347,1298,4.44,1299,7.835,1301,5.387,1308,5.704]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house",[1160,4.921]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house",[25,2.476,43,1.695,45,3.423,57,3.556,76,4.83,81,3.449,114,2.13,141,1.894,153,1.741,170,3.366,171,1.795,178,3.614,185,1.945,190,2.811,207,1.076,223,1.423,286,4.398,303,2.024,310,2.333,342,3.28,385,1.956,392,4.522,420,2.038,452,3.614,543,1.95,545,3.572,743,1.185,746,1.169,772,1.977,823,4.901,1058,2.686,1160,4.752,1265,3.372,1301,5.408,1302,4.752,1309,5.746]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member",[1164,4.133]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member",[43,1.708,57,3.574,81,3.466,141,1.899,153,1.754,170,2.778,171,1.801,185,1.96,190,2.822,207,1.084,223,1.433,286,3.366,303,2.762,310,2.35,342,2.412,350,5.154,385,2.67,420,2.202,452,4.414,543,1.959,545,3.583,743,1.193,746,1.178,772,1.985,1058,3.282,1063,7.42,1084,2.639,1164,4.022,1265,3.397,1303,4.788,1310,5.789,1311,8.893]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room",[1213,5.101]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room",[25,2.464,43,1.694,45,3.406,57,3.539,76,4.806,81,3.432,114,2.124,141,1.89,153,1.728,170,3.356,171,1.79,178,3.595,185,1.931,190,2.801,207,1.068,223,1.412,263,6.687,286,4.388,303,2.009,310,2.316,385,1.942,392,4.499,420,2.032,452,3.595,455,4.74,543,1.94,743,1.176,746,1.161,772,1.97,823,4.876,1058,2.673,1213,4.89,1265,3.347,1301,5.387,1304,4.717,1312,7.764,1313,5.704]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room",[1212,5.101]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room",[25,2.464,43,1.694,45,3.406,57,3.539,76,4.806,81,3.432,114,2.124,141,1.89,153,1.728,170,3.356,171,1.79,178,3.595,185,1.931,190,2.801,207,1.068,223,1.412,262,6.591,286,4.388,303,2.009,310,2.316,385,1.942,392,4.499,420,2.032,452,3.595,455,4.74,540,5.746,543,1.94,743,1.176,746,1.161,772,1.97,823,4.876,1058,2.673,1212,4.89,1265,3.347,1301,5.387,1305,4.717,1314,5.704]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship",[1202,5.101]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship",[25,2.451,43,1.693,45,3.389,57,3.521,69,1.975,76,4.782,81,3.414,114,2.117,141,1.886,153,1.715,170,3.346,171,1.784,178,3.578,185,1.917,190,2.79,207,1.061,223,1.402,286,4.561,303,1.994,310,2.299,347,4.339,385,1.928,392,4.477,420,2.026,452,3.578,543,1.93,551,6.316,743,1.167,746,1.152,772,1.962,823,4.852,1058,2.659,1202,4.854,1265,3.323,1301,5.367,1306,4.683,1315,5.663]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room",[1204,4.306]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room",[25,2.476,43,1.695,45,3.423,57,3.556,76,4.83,81,3.449,114,2.13,141,1.894,153,1.741,170,3.366,171,1.795,178,3.614,185,1.945,190,2.811,207,1.076,223,1.423,286,4.398,303,2.024,310,2.333,337,3.588,385,1.956,392,4.522,420,2.038,452,3.614,455,4.754,543,1.95,743,1.185,746,1.169,772,1.977,823,4.901,1048,5.137,1058,2.686,1204,4.159,1265,3.372,1301,5.408,1307,4.473,1316,5.746]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user",[1200,4.921]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user",[25,2.464,43,1.694,45,3.406,57,3.539,69,2.722,76,4.806,81,3.432,114,2.124,141,1.89,153,1.728,170,3.356,171,1.79,178,3.595,185,1.931,190,2.801,207,1.068,223,1.412,286,4.569,303,2.009,310,2.316,347,4.353,385,1.942,392,4.499,420,2.032,452,3.595,543,1.94,743,1.176,746,1.161,772,1.97,823,4.876,1039,4.44,1058,2.673,1200,4.717,1265,3.347,1301,5.387,1317,5.704]],["title/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run",[679,3.632]],["text/reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run",[4,1.943,11,4.286,12,2.399,14,1.917,17,2.215,25,2.89,43,1.722,54,2.449,67,1.992,68,1.267,69,0.846,71,1.496,74,3.727,80,2.394,86,2.109,87,4.78,92,2.344,96,3.579,97,1.894,98,2.555,100,1.86,101,2.877,106,7.056,127,3.122,134,3.582,142,2.344,153,1.002,158,2.676,171,0.625,185,1.12,190,3.102,207,0.62,211,2.097,214,2.976,217,2.248,223,0.819,248,2.344,255,3.266,260,3.316,274,4.13,275,1.736,289,3.051,298,1.207,303,2.263,310,1.343,323,7.538,363,4.589,404,4.048,414,5.425,426,2.651,452,3.373,471,2.109,488,3.266,521,2.394,529,1.719,538,2.575,543,0.827,679,4.446,737,2.298,742,2.394,743,0.682,746,0.673,759,2.056,772,2.033,813,3.346,855,4.166,1058,2.212,1099,2.575,1246,2.956,1256,4.884,1265,1.941,1266,7.436,1273,2.956,1274,2.956,1287,3.107,1318,5.2,1319,3.308,1320,5.2,1321,5.2,1322,3.685,1323,5.2,1324,5.2,1325,3.308,1326,3.308,1327,3.308,1328,3.308]],["title/reference/hivenclient.html#openhivenpy.client.userclient.UserClient",[742,4.306]],["text/reference/hivenclient.html#openhivenpy.client.userclient.UserClient",[12,2.971,50,5.506,68,3.455,69,2.306,73,5.432,127,2.76]],["title/reference/hivenclient.html#openhivenpy.client.userclient.UserClient-methods",[298,2.17]],["text/reference/hivenclient.html#openhivenpy.client.userclient.UserClient-methods",[]],["title/reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user",[1330,5.588]],["text/reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user",[4,1.778,12,2.253,43,1.741,69,2.86,96,3.361,127,2.093,149,3.565,153,1.442,171,1.824,185,1.611,190,2.541,207,0.891,211,3.229,214,3.168,217,2.957,223,1.178,242,2.395,301,3.023,303,1.676,330,2.187,347,4.259,368,2.24,385,1.62,419,2.24,420,1.717,491,3.705,534,3.363,543,1.709,561,5.562,743,0.981,746,0.968,759,3.666,772,1.526,813,2.187,1024,2.403,1025,2.403,1026,3.453,1027,2.403,1043,4.953,1044,2.828,1058,2.355,1073,2.12,1083,3.916,1141,3.813,1296,3.783,1330,4.469,1331,3.936,1332,4.469]],["title/reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request",[1333,5.588]],["text/reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request",[4,1.666,25,2.07,43,1.735,69,2.821,81,2.883,87,3.423,96,3.205,127,1.996,149,3.435,153,1.35,171,1.888,185,1.509,190,2.448,207,0.835,211,3.111,214,3.021,217,2.82,223,1.104,242,2.284,301,4.171,303,1.57,330,2.048,347,4.15,368,2.099,385,1.518,419,2.099,420,1.654,518,2.721,534,3.241,543,1.63,555,5.85,743,0.919,746,0.907,759,3.731,772,1.456,813,2.048,815,4.447,1024,2.251,1025,2.251,1026,3.294,1027,2.251,1043,5.34,1044,2.65,1058,2.246,1073,1.986,1083,3.735,1141,6.18,1234,6.613,1296,3.608,1331,3.687,1333,4.187,1334,6.523,1335,4.458,1336,3.984]],["title/reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests",[1337,5.588]],["text/reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests",[4,1.61,12,2.096,43,1.747,91,6.447,96,3.126,114,2.305,141,1.647,149,3.369,171,1.578,190,1.368,207,0.807,211,3.05,214,2.947,217,2.751,275,2.262,281,3.339,299,1.761,301,4.121,330,1.98,368,2.029,452,3.503,527,4.34,534,1.811,543,1.59,554,7.137,555,6.756,743,0.888,746,0.877,759,3.302,772,1.864,813,1.98,815,5.156,850,4.509,1014,2.388,1024,2.176,1025,2.176,1026,3.213,1027,2.176,1035,3.183,1073,2.834,1074,2.837,1296,3.519,1300,2.595,1331,3.564,1336,3.851,1337,4.047,1338,6.333,1339,7.564,1340,4.825,1341,7.564]],["title/reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request",[1342,5.588]],["text/reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request",[4,1.72,43,1.741,69,2.848,96,3.281,127,2.043,149,3.499,153,1.395,171,1.803,185,1.559,190,2.493,207,0.862,211,3.169,214,3.093,217,2.887,223,1.14,242,2.338,299,1.882,301,4.218,303,1.621,330,2.115,347,4.384,368,2.167,385,1.567,398,2.262,419,2.167,420,1.685,468,2.982,519,5.173,534,3.301,543,1.668,555,5.958,743,0.949,746,0.937,759,3.618,772,1.49,813,2.115,1024,2.325,1025,2.325,1026,3.372,1027,2.325,1043,4.877,1044,2.736,1058,2.299,1073,2.05,1083,3.823,1141,3.688,1296,3.694,1331,3.807,1336,4.114,1342,4.324]],["title/reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user",[1343,5.588]],["text/reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user",[4,1.7,14,2.637,43,1.739,67,2.74,68,1.743,69,2.867,71,2.058,86,2.901,96,3.253,127,2.388,142,3.224,149,3.476,153,1.378,171,1.796,185,1.54,190,2.477,207,0.852,211,3.147,214,3.066,217,2.862,223,1.126,242,2.318,298,1.66,301,2.926,303,1.602,330,2.09,347,4.184,368,2.142,385,1.549,419,2.142,420,1.674,488,2.858,518,2.777,534,3.279,543,1.654,561,4.599,737,3.161,743,0.938,746,0.926,758,3.45,759,3.601,772,1.478,813,2.09,1024,2.297,1025,2.297,1026,3.343,1027,2.297,1043,4.85,1044,2.704,1058,2.279,1073,2.026,1083,3.791,1141,3.645,1296,3.662,1331,3.763,1332,4.273,1343,4.273,1344,7.805]],["title/reference/hivenclient.html#openhivenpy.client.botclient.BotClient",[758,4.512]],["text/reference/hivenclient.html#openhivenpy.client.botclient.BotClient",[12,2.971,50,5.506,68,3.455,72,6.528,127,2.76,131,4.08]],["title/reference/http.html",[100,1.264,149,1.944]],["text/reference/http.html",[4,1.889,5,0.964,11,0.608,12,0.936,15,0.367,16,1.376,25,0.461,26,2.873,43,1.739,45,1.717,49,2.189,56,2.885,67,0.874,71,0.657,74,0.83,80,0.289,81,0.341,87,1.361,88,0.151,90,0.705,92,0.145,95,0.526,96,0.196,98,2.264,100,1.133,101,1.572,103,0.33,105,0.471,106,0.508,114,1.459,116,3.116,127,1.743,132,0.33,133,3.217,134,1.746,136,0.319,141,1.613,148,1.003,149,3.523,150,1.003,151,0.739,152,1.003,153,1.689,154,5.532,155,1.877,158,3.6,167,1.009,171,1.411,177,0.254,183,0.874,185,2.83,186,0.536,190,2.678,203,0.508,207,0.92,209,2.534,211,1.921,214,1.201,217,2.123,223,0.704,229,4.182,235,2.24,242,1.613,255,0.485,260,2.495,268,1.562,274,2.484,275,0.589,280,0.258,281,2.725,285,0.485,286,0.482,289,2.296,290,0.356,294,0.739,298,1.989,299,3.48,300,4.108,301,4.035,303,2.75,305,0.31,310,2.568,329,0.69,330,1.414,348,0.218,363,1.191,368,0.684,372,0.199,376,0.254,377,0.277,380,1.428,382,2.146,384,0.198,385,1.568,391,0.962,398,4.004,399,2.459,403,2.738,405,0.356,406,1.877,411,0.33,414,0.635,415,0.31,416,0.289,417,0.99,418,0.199,419,0.188,421,0.318,426,2.504,434,1.224,442,0.928,444,0.319,445,2.659,452,0.185,454,2.62,461,0.367,465,0.228,468,1.51,470,0.727,471,0.254,481,2.773,482,0.639,483,0.639,490,2.534,491,1.372,495,0.277,497,0.928,498,0.277,514,1.372,518,1.076,521,0.289,534,2.238,543,1.451,560,1.163,581,0.31,585,1.101,683,1.075,685,2.815,700,1.458,719,0.662,743,0.767,746,0.757,754,0.258,755,0.78,759,2.538,771,0.327,772,1.875,789,2.534,802,0.277,813,0.667,822,0.193,844,0.899,853,2.737,855,0.619,867,1.201,910,2.896,936,0.601,972,0.247,1014,1.639,1024,0.567,1025,0.567,1026,1.038,1027,0.567,1034,0.928,1035,3.256,1043,1.742,1044,0.863,1047,0.277,1049,0.319,1058,1.961,1073,1.656,1074,0.508,1076,1.245,1089,0.39,1090,0.228,1091,0.492,1099,0.31,1104,0.231,1131,0.831,1143,2.718,1148,0.31,1218,0.295,1229,2.351,1232,6.036,1234,0.342,1246,0.356,1254,0.356,1257,1.726,1296,2.164,1300,2.356,1322,3.15,1338,0.586,1346,0.436,1347,1.364,1348,2.535,1349,0.725,1350,0.399,1351,1.511,1352,0.725,1353,0.399,1354,0.399,1355,0.399,1356,0.772,1357,2.842,1358,0.399,1359,0.772,1360,2.055,1361,0.772,1362,0.772,1363,0.772,1364,0.772,1365,0.772,1366,0.399,1367,0.772,1368,0.399,1369,5.135,1370,3.046,1371,3.046,1372,3.046,1373,3.046,1374,3.046,1375,3.242,1376,3.37,1377,2.334,1378,3.725,1379,3.19,1380,4.608,1381,1.003,1382,0.772,1383,0.772,1384,0.725,1385,1.123,1386,1.123,1387,1.123,1388,1.123,1389,1.298,1390,0.399,1391,0.772,1392,0.772,1393,0.399,1394,0.399,1395,1.762,1396,4.445,1397,0.399,1398,0.356,1399,0.342,1400,0.399,1401,0.772,1402,0.31,1403,1.762,1404,1.123,1405,0.772,1406,1.123,1407,0.399,1408,0.399,1409,0.772,1410,0.399,1411,0.399,1412,0.399,1413,0.399,1414,0.399,1415,0.399,1416,0.772,1417,1.452,1418,0.772,1419,0.772,1420,0.772,1421,0.772,1422,0.399,1423,0.772,1424,0.399]],["title/reference/http.html#http-client",[100,1.264,149,1.944]],["text/reference/http.html#http-client",[]],["title/reference/http.html#openhivenpy.gateway.http.HTTP",[149,2.65]],["text/reference/http.html#openhivenpy.gateway.http.HTTP",[5,4.935,12,2.971,100,2.612,149,4.017,301,3.987,470,5.842]],["title/reference/http.html#openhivenpy.gateway.http.HTTP-attributes",[348,3.255]],["text/reference/http.html#openhivenpy.gateway.http.HTTP-attributes",[]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.loop",[106,3.917]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.loop",[92,3.329,106,6.008,141,1.687,363,5.289]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.ready",[167,4.133]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.ready",[141,1.677,149,4.041,167,6.303,853,7.063,972,5.617]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.session",[853,4.632]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.session",[141,1.687,286,3.917,685,6.008,1347,8.571]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.token",[414,3.367]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.token",[100,2.627,127,2.777,141,1.677,414,5.134,416,6.566]],["title/reference/http.html#openhivenpy.gateway.http.HTTP-methods",[298,2.17]],["text/reference/http.html#openhivenpy.gateway.http.HTTP-methods",[]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.__init__",[771,2.517]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.__init__",[5,4.742,12,2.219,16,6.417,43,1.728,56,2.193,71,3.92,98,4.258,100,2.775,101,2.577,127,2.652,134,1.985,153,1.411,171,0.88,185,3.345,190,2.137,203,4.434,207,0.873,223,1.153,229,4.328,274,2.289,275,2.445,300,2.091,301,2.059,303,2.786,384,2.31,385,2.693,414,2.636,470,4.363,481,7.417,482,5.57,483,5.57,521,3.372,543,1.164,585,6.572,683,6.415,743,0.96,746,0.948,771,1.971,772,2.391,1058,2.984,1229,7.925,1322,3.302,1348,3.176,1349,4.375,1350,4.659,1351,3.994,1352,4.375,1353,4.659,1354,4.659]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.__repr__",[1089,3.004]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.__repr__",[43,1.75,56,3.162,141,1.242,149,2.991,167,6.01,207,1.258,300,3.882,382,4.177,421,3.56,461,4.106,481,6.13,743,1.385,746,1.367,772,2.334,1058,2.312,1089,3.391,1090,3.846,1229,7.154,1348,4.579]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.__str__",[1091,3.794]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.__str__",[43,1.671,141,1.576,207,1.597,743,1.757,746,1.734,772,2.236,1058,2.935,1091,5.436,1104,4.94,1348,5.812]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.close",[268,3.985]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.close",[4,2.3,12,2.692,43,1.717,100,1.783,101,5.074,132,5.092,141,1.696,149,4.529,158,4.721,171,1.163,207,1.153,211,3.296,214,3.785,268,6.811,274,4.015,275,4.289,281,4.289,330,3.755,368,2.898,426,4.165,534,2.587,543,1.538,743,1.269,746,1.253,759,2.434,772,2.047,813,2.829,853,7.607,1024,3.109,1025,3.109,1026,4.127,1027,3.109,1073,2.742,1099,4.793,1348,4.197,1351,5.278]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.connect",[274,2.924]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.connect",[4,1.534,12,2.021,43,1.75,100,1.188,101,2.27,114,0.92,134,3.719,141,1.359,149,3.887,158,2.112,171,0.775,207,0.769,211,2.475,214,2.842,268,2.749,274,3.611,299,1.678,310,1.666,330,2.819,368,1.932,382,1.982,411,3.394,534,2.578,543,1.026,581,3.195,685,4.838,743,0.846,746,0.835,759,1.623,772,2.178,813,1.886,822,1.982,853,6.795,855,4.916,867,2.798,1014,1.296,1024,2.072,1025,2.072,1026,3.098,1027,2.072,1035,4.582,1049,3.288,1073,3.273,1232,2.851,1338,4.653,1347,5.762,1348,2.798,1351,5.26,1352,3.855,1355,4.105,1356,6.136,1357,9.978,1358,4.105,1359,6.136,1360,9.159,1361,6.136,1362,6.136,1363,6.136,1364,6.136,1365,6.136,1366,4.105,1367,6.136,1368,4.105]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.delete",[518,3.632]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.delete",[4,1.333,26,3.05,43,1.706,45,2.419,49,3.085,56,3.571,98,2.71,114,1.236,116,3.379,127,1.688,133,3.981,141,1.672,149,3.379,153,2.042,154,5.936,155,2.581,158,3.904,171,1.55,185,3.061,190,2.752,207,0.668,209,3.572,211,1.438,217,2.384,223,0.883,229,4.745,235,3.157,242,1.931,260,3.516,274,2.71,281,2.894,289,3.236,298,1.301,299,3.696,300,4.058,301,4.129,303,3.054,310,2.737,382,2.663,385,1.214,398,4.261,399,3.05,403,3.277,426,2.811,445,2.985,454,3.693,490,3.572,518,4.631,543,1.684,685,2.348,743,0.735,746,0.726,759,2.18,772,1.231,789,3.572,910,4.082,1014,1.741,1035,3.795,1043,2.018,1058,1.899,1073,1.588,1143,3.831,1232,6.66,1257,2.64,1296,3.05,1300,3.321,1322,3.908,1348,2.432,1369,5.905,1370,4.293,1371,4.293,1372,4.293,1373,4.293,1374,4.293,1375,4.182,1376,4.182,1377,2.705,1378,5.112,1379,4.293,1380,5.905]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.get",[]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.get",[4,1.339,26,3.061,43,1.706,45,2.428,49,3.096,56,3.58,98,2.719,114,1.241,116,3.387,127,1.694,133,3.991,141,1.674,149,3.387,153,2.048,154,5.949,155,2.593,158,3.913,171,1.553,185,3.066,190,2.757,207,0.671,209,3.584,211,1.445,217,2.392,223,0.887,229,4.753,235,3.169,242,1.938,260,3.529,274,2.719,281,2.904,289,3.247,298,1.307,299,3.702,300,4.064,301,4.334,303,3.06,310,2.745,382,2.672,385,1.22,398,4.269,399,3.061,403,3.289,426,2.821,445,2.995,454,3.706,490,3.584,543,1.689,685,2.359,743,0.739,746,0.729,759,2.188,772,1.235,789,3.584,910,4.096,1014,1.747,1035,3.805,1043,2.028,1058,1.905,1073,1.596,1143,3.845,1232,6.669,1257,2.652,1296,3.061,1300,3.333,1322,3.922,1348,2.443,1369,5.92,1370,4.308,1371,4.308,1372,4.308,1373,4.308,1374,4.308,1375,4.197,1376,4.197,1377,2.717,1378,5.127,1379,4.308,1380,5.92]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.http_request",[1381,5.317]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.http_request",[4,1.173,11,2.257,12,1.034,15,1.49,26,3.912,43,1.745,74,0.848,80,1.304,81,1.387,87,1.647,88,0.682,90,2.619,95,2.14,96,0.885,100,0.909,101,2.759,103,1.49,105,1.916,114,2.004,116,2.222,127,0.96,133,1.647,134,1.777,141,1.593,148,3.726,149,3.303,150,3.726,151,2.745,152,3.726,153,1.263,154,5.119,158,0.927,171,0.788,177,1.149,183,3.246,185,1.915,186,2.18,190,1.97,207,1.325,211,2.012,214,1.454,217,2.684,223,0.446,229,2.281,242,1.747,255,1.971,280,1.167,281,3.712,286,0.773,290,1.61,294,2.745,298,2.435,299,3.032,300,3.582,301,4.124,303,2.351,305,1.403,330,2.598,363,1.044,368,0.848,376,1.149,377,1.252,380,3.929,385,1.925,391,3.574,398,3.05,403,1.865,405,1.61,406,2.271,415,1.403,417,1.228,418,0.902,419,0.848,426,2.125,444,1.444,452,0.835,465,1.032,471,1.149,495,1.252,498,1.252,514,4.402,534,3.756,543,1.042,560,3.996,685,3.284,700,4.677,743,0.371,746,0.367,754,1.167,759,3.474,772,1.262,802,1.252,813,0.828,853,1.403,867,2.842,1014,1.575,1043,2.359,1044,2.965,1047,1.252,1058,1.717,1073,1.398,1074,1.186,1131,2.323,1148,1.403,1218,1.334,1232,2.896,1322,2.224,1348,1.228,1349,1.692,1351,1.545,1375,2.38,1376,3.162,1377,2.38,1378,1.366,1381,1.61,1382,3.139,1383,3.139,1384,1.692,1385,4.169,1386,4.169,1387,4.169,1388,4.169,1389,4.458,1390,1.802,1391,3.139,1392,3.139,1393,1.802,1394,1.802,1395,5.655,1396,9.083,1397,1.802,1398,1.61,1399,1.545,1400,1.802,1401,3.139,1402,1.403,1403,5.655,1404,4.169,1405,3.139,1406,4.169,1407,1.802,1408,1.802,1409,3.139,1410,1.802,1411,1.802,1412,1.802,1413,1.802,1414,1.802,1415,1.802,1416,3.139,1417,4.989,1418,3.139,1419,3.139]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.options",[310,2.416]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.options",[4,1.297,26,2.987,43,1.703,45,2.369,49,3.02,56,3.52,98,2.653,114,1.21,116,3.33,127,1.652,133,3.924,141,1.655,149,3.33,153,2.007,154,5.862,155,2.512,158,3.847,171,1.53,185,3.031,190,2.721,207,0.65,209,3.497,211,1.4,217,2.334,223,0.859,229,5.065,235,3.092,242,1.891,260,3.443,274,2.653,281,2.834,289,3.168,298,1.266,299,3.659,300,4.018,301,4.296,303,3.02,310,3.634,382,2.607,385,1.182,398,4.214,399,2.987,403,4.443,406,3.908,426,2.752,445,2.923,454,3.616,490,3.497,543,1.656,685,2.285,743,0.716,746,0.706,759,2.135,772,1.205,789,3.497,910,3.997,936,4.203,1014,1.704,1035,3.74,1043,1.964,1058,1.859,1073,1.546,1143,3.751,1232,6.605,1257,2.569,1296,2.987,1300,3.251,1322,3.826,1348,2.366,1369,5.82,1370,4.203,1371,4.203,1372,4.203,1373,4.203,1374,4.203,1375,4.094,1376,4.094,1377,2.632,1378,5.025,1379,4.203,1380,5.82,1420,5.4]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.patch",[434,4.133]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.patch",[4,1.215,25,1.032,26,2.838,43,1.713,45,2.251,49,2.871,56,3.397,74,1.531,87,2.693,98,2.521,114,1.425,116,3.214,127,1.945,133,3.787,134,2.187,141,1.615,149,3.214,153,1.925,154,5.684,155,2.354,158,3.713,171,1.651,185,3.065,190,2.772,207,0.609,209,3.324,211,1.312,217,2.218,223,0.805,229,4.566,235,2.938,242,1.797,260,3.272,274,2.521,281,2.693,289,3.011,298,1.186,299,3.701,300,4.505,301,4.002,303,2.939,310,2.58,382,2.478,385,1.747,398,4.101,399,3.515,403,3.05,417,2.217,426,2.616,434,5.013,442,2.69,445,3.906,454,3.436,490,3.324,497,2.69,543,1.588,685,2.141,743,0.671,746,0.662,759,2.029,772,1.418,789,3.324,844,2.606,910,3.798,1014,2.006,1034,2.69,1035,3.61,1043,1.841,1058,1.767,1073,1.449,1143,3.565,1232,6.473,1257,2.408,1296,2.838,1300,3.09,1322,3.636,1348,2.217,1369,5.617,1370,3.995,1371,3.995,1372,3.995,1373,3.995,1374,3.995,1375,3.891,1376,3.891,1377,2.466,1378,4.819,1379,3.995,1380,5.617]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.post",[468,3.854]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.post",[4,1.215,25,1.032,26,2.838,43,1.713,45,2.251,49,2.871,56,3.397,74,1.531,87,2.693,98,2.521,114,1.425,116,3.214,127,1.945,133,3.787,134,2.187,141,1.615,149,3.214,153,1.925,154,5.684,155,2.354,158,3.713,171,1.651,185,3.065,190,2.772,207,0.609,209,3.324,211,1.312,217,2.218,223,0.805,229,4.566,235,2.938,242,1.797,260,3.272,274,2.521,281,2.693,289,3.011,298,1.186,299,3.701,300,4.505,301,4.002,303,2.939,310,2.58,382,2.478,385,1.747,398,4.101,399,3.515,403,3.05,417,2.217,426,2.616,442,2.69,445,3.906,454,3.436,468,4.674,490,3.324,497,2.69,543,1.588,685,2.141,743,0.671,746,0.662,759,2.029,772,1.418,789,3.324,844,2.606,910,3.798,1014,2.006,1034,2.69,1035,3.61,1043,1.841,1058,1.767,1073,1.449,1143,3.565,1232,6.473,1257,2.408,1296,2.838,1300,3.09,1322,3.636,1348,2.217,1369,5.617,1370,3.995,1371,3.995,1372,3.995,1373,3.995,1374,3.995,1375,3.891,1376,3.891,1377,2.466,1378,4.819,1379,3.995,1380,5.617]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.put",[491,4.632]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.put",[4,1.173,25,1.584,26,2.761,43,1.711,45,2.19,49,2.792,56,3.331,74,2.35,87,2.619,98,2.452,114,1.392,116,3.151,127,1.901,133,3.713,134,2.127,141,1.593,149,3.151,153,1.881,154,5.588,155,2.273,158,3.641,171,1.628,185,3.028,190,2.735,207,0.588,209,3.233,211,1.267,217,2.158,223,0.778,229,4.497,235,2.858,242,1.748,260,3.183,274,2.452,281,2.619,285,3.135,289,2.929,298,1.146,299,3.655,300,4.525,301,4.26,303,2.895,310,2.522,329,4.46,382,2.41,385,1.699,398,4.039,399,3.436,403,2.966,406,3.612,417,2.141,426,2.544,442,2.597,445,3.83,454,3.342,468,3.233,490,3.233,491,5.508,497,2.597,543,1.552,685,2.068,719,4.279,743,0.647,746,0.639,759,1.974,772,1.386,789,3.233,844,2.516,910,3.694,1014,1.961,1034,2.597,1035,3.54,1043,1.777,1058,1.718,1073,1.399,1143,3.467,1232,6.401,1257,2.325,1296,2.761,1300,3.006,1322,3.537,1348,2.141,1369,5.508,1370,3.885,1371,3.885,1372,3.885,1373,3.885,1374,3.885,1375,3.785,1376,3.785,1377,2.382,1378,4.71,1379,3.885,1380,5.508]],["title/reference/http.html#openhivenpy.gateway.http.HTTP.raw_request",[155,4.306]],["text/reference/http.html#openhivenpy.gateway.http.HTTP.raw_request",[4,1.058,26,2.54,43,1.733,45,2.015,49,2.569,56,3.138,98,2.256,114,1.029,116,2.968,127,2.04,133,3.498,136,2.268,141,1.528,149,3.834,153,1.755,154,4.824,155,2.049,158,3.43,171,1.384,185,2.914,190,2.49,207,0.53,209,2.974,211,2.955,214,2.127,217,1.985,223,0.701,229,4.293,235,2.629,242,1.608,260,2.928,274,2.256,286,1.215,289,2.695,298,3.14,299,3.207,300,3.709,301,4.285,303,2.911,310,2.706,330,1.301,363,3.358,368,1.333,372,1.416,380,1.967,382,2.217,385,0.964,398,4.492,399,2.54,403,2.729,406,3.324,426,2.341,445,2.486,454,3.075,481,2.006,490,2.974,534,2.8,543,1.448,685,1.864,743,0.584,746,0.576,759,2.635,772,1.293,789,2.974,813,1.301,867,1.93,910,3.399,1014,1.45,1024,1.43,1025,1.43,1026,2.319,1027,1.43,1035,3.335,1043,1.602,1058,1.995,1073,1.261,1074,1.864,1131,2.096,1143,3.19,1232,6.18,1234,2.427,1254,2.53,1257,2.096,1296,2.54,1300,2.765,1322,3.254,1348,1.93,1369,5.189,1370,3.575,1371,3.575,1372,3.575,1373,3.575,1374,3.575,1375,3.482,1376,3.482,1377,3.482,1378,2.147,1379,4.51,1380,5.189,1381,2.53,1384,2.659,1421,4.592,1422,2.831,1423,4.592,1424,2.831]],["title/reference/types.html",[12,1.438,171,0.825]],["text/reference/types.html",[4,1.221,5,0.067,12,1.221,13,0.081,14,0.342,15,0.766,18,0.823,25,0.654,26,0.135,43,1.752,45,0.308,48,0.462,49,0.202,50,0.148,56,1.376,57,0.978,66,0.074,67,4.306,68,1.731,69,1.698,70,0.096,71,1.416,72,0.176,73,0.146,74,1.599,76,0.076,77,0.31,78,0.082,79,0.096,81,1.227,87,0.537,88,2.275,91,0.176,95,0.246,96,1.328,97,0.526,98,0.12,100,1.582,101,0.068,102,0.221,105,0.495,107,0.11,109,0.276,113,0.138,114,2.385,116,0.547,120,0.798,123,0.064,125,0.172,127,1.717,130,1.001,131,0.644,133,0.19,134,1.988,137,0.314,141,1.4,147,1.077,149,1.57,151,0.238,153,0.989,158,0.125,163,0.098,166,2.917,170,1.248,171,1.447,174,0.091,177,0.304,178,1.286,179,0.093,185,1.106,190,2.031,194,0.833,199,3.012,202,0.212,203,0.238,207,1.109,211,1.495,212,0.073,213,0.895,214,1.353,217,1.102,223,1.564,229,0.779,235,0.139,241,1.939,242,2.419,243,1.912,248,0.172,259,1.75,261,0.382,262,0.568,263,0.707,264,0.418,265,1.174,266,0.345,267,0.345,275,0.537,281,0.696,282,0.663,285,0.153,286,2.648,289,0.476,297,0.267,298,0.656,299,0.621,300,0.459,301,0.358,303,1.306,304,0.146,305,0.096,308,1.068,309,0.526,310,3.016,313,1.871,330,0.698,332,0.087,336,0.172,337,2.325,338,1.449,340,0.353,342,2.302,347,1.135,348,0.984,349,0.221,350,1.746,351,0.102,354,2.071,361,0.084,363,0.209,368,1.088,371,0.096,376,0.078,382,1.231,383,0.074,384,2.426,385,1.753,390,0.955,392,0.407,395,0.096,398,0.503,399,0.264,401,0.11,412,0.325,413,1.1,418,1.794,420,1.698,421,1.049,423,0.676,426,0.574,427,0.238,428,0.502,429,0.23,430,0.261,431,0.166,432,0.184,434,0.251,440,0.11,445,1.503,452,1.603,455,1.426,456,0.822,457,0.371,458,1.185,459,0.508,461,1.21,465,1.029,467,1.209,468,0.454,471,0.078,478,0.096,479,0.093,486,0.234,495,0.563,498,0.251,508,0.209,509,0.227,518,1.361,519,1.3,521,0.345,527,0.307,529,0.477,534,1.257,536,0.394,541,1.125,543,1.503,544,0.955,545,1.839,546,0.94,548,0.616,549,1.845,551,0.608,552,0.447,553,0.47,554,0.195,555,0.532,556,0.169,557,0.184,558,0.195,559,0.195,560,0.195,561,0.41,562,0.102,563,1.042,565,0.18,579,0.371,595,0.274,601,0.575,607,0.201,608,0.189,619,0.201,620,0.289,635,0.295,650,2.184,701,1.186,711,1.264,715,0.195,717,0.11,723,0.093,724,1.994,733,0.102,737,0.169,740,0.345,743,1.157,744,0.195,746,1.142,754,0.795,755,2.269,759,2.16,761,0.31,762,0.299,771,1.892,772,2.205,774,1.105,780,0.11,781,0.955,792,0.082,793,0.362,813,0.698,839,0.299,866,0.362,900,0.11,924,0.11,928,0.11,936,0.46,944,1.499,972,0.365,1002,0.11,1010,1.767,1014,2.143,1015,0.11,1020,1.582,1023,0.6,1024,0.768,1025,0.768,1026,1.364,1027,0.768,1028,1.168,1032,0.209,1035,1.634,1039,0.096,1043,1.694,1044,1.275,1047,0.085,1048,0.873,1057,0.604,1058,2.241,1063,0.877,1073,0.993,1074,0.238,1076,6.038,1083,1.029,1084,1.796,1089,1.287,1090,1.029,1091,0.585,1104,1.094,1125,0.209,1135,0.195,1143,0.169,1148,0.281,1164,0.085,1172,0.281,1187,0.427,1204,0.261,1216,0.862,1218,0.6,1228,0.11,1237,0.11,1238,0.11,1239,0.11,1240,0.11,1241,0.201,1245,0.102,1247,0.11,1260,1.397,1267,0.209,1295,0.888,1296,1.41,1297,0.209,1298,0.371,1299,0.759,1300,0.218,1301,0.869,1302,0.102,1303,0.102,1304,0.102,1305,0.102,1306,0.102,1307,0.371,1338,0.696,1340,0.532,1389,0.11,1398,0.11,1399,0.409,1402,0.46,1425,0.123,1426,0.123,1427,0.123,1428,0.123,1429,0.123,1430,0.123,1431,1.056,1432,0.488,1433,0.228,1434,0.488,1435,0.217,1436,0.58,1437,0.217,1438,0.134,1439,0.228,1440,1.222,1441,0.123,1442,0.123,1443,0.123,1444,0.243,1445,1.997,1446,1.209,1447,1.146,1448,0.134,1449,0.228,1450,0.228,1451,0.409,1452,0.409,1453,0.409,1454,0.409,1455,0.631,1456,0.757,1457,0.409,1458,1.209,1459,1.209,1460,0.134,1461,0.323,1462,0.323,1463,0.228,1464,0.228,1465,0.757,1466,0.123,1467,0.123,1468,0.409,1469,0.134,1470,0.228,1471,0.123,1472,0.409,1473,0.228,1474,0.123,1475,0.562,1476,1.018,1477,0.134,1478,0.323,1479,0.134,1480,1.222,1481,0.339,1482,0.123,1483,0.554,1484,0.123,1485,0.243,1486,0.123,1487,0.123,1488,0.123,1489,0.228,1490,0.228,1491,0.228,1492,0.243,1493,0.228,1494,1.097,1495,0.243,1496,0.123,1497,0.228,1498,0.59,1499,0.228,1500,0.243,1501,0.243,1502,0.243,1503,0.228,1504,0.228,1505,0.123,1506,0.554,1507,0.123,1508,0.134,1509,0.123,1510,0.228,1511,0.123,1512,0.59,1513,0.123,1514,0.134,1515,0.601,1516,0.426,1517,0.601,1518,0.323,1519,0.123,1520,0.123,1521,0.123,1522,0.123,1523,0.123,1524,0.123,1525,0.134,1526,0.228,1527,0.339,1528,0.409,1529,0.409,1530,0.123,1531,0.554,1532,0.134,1533,0.228,1534,0.228,1535,0.134,1536,0.815,1537,0.123,1538,0.134,1539,0.123,1540,0.123,1541,0.123,1542,0.123,1543,0.123,1544,0.123,1545,0.123,1546,0.228,1547,0.123,1548,0.123,1549,0.123,1550,0.123,1551,0.123,1552,0.228,1553,1.183,1554,1.227,1555,1.126,1556,0.228,1557,0.59,1558,0.123,1559,0.134,1560,0.228,1561,0.922,1562,0.323,1563,0.228,1564,0.323,1565,0.123,1566,0.123,1567,0.323,1568,0.409,1569,0.409,1570,0.134,1571,0.361,1572,0.477,1573,0.134,1574,0.409,1575,0.123,1576,0.134,1577,0.123,1578,0.123,1579,0.696,1580,0.228,1581,0.123,1582,0.361,1583,0.228,1584,0.134,1585,0.631,1586,0.123,1587,0.123,1588,0.123,1589,0.123,1590,0.123,1591,0.123,1592,0.134,1593,0.123,1594,0.123,1595,0.123,1596,0.123,1597,0.123,1598,0.123,1599,0.123,1600,0.123,1601,0.123,1602,0.134,1603,0.123,1604,0.228]],["title/reference/types.html#hiven-types",[12,1.438,171,0.825]],["text/reference/types.html#hiven-types",[14,4.032,18,3.546,43,1.025,45,3.052,49,3.892,66,4.19,67,5.859,68,2.665,69,1.779,70,5.416,81,4.301,87,5.106,95,6.032,102,4.247,107,6.217,109,4.032,127,2.708,133,3.651,163,5.574,170,2.464,171,1.314,174,5.15,178,3.222,179,5.276,199,3.688,242,2.436,297,5.15,332,4.93,337,2.436,342,2.14,383,4.19,412,6.032,471,4.436,478,5.416,479,5.276,486,4.506,518,5.939,733,5.754,792,4.659,928,6.217,1425,6.958,1426,6.958,1427,6.958,1428,6.958,1429,6.958,1430,6.958]],["title/reference/types.html#list-of-represented-types",[171,0.651,338,1.708,650,1.808]],["text/reference/types.html#list-of-represented-types",[12,3.651,48,3.405,50,3.157,69,2.793,87,2.714,88,3.619,105,3.157,114,1.626,131,2.339,171,1.371,194,4.557,213,4.557,242,1.811,248,3.665,262,3.201,263,3.248,285,3.248,289,4.918,313,4.313,336,3.665,337,3.641,338,2.564,340,3.828,342,3.133,350,3.945,354,5.141,418,4.787,428,3.201,456,4.859,458,4.557,467,4.257,518,3.157,536,6,543,1.292,551,4.312,563,2.997,635,3.201,650,5.954,740,3.743,781,5.648,793,3.922,1048,3.405,1340,3.922,1431,5.04,1432,6,1433,4.857,1434,4.277,1435,4.621,1436,6,1437,4.621]],["title/reference/types.html#openhivenpy.types.attachment.Attachment",[456,3.985]],["text/reference/types.html#openhivenpy.types.attachment.Attachment",[12,2.971,48,5.939,88,3.412,418,4.513,456,6.041,650,4.734]],["title/reference/types.html#openhivenpy.types.attachment.Attachment-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.attachment.Attachment-attributes",[]],["title/reference/types.html#openhivenpy.types.attachment.Attachment.filename",[608,4.632]],["text/reference/types.html#openhivenpy.types.attachment.Attachment.filename",[48,6.08,223,2.286]],["title/reference/types.html#openhivenpy.types.attachment.Attachment.media_url",[607,4.921]],["text/reference/types.html#openhivenpy.types.attachment.Attachment.media_url",[48,6.008,229,4.993,401,8.155,412,6.222]],["title/reference/types.html#openhivenpy.types.attachment.Attachment.raw",[754,3.854]],["text/reference/types.html#openhivenpy.types.attachment.Attachment.raw",[13,5.939,26,4.99,114,2.022,723,6.84,754,5.842,1010,4.782]],["title/reference/types.html#openhivenpy.types.attachment.Attachment-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.attachment.Attachment-methods",[]],["title/reference/types.html#openhivenpy.types.attachment.Attachment.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.attachment.Attachment.__init__",[12,2.623,43,1.729,48,5.242,71,4.351,88,3.012,100,2.786,114,2.407,127,2.437,134,3.393,153,1.794,171,1.119,185,2.005,207,1.109,223,1.466,242,2.788,303,2.804,385,2.711,418,3.984,456,6.024,543,1.48,607,4.897,608,4.61,650,4.179,743,1.221,746,1.205,754,3.835,771,3.369,772,2.24,774,3.313,1014,2.514,1084,2.699,1439,5.561,1440,3.666,1441,5.922,1442,5.922,1443,5.922]],["title/reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data",[43,1.706,68,3.026,74,3.72,114,2.516,127,2.93,134,3.367,141,1.654,153,1.773,171,1.493,185,1.982,199,5.301,207,1.097,223,1.449,241,3.624,242,2.767,243,4.823,259,4.232,286,4.11,303,2.062,385,3.045,543,1.974,724,4.823,743,1.207,746,1.191,754,5.118,944,3.783,1010,4.189,1014,3.023,1020,2.627,1035,3.953,1439,5.498,1444,7.902,1445,5.038,1446,4.149]],["title/reference/types.html#openhivenpy.types.attachment.Attachment.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.attachment.Attachment.json_validator",[]],["title/reference/types.html#openhivenpy.types.context.Context",[1431,4.133]],["text/reference/types.html#openhivenpy.types.context.Context",[340,6.638,635,5.552,650,4.707,740,6.49,781,8.033,1431,6.23]],["title/reference/types.html#openhivenpy.types.context.Context-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.context.Context-attributes",[]],["title/reference/types.html#openhivenpy.types.context.Context.author",[384,2.95]],["text/reference/types.html#openhivenpy.types.context.Context.author",[68,3.495,242,3.196,384,4.525,1431,6.34]],["title/reference/types.html#openhivenpy.types.context.Context.author_id",[265,3.536]],["text/reference/types.html#openhivenpy.types.context.Context.author_id",[384,4.578,420,1.981]],["title/reference/types.html#openhivenpy.types.context.Context.house",[342,1.83]],["text/reference/types.html#openhivenpy.types.context.Context.house",[68,3.495,242,3.196,342,2.807,1431,6.34]],["title/reference/types.html#openhivenpy.types.context.Context.house_id",[545,2.237]],["text/reference/types.html#openhivenpy.types.context.Context.house_id",[337,3.234,420,1.981]],["title/reference/types.html#openhivenpy.types.context.Context.room",[337,2.084]],["text/reference/types.html#openhivenpy.types.context.Context.room",[68,3.495,242,3.196,337,3.196,1431,6.34]],["title/reference/types.html#openhivenpy.types.context.Context.room_id",[455,2.977]],["text/reference/types.html#openhivenpy.types.context.Context.room_id",[337,3.234,420,1.981]],["title/reference/types.html#openhivenpy.types.context.Context.timestamp",[465,3.407]],["text/reference/types.html#openhivenpy.types.context.Context.timestamp",[26,5.019,88,3.432,133,4.762,781,7.063,1449,8.521]],["title/reference/types.html#openhivenpy.types.context.Context-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.context.Context-methods",[]],["title/reference/types.html#openhivenpy.types.context.Context.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.context.Context.__init__",[43,1.743,71,4.109,100,2.631,114,2.448,127,2.22,134,3.092,153,1.567,171,0.977,185,1.751,207,0.969,223,1.28,242,2.541,265,3.074,303,2.555,337,1.811,340,5.37,342,1.591,384,2.564,385,2.47,455,2.587,465,2.961,543,1.292,545,1.944,635,4.491,650,3.808,740,5.251,743,1.066,746,1.052,771,3.07,772,2.358,774,2.893,781,7.072,1014,2.29,1084,2.357,1431,5.822,1440,3.201,1450,4.857,1451,4.434,1452,4.434,1453,4.434,1454,4.434,1455,4.026,1456,3.828,1457,4.434]],["title/reference/types.html#openhivenpy.types.context.Context.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.context.Context.format_obj_data",[25,1.89,43,1.753,56,2.804,68,1.818,74,2.235,114,2.517,127,2.089,134,2.023,141,1.101,153,0.893,171,1.414,185,0.999,190,3.06,199,3.967,207,0.552,223,0.73,241,1.826,242,2.391,243,2.898,259,2.542,265,3.54,286,2.93,303,1.039,308,3.54,337,3.48,342,3.056,368,1.389,384,4.926,385,2.028,418,2.375,420,1.875,455,2.98,465,2.718,543,1.186,545,2.239,724,2.898,743,0.608,746,0.6,759,2.355,944,2.272,1010,2.516,1014,2.653,1020,1.324,1028,3.687,1035,2.375,1043,1.669,1044,3.54,1083,3.411,1218,2.183,1445,3.027,1446,4.221,1450,2.77,1458,4.221,1459,4.221]],["title/reference/types.html#openhivenpy.types.context.Context.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.context.Context.json_validator",[]],["title/reference/types.html#openhivenpy.types.embed.Embed",[458,3.737]],["text/reference/types.html#openhivenpy.types.embed.Embed",[88,3.334,242,3.087,428,5.457,452,4.083,458,6.777,650,5.362,793,6.685]],["title/reference/types.html#openhivenpy.types.embed.Embed-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.embed.Embed-attributes",[]],["title/reference/types.html#openhivenpy.types.embed.Embed.description",[543,1.487]],["text/reference/types.html#openhivenpy.types.embed.Embed.description",[87,4.818,458,5.766,543,2.294]],["title/reference/types.html#openhivenpy.types.embed.Embed.image",[1461,5.317]],["text/reference/types.html#openhivenpy.types.embed.Embed.image",[229,5.023,458,5.766,1461,8.204]],["title/reference/types.html#openhivenpy.types.embed.Embed.title",[1462,5.317]],["text/reference/types.html#openhivenpy.types.embed.Embed.title",[458,5.801,1462,8.253]],["title/reference/types.html#openhivenpy.types.embed.Embed.type",[171,1.124]],["text/reference/types.html#openhivenpy.types.embed.Embed.type",[171,1.745,458,5.801]],["title/reference/types.html#openhivenpy.types.embed.Embed.url",[229,3.255]],["text/reference/types.html#openhivenpy.types.embed.Embed.url",[229,4.964,297,6.716,395,7.063,458,6.525]],["title/reference/types.html#openhivenpy.types.embed.Embed-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.embed.Embed-methods",[]],["title/reference/types.html#openhivenpy.types.embed.Embed.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.embed.Embed.__init__",[43,1.738,71,4.233,88,2.879,100,2.71,114,2.434,127,2.329,134,3.243,153,1.678,171,1.438,185,1.876,207,1.038,223,1.372,229,3.032,242,3.277,303,2.681,385,2.591,428,4.712,458,5.461,543,1.902,650,3.994,743,1.142,746,1.127,771,3.22,772,2.317,774,3.1,793,5.772,1014,2.403,1084,2.526,1440,3.43,1461,4.952,1462,4.952,1463,5.204,1464,5.204,1465,4.101,1466,5.541,1467,5.541,1468,4.75]],["title/reference/types.html#openhivenpy.types.embed.Embed.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.embed.Embed.format_obj_data",[43,1.651,68,3.18,74,3.909,114,2.493,127,3.019,134,3.538,141,1.716,153,1.91,171,1.569,185,2.135,199,5.434,207,1.181,223,1.561,241,3.904,242,2.908,243,5.069,259,4.448,286,4.234,303,2.221,385,3.16,543,2.075,724,5.069,743,1.3,746,1.283,944,3.975,1010,4.402,1014,3.114,1020,2.83,1035,4.154,1445,5.295,1463,5.923]],["title/reference/types.html#openhivenpy.types.embed.Embed.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.embed.Embed.json_validator",[]],["title/reference/types.html#openhivenpy.types.entity.Entity",[313,2.824]],["text/reference/types.html#openhivenpy.types.entity.Entity",[12,2.954,213,5.633,313,4.257,337,3.14,342,2.759,418,4.487,650,4.707]],["title/reference/types.html#openhivenpy.types.entity.Entity-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.entity.Entity-attributes",[]],["title/reference/types.html#openhivenpy.types.entity.Entity.house",[342,1.83]],["text/reference/types.html#openhivenpy.types.entity.Entity.house",[242,3.215,313,4.358,342,2.824]],["title/reference/types.html#openhivenpy.types.entity.Entity.house_id",[545,2.237]],["text/reference/types.html#openhivenpy.types.entity.Entity.house_id",[313,4.332,342,2.807,390,5.732,420,1.957]],["title/reference/types.html#openhivenpy.types.entity.Entity.id",[420,1.276]],["text/reference/types.html#openhivenpy.types.entity.Entity.id",[313,4.384,420,1.981]],["title/reference/types.html#openhivenpy.types.entity.Entity.name",[223,1.473]],["text/reference/types.html#openhivenpy.types.entity.Entity.name",[223,2.286,313,4.384]],["title/reference/types.html#openhivenpy.types.entity.Entity.position",[548,3.255]],["text/reference/types.html#openhivenpy.types.entity.Entity.position",[337,3.215,548,5.023,1470,8.621]],["title/reference/types.html#openhivenpy.types.entity.Entity.resource_pointers",[565,4.404]],["text/reference/types.html#openhivenpy.types.entity.Entity.resource_pointers",[141,1.63,171,1.666,213,5.537,242,3.087,297,6.525,313,4.185,361,6.01,418,4.41,1014,2.783,1471,8.816]],["title/reference/types.html#openhivenpy.types.entity.Entity.type",[171,1.124]],["text/reference/types.html#openhivenpy.types.entity.Entity.type",[171,1.745,313,4.384]],["title/reference/types.html#openhivenpy.types.entity.Entity-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.entity.Entity-methods",[]],["title/reference/types.html#openhivenpy.types.entity.Entity.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.entity.Entity.__init__",[12,2.39,43,1.743,71,4.109,100,2.631,114,2.448,127,2.22,134,3.092,153,1.567,171,1.371,185,1.751,207,0.969,213,4.557,223,1.796,242,2.541,303,2.555,313,3.978,337,2.541,342,2.578,385,2.47,418,3.63,420,1.109,543,1.292,545,1.944,548,2.829,565,3.828,650,3.808,743,1.066,746,1.052,771,3.07,772,2.358,774,2.893,1014,2.29,1057,3.405,1084,2.357,1440,3.201,1455,4.026,1456,3.828,1465,3.828,1472,4.434,1473,4.857,1474,5.172,1475,4.143]],["title/reference/types.html#openhivenpy.types.entity.Entity.__repr__",[1089,3.004]],["text/reference/types.html#openhivenpy.types.entity.Entity.__repr__",[43,1.75,56,3.162,141,1.242,171,1.634,207,1.258,223,2.142,313,3.188,382,4.177,420,1.855,421,3.56,461,4.106,548,4.733,743,1.385,746,1.367,772,2.334,1058,2.312,1089,3.391,1090,3.846,1472,5.758]],["title/reference/types.html#openhivenpy.types.entity.Entity.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.entity.Entity.format_obj_data",[25,1.452,43,1.737,56,2.154,68,2.546,74,3.13,114,2.516,127,2.63,134,2.833,141,1.448,153,1.386,171,1.479,185,1.549,190,2.485,199,4.839,207,0.857,223,1.133,241,2.833,242,3.01,243,4.059,259,3.561,286,3.689,303,1.612,308,2.72,342,3.157,385,2.666,418,3.326,420,1.843,543,1.661,545,3.785,724,4.059,743,0.943,746,0.931,759,1.81,944,3.183,1010,3.525,1014,2.882,1020,2.054,1028,2.833,1035,3.326,1044,2.72,1083,2.62,1445,4.24,1446,3.243,1458,3.243,1459,3.243,1472,3.923]],["title/reference/types.html#openhivenpy.types.entity.Entity.get_cached_data",[1476,3.985]],["text/reference/types.html#openhivenpy.types.entity.Entity.get_cached_data",[15,4.141,18,4.447,43,1.68,57,3.976,81,3.856,114,2.277,141,1.258,147,6.182,170,3.597,178,4.703,207,1.275,242,3.556,286,3.744,310,2.763,420,2.065,452,4.04,541,6.457,701,6.06,743,1.403,746,1.385,772,2.149,1014,2.148,1084,3.102,1298,5.297,1472,5.834,1476,4.557]],["title/reference/types.html#openhivenpy.types.entity.Entity.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.entity.Entity.json_validator",[]],["title/reference/types.html#openhivenpy.types.feed.Feed",[1432,4.921]],["text/reference/types.html#openhivenpy.types.feed.Feed",[12,2.971,50,5.506,69,2.306,650,4.734,1432,7.46,1433,8.471]],["title/reference/types.html#openhivenpy.types.feed.Feed.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.feed.Feed.__init__",[43,1.713,71,3.674,100,2.352,114,1.821,207,1.521,743,1.675,746,1.653,771,4.12,772,1.813,774,4.544,1014,2.564,1432,6.718,1440,5.029,1478,7.259]],["title/reference/types.html#openhivenpy.types.feed.Feed.__repr__",[1089,3.004]],["text/reference/types.html#openhivenpy.types.feed.Feed.__repr__",[43,1.744,56,3.511,141,1.379,207,1.397,382,4.463,421,3.804,440,6.666,461,4.388,743,1.538,746,1.518,772,1.665,1058,2.568,1089,3.766,1090,4.271,1432,6.169,1478,6.666]],["title/reference/types.html#openhivenpy.types.feed.Feed.__str__",[1091,3.794]],["text/reference/types.html#openhivenpy.types.feed.Feed.__str__",[14,4.564,43,1.661,67,4.743,68,4.097,102,4.807,141,1.456,207,1.475,289,4.621,342,2.94,529,4.092,737,5.471,743,1.624,746,1.602,772,2.133,1058,2.711,1091,5.022,1104,4.564,1434,7.904,1478,7.038]],["title/reference/types.html#openhivenpy.types.house.House",[342,1.83]],["text/reference/types.html#openhivenpy.types.house.House",[12,2.971,313,4.282,337,3.159,342,2.775,418,4.513,650,4.734]],["title/reference/types.html#openhivenpy.types.house.House-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.house.House-attributes",[]],["title/reference/types.html#openhivenpy.types.house.House.banner",[620,4.767]],["text/reference/types.html#openhivenpy.types.house.House.banner",[342,2.841,620,7.398]],["title/reference/types.html#openhivenpy.types.house.House.client_member",[1032,5.101]],["text/reference/types.html#openhivenpy.types.house.House.client_member",[100,2.643,212,5.424,242,3.196,350,4.296]],["title/reference/types.html#openhivenpy.types.house.House.default_permissions",[619,4.921]],["text/reference/types.html#openhivenpy.types.house.House.default_permissions",[141,1.687,185,3.09,342,2.807,936,7.105]],["title/reference/types.html#openhivenpy.types.house.House.entities",[313,2.824]],["text/reference/types.html#openhivenpy.types.house.House.entities",[313,4.358,338,4.551,342,2.824]],["title/reference/types.html#openhivenpy.types.house.House.members",[350,2.801]],["text/reference/types.html#openhivenpy.types.house.House.members",[338,4.551,342,2.824,350,4.322]],["title/reference/types.html#openhivenpy.types.house.House.owner",[413,4.306]],["text/reference/types.html#openhivenpy.types.house.House.owner",[242,3.215,342,2.824,413,6.644]],["title/reference/types.html#openhivenpy.types.house.House.roles",[563,3.448]],["text/reference/types.html#openhivenpy.types.house.House.roles",[338,4.551,342,2.824,563,5.32]],["title/reference/types.html#openhivenpy.types.house.House.users",[69,1.521]],["text/reference/types.html#openhivenpy.types.house.House.users",[338,4.498,342,2.791,350,4.89,1187,6.566]],["title/reference/types.html#openhivenpy.types.house.House-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.house.House-methods",[]],["title/reference/types.html#openhivenpy.types.house.House.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.house.House.__init__",[43,1.753,71,2.497,100,2.513,114,2.403,207,1.034,313,2.621,338,2.737,342,1.698,350,2.599,413,3.996,563,3.2,619,4.566,620,4.423,743,1.138,746,1.123,771,3.212,772,2.482,774,3.089,1014,2.397,1032,4.733,1084,2.517,1440,3.418,1480,3.418,1481,7.13,1482,5.522,1483,5.185,1484,5.522,1485,7.593,1486,5.522,1487,5.522,1488,5.522,1489,5.185]],["title/reference/types.html#openhivenpy.types.house.House.create_entity",[1490,5.588]],["text/reference/types.html#openhivenpy.types.house.House.create_entity",[4,1.571,43,1.747,74,2.941,81,1.858,114,1.671,134,3.757,141,1.378,149,1.873,153,1.274,171,1.408,185,1.423,207,0.788,211,2.519,214,3.822,223,2.567,286,2.681,299,2.553,303,1.481,310,1.707,313,4.922,330,1.932,342,2.538,351,3.477,368,1.979,385,1.431,398,2.066,399,3.456,420,1.77,452,1.947,468,2.723,527,4.582,534,2.625,543,1.561,553,2.816,743,0.867,746,0.855,759,1.662,772,2.135,813,1.932,1020,1.887,1023,4.624,1024,2.123,1025,2.123,1026,3.154,1027,2.123,1035,2.104,1058,2.151,1073,2.782,1084,2.848,1104,2.437,1125,5.356,1301,3.814,1338,4.737,1480,2.603,1483,7.749,1490,3.949,1491,3.949,1492,6.248]],["title/reference/types.html#openhivenpy.types.house.House.create_invite",[1493,5.588]],["text/reference/types.html#openhivenpy.types.house.House.create_invite",[4,1.73,14,2.684,43,1.738,96,3.295,114,2.056,127,2.052,134,3.359,141,1.458,149,3.511,153,1.403,171,1.49,185,1.568,207,1.477,211,3.179,214,3.106,217,2.899,223,1.147,229,3.669,275,3.519,281,3.519,299,2.741,303,1.631,310,1.88,330,2.128,342,2.658,354,7.584,368,2.18,385,1.577,398,2.276,420,0.993,468,3,534,2.818,543,1.97,743,0.955,746,0.942,759,3.417,772,2.047,813,2.128,1020,2.078,1024,2.339,1025,2.339,1026,3.386,1027,2.339,1043,3.795,1073,2.987,1084,3.057,1104,2.684,1296,3.71,1301,4.094,1338,5.086,1480,2.867,1493,4.349,1494,7.586,1495,6.707,1496,4.631]],["title/reference/types.html#openhivenpy.types.house.House.create_room",[1497,5.588]],["text/reference/types.html#openhivenpy.types.house.House.create_room",[4,1.601,5,2.345,12,2.087,14,2.484,43,1.746,96,3.113,114,1.69,127,1.312,134,3.965,141,1.394,149,3.358,171,1.197,190,1.36,207,0.803,211,3.04,214,2.935,217,2.739,223,2.383,281,3.325,286,2.72,299,3.404,310,2.573,313,2.034,330,1.969,337,3.595,342,2.562,368,2.983,399,3.505,420,0.919,468,2.776,534,2.662,543,1.583,743,0.884,746,0.872,759,3.293,772,2.077,813,1.969,1020,1.923,1024,2.164,1025,2.164,1026,3.2,1027,2.164,1043,2.425,1048,5.484,1057,2.822,1058,1.476,1073,2.822,1084,2.888,1104,2.484,1296,3.505,1301,3.868,1338,4.805,1480,2.653,1497,4.025,1498,8.33,1499,4.025,1500,6.337]],["title/reference/types.html#openhivenpy.types.house.House.delete",[518,3.632]],["text/reference/types.html#openhivenpy.types.house.House.delete",[4,2.291,43,1.733,96,4.005,149,4.077,171,1.159,190,1.946,207,1.149,211,3.692,214,3.775,217,3.524,330,2.817,342,3.001,368,2.887,420,1.315,518,6.2,534,3.424,543,1.532,743,1.264,746,1.248,759,3.858,772,2.178,813,2.817,936,6.345,1024,3.096,1025,3.096,1026,4.116,1027,3.096,1073,2.731,1084,2.795,1104,3.554,1296,4.509,1480,3.796,1501,8.151]],["title/reference/types.html#openhivenpy.types.house.House.edit",[1295,4.306]],["text/reference/types.html#openhivenpy.types.house.House.edit",[4,1.806,12,2.278,25,1.534,43,1.748,45,3.034,81,2.136,96,3.398,114,1.976,116,3.926,149,3.596,171,0.913,177,4.41,190,1.534,207,0.905,211,3.257,214,3.203,217,2.99,223,1.999,299,1.975,301,2.136,310,2.808,330,2.221,342,2.869,368,2.275,398,2.375,420,1.037,434,3.358,529,3.594,534,2.905,543,1.208,711,6.842,743,0.996,746,0.983,759,3.688,772,1.967,813,2.221,1024,2.441,1025,2.441,1026,3.492,1027,2.441,1047,3.358,1073,2.153,1084,2.203,1090,2.767,1104,2.801,1295,5.005,1296,3.825,1297,4.143,1480,2.992,1502,6.916]],["title/reference/types.html#openhivenpy.types.house.House.find_entity",[1298,4.632]],["text/reference/types.html#openhivenpy.types.house.House.find_entity",[43,1.687,114,2.273,141,1.776,153,2.052,170,3.082,171,1.644,185,2.294,207,1.269,223,1.677,303,2.386,310,2.751,313,4.813,385,2.307,392,5.042,420,1.866,452,4.696,543,2.174,743,1.397,746,1.378,754,5.635,772,1.942,1014,2.139,1058,2.995,1084,3.088,1298,6.772,1299,8.385,1300,4.08,1480,4.194]],["title/reference/types.html#openhivenpy.types.house.House.find_member",[1503,5.588]],["text/reference/types.html#openhivenpy.types.house.House.find_member",[43,1.696,114,1.929,141,1.762,153,2.017,171,1.625,185,2.254,207,1.247,223,1.649,303,2.345,310,2.703,350,5.029,385,2.267,392,4.986,420,2.044,452,4.665,543,2.149,743,1.373,746,1.355,754,5.572,772,2.127,1010,4.561,1014,2.102,1058,2.962,1063,7.842,1084,3.035,1300,4.01,1303,5.507,1480,4.122,1503,6.253]],["title/reference/types.html#openhivenpy.types.house.House.find_room",[1307,4.632]],["text/reference/types.html#openhivenpy.types.house.House.find_room",[43,1.687,114,2.273,141,1.776,153,2.052,170,3.082,171,1.644,185,2.294,207,1.269,223,1.677,303,2.386,310,2.751,337,3.551,385,2.307,392,5.042,420,1.866,452,4.696,455,5.073,543,2.174,743,1.397,746,1.378,754,5.635,772,1.942,1014,2.139,1058,2.995,1084,3.088,1300,4.08,1307,6.772,1480,4.194]],["title/reference/types.html#openhivenpy.types.house.House.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.house.House.format_obj_data",[43,1.679,68,3.042,74,3.739,114,2.532,127,2.939,134,3.384,141,1.66,153,1.787,171,1.501,185,1.997,199,5.315,207,1.105,223,1.46,241,3.652,242,3.364,243,4.848,259,4.254,286,4.123,303,2.078,385,3.057,418,3.973,420,1.703,543,1.984,724,4.848,743,1.216,746,1.2,944,3.802,1010,4.21,1014,3.032,1020,3.564,1035,3.973,1434,4.879,1445,5.064,1480,3.652]],["title/reference/types.html#openhivenpy.types.house.House.get_entity",[1172,4.632]],["text/reference/types.html#openhivenpy.types.house.House.get_entity",[43,1.696,57,4.08,81,3.956,141,1.965,170,3.17,171,1.338,190,2.84,207,1.327,286,3.841,310,2.876,313,5.046,420,1.92,452,4.145,543,1.77,743,1.46,746,1.441,772,1.998,1058,2.439,1084,3.229,1172,6.967,1299,7.402,1480,4.386,1491,6.653]],["title/reference/types.html#openhivenpy.types.house.House.get_member",[1504,5.588]],["text/reference/types.html#openhivenpy.types.house.House.get_member",[43,1.691,57,3.857,81,3.74,141,1.913,153,1.966,170,2.998,171,1.599,185,2.198,190,2.685,207,1.216,223,1.607,286,3.632,303,2.286,310,2.635,350,5.086,385,2.21,420,2.219,452,4.62,543,2.114,743,1.338,746,1.321,772,2.101,1058,2.913,1063,7.766,1084,2.959,1164,4.51,1480,4.019,1504,6.096,1505,6.492]],["title/reference/types.html#openhivenpy.types.house.House.get_room",[1204,4.306]],["text/reference/types.html#openhivenpy.types.house.House.get_room",[43,1.696,57,4.08,81,3.956,141,1.965,170,3.17,171,1.338,190,2.84,207,1.327,286,3.841,310,2.876,337,3.61,420,1.92,452,4.145,455,4.478,543,1.77,743,1.46,746,1.441,772,1.998,1048,4.664,1058,2.439,1084,3.229,1204,6.477,1480,4.386,1499,6.653]],["title/reference/types.html#openhivenpy.types.house.House.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.house.House.json_validator",[]],["title/reference/types.html#openhivenpy.types.house.House.leave",[1506,5.588]],["text/reference/types.html#openhivenpy.types.house.House.leave",[4,2.319,43,1.736,96,4.037,149,4.102,171,1.173,190,1.969,207,1.162,211,3.714,214,3.805,217,3.552,330,2.851,342,2.527,368,2.921,398,3.049,420,1.331,518,3.788,534,3.452,543,1.551,743,1.279,746,1.263,759,3.876,772,2.188,813,2.851,1024,3.134,1025,3.134,1026,4.148,1027,3.134,1073,2.764,1084,2.829,1104,3.597,1296,4.544,1480,3.842,1506,9.206,1507,6.206]],["title/reference/types.html#openhivenpy.types.house.LazyHouse",[1434,4.921]],["text/reference/types.html#openhivenpy.types.house.LazyHouse",[12,2.748,49,4.666,68,3.789,114,2.218,235,4.776,242,2.921,313,3.96,337,2.921,342,3.043,418,4.173,452,3.863,498,5.795,508,7.151,529,4.334,536,6.899,650,4.378,1509,8.342]],["title/reference/types.html#openhivenpy.types.house.LazyHouse-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.house.LazyHouse-attributes",[]],["title/reference/types.html#openhivenpy.types.house.LazyHouse.icon",[423,3.033]],["text/reference/types.html#openhivenpy.types.house.LazyHouse.icon",[81,3.987,190,2.862,229,4.935,342,2.775,423,4.598,761,7.733]],["title/reference/types.html#openhivenpy.types.house.LazyHouse.id",[420,1.276]],["text/reference/types.html#openhivenpy.types.house.LazyHouse.id",[342,2.841,420,1.981]],["title/reference/types.html#openhivenpy.types.house.LazyHouse.name",[223,1.473]],["text/reference/types.html#openhivenpy.types.house.LazyHouse.name",[223,2.286,342,2.841]],["title/reference/types.html#openhivenpy.types.house.LazyHouse.owner_id",[546,4.216]],["text/reference/types.html#openhivenpy.types.house.LazyHouse.owner_id",[69,2.334,342,2.807,413,6.605,420,1.957]],["title/reference/types.html#openhivenpy.types.house.LazyHouse.rooms",[337,2.084]],["text/reference/types.html#openhivenpy.types.house.LazyHouse.rooms",[337,3.215,338,4.551,342,2.824]],["title/reference/types.html#openhivenpy.types.house.LazyHouse.type",[171,1.124]],["text/reference/types.html#openhivenpy.types.house.LazyHouse.type",[171,1.745,342,2.841]],["title/reference/types.html#openhivenpy.types.house.LazyHouse-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.house.LazyHouse-methods",[]],["title/reference/types.html#openhivenpy.types.house.LazyHouse.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.house.LazyHouse.__init__",[12,2.401,43,1.743,71,4.121,100,2.638,114,2.451,127,2.231,134,3.106,153,1.577,171,1.377,185,1.763,207,0.975,223,1.805,242,2.553,303,2.567,313,3.46,337,2.945,342,2.242,385,2.482,413,3.768,418,3.647,420,1.117,423,2.654,543,1.301,546,3.689,650,3.825,743,1.073,746,1.059,771,3.084,772,2.362,774,2.912,1014,2.301,1057,3.428,1084,2.373,1434,4.306,1440,3.223,1451,4.463,1465,3.854,1475,4.171,1480,3.223,1489,4.889,1510,4.889,1511,5.207]],["title/reference/types.html#openhivenpy.types.house.LazyHouse.__repr__",[1089,3.004]],["text/reference/types.html#openhivenpy.types.house.LazyHouse.__repr__",[43,1.749,56,3.261,141,1.28,207,1.297,223,2.184,342,2.13,382,4.26,420,1.892,421,3.631,461,4.188,546,6.252,743,1.428,746,1.409,772,2.282,1058,2.385,1089,3.497,1090,3.966,1480,4.288]],["title/reference/types.html#openhivenpy.types.house.LazyHouse.__str__",[1091,3.794]],["text/reference/types.html#openhivenpy.types.house.LazyHouse.__str__",[43,1.582,141,1.611,207,1.633,223,2.158,743,1.797,746,1.773,772,2.265,1091,5.558,1480,5.396]],["title/reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data",[25,0.987,43,1.753,56,1.464,68,1.896,69,1.266,74,2.331,78,2.082,114,2.509,127,2.153,134,2.11,141,1.141,153,0.942,171,1.622,185,1.053,190,1.958,199,4.073,207,0.582,211,1.997,223,0.77,241,1.925,242,3.006,243,3.022,259,2.652,286,3.02,303,1.095,308,1.848,313,2.929,337,2.161,338,3.488,342,1.523,347,2.275,350,4.195,368,1.464,385,2.101,413,6.646,418,2.477,420,1.969,543,1.237,546,6.315,563,5.322,579,3.854,724,3.022,743,0.641,746,0.633,759,1.229,944,2.37,1010,2.625,1014,2.425,1015,2.778,1020,1.395,1023,5.686,1028,1.925,1035,2.477,1044,1.848,1083,1.78,1445,3.157,1446,2.203,1458,2.203,1459,2.203,1480,1.925,1512,7.683,1513,3.109]],["title/reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data",[1476,3.985]],["text/reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data",[15,4.141,18,4.447,43,1.68,57,3.976,81,3.856,114,2.277,141,1.258,147,6.182,170,3.597,178,4.703,207,1.275,242,3.556,286,3.744,310,2.763,420,2.065,452,4.04,541,6.457,701,6.06,743,1.403,746,1.385,772,2.149,1014,2.148,1084,3.102,1302,5.628,1476,4.557,1480,4.213]],["title/reference/types.html#openhivenpy.types.house.LazyHouse.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.house.LazyHouse.json_validator",[]],["title/reference/types.html#openhivenpy.types.invite.Invite",[354,4.216]],["text/reference/types.html#openhivenpy.types.invite.Invite",[12,3.006,342,2.807,354,6.467,650,4.79]],["title/reference/types.html#openhivenpy.types.invite.Invite.code",[207,1.114]],["text/reference/types.html#openhivenpy.types.invite.Invite.code",[]],["title/reference/types.html#openhivenpy.types.invite.Invite.created_at",[1515,5.101]],["text/reference/types.html#openhivenpy.types.invite.Invite.created_at",[]],["title/reference/types.html#openhivenpy.types.invite.Invite.house",[342,1.83]],["text/reference/types.html#openhivenpy.types.invite.Invite.house",[]],["title/reference/types.html#openhivenpy.types.invite.Invite.house_id",[545,2.237]],["text/reference/types.html#openhivenpy.types.invite.Invite.house_id",[]],["title/reference/types.html#openhivenpy.types.invite.Invite.house_members",[1516,5.317]],["text/reference/types.html#openhivenpy.types.invite.Invite.house_members",[]],["title/reference/types.html#openhivenpy.types.invite.Invite.max_age",[1517,5.101]],["text/reference/types.html#openhivenpy.types.invite.Invite.max_age",[]],["title/reference/types.html#openhivenpy.types.invite.Invite.max_uses",[1494,4.921]],["text/reference/types.html#openhivenpy.types.invite.Invite.max_uses",[]],["title/reference/types.html#openhivenpy.types.invite.Invite.type",[171,1.124]],["text/reference/types.html#openhivenpy.types.invite.Invite.type",[]],["title/reference/types.html#openhivenpy.types.invite.Invite.url",[229,3.255]],["text/reference/types.html#openhivenpy.types.invite.Invite.url",[]],["title/reference/types.html#openhivenpy.types.invite.Invite-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.invite.Invite-methods",[]],["title/reference/types.html#openhivenpy.types.invite.Invite.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.invite.Invite.__init__",[43,1.754,71,2.533,100,2.22,114,2.439,171,1.058,207,1.436,229,3.064,342,1.723,354,3.969,545,2.106,743,1.155,746,1.14,771,3.244,772,2.451,774,3.133,1014,1.768,1084,2.553,1440,3.467,1455,4.36,1456,4.146,1464,5.26,1465,4.146,1494,4.632,1515,4.802,1516,5.005,1517,4.802,1518,5.005,1519,5.601,1520,5.601,1521,5.601,1522,5.601,1523,5.601]],["title/reference/types.html#openhivenpy.types.invite.Invite.__repr__",[1089,3.004]],["text/reference/types.html#openhivenpy.types.invite.Invite.__repr__",[43,1.754,56,2.898,141,1.138,171,1.544,207,1.718,229,4.471,354,4.363,382,3.946,421,3.363,461,3.879,545,3.072,743,1.269,746,1.253,772,2.418,1058,2.12,1089,3.109,1090,3.525,1494,6.759,1515,7.006,1517,7.006,1518,5.502]],["title/reference/types.html#openhivenpy.types.invite.Invite.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.invite.Invite.format_obj_data",[25,1.099,43,1.753,56,2.537,68,2.064,74,2.537,114,2.52,127,2.285,134,2.297,141,1.223,153,1.049,171,1.69,185,1.172,190,2.37,199,4.289,207,1.399,223,0.857,229,1.895,241,2.144,242,2.615,243,3.29,259,2.887,286,3.205,303,1.22,308,2.058,342,2.923,354,7.121,385,2.253,418,2.697,420,1.601,543,1.347,545,3.477,724,3.29,743,0.714,746,0.705,759,1.369,924,3.095,944,2.58,1010,2.857,1014,2.554,1020,1.554,1028,2.144,1035,2.697,1043,1.96,1044,2.058,1083,1.983,1445,3.437,1446,2.454,1458,2.454,1459,2.454,1494,4.458,1515,4.621,1516,4.817,1517,4.621,1518,3.095,1524,3.463]],["title/reference/types.html#openhivenpy.types.invite.Invite.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.invite.Invite.json_validator",[]],["title/reference/types.html#openhivenpy.types.member.Member",[350,2.801]],["text/reference/types.html#openhivenpy.types.member.Member",[12,3.355,69,2.241,114,2.283,342,2.696,350,4.794,418,4.385,563,5.08,650,4.6]],["title/reference/types.html#openhivenpy.types.member.Member-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.member.Member-attributes",[]],["title/reference/types.html#openhivenpy.types.member.Member.house",[342,1.83]],["text/reference/types.html#openhivenpy.types.member.Member.house",[68,3.475,242,3.177,286,3.894,342,2.791,390,5.699]],["title/reference/types.html#openhivenpy.types.member.Member.house_id",[545,2.237]],["text/reference/types.html#openhivenpy.types.member.Member.house_id",[141,1.687,342,2.807,390,5.732,420,1.957]],["title/reference/types.html#openhivenpy.types.member.Member.id",[420,1.276]],["text/reference/types.html#openhivenpy.types.member.Member.id",[69,2.32,347,4.168,350,4.271,420,1.946,1187,6.566]],["title/reference/types.html#openhivenpy.types.member.Member.joined_at",[349,3.632]],["text/reference/types.html#openhivenpy.types.member.Member.joined_at",[465,5.195,866,6.88,1090,5.195,1402,7.063,1526,8.521]],["title/reference/types.html#openhivenpy.types.member.Member.joined_house_at",[1527,5.588]],["text/reference/types.html#openhivenpy.types.member.Member.joined_house_at",[349,5.474,465,5.135,866,6.801,1090,5.135,1187,6.49,1402,6.981,1526,8.422]],["title/reference/types.html#openhivenpy.types.member.Member.roles",[563,3.448]],["text/reference/types.html#openhivenpy.types.member.Member.roles",[141,1.697,350,4.322,563,5.32]],["title/reference/types.html#openhivenpy.types.member.Member.user_id",[347,2.734]],["text/reference/types.html#openhivenpy.types.member.Member.user_id",[69,2.347,350,4.322,420,1.969]],["title/reference/types.html#openhivenpy.types.member.Member-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.member.Member-methods",[]],["title/reference/types.html#openhivenpy.types.member.Member.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.member.Member.__init__",[43,1.753,69,2.073,71,2.752,100,2.348,114,2.477,207,1.14,342,1.871,347,2.795,349,3.714,350,2.864,545,2.287,563,3.526,743,1.254,746,1.238,771,3.431,772,2.325,774,3.404,1014,1.921,1440,3.766,1455,4.736,1456,4.504,1481,5.714,1528,5.216,1529,5.216,1530,6.085]],["title/reference/types.html#openhivenpy.types.member.Member.__repr__",[1089,3.004]],["text/reference/types.html#openhivenpy.types.member.Member.__repr__",[43,1.755,56,2.82,131,3.629,141,1.107,207,1.122,223,1.987,300,3.601,309,4.129,350,2.82,382,3.874,420,1.721,421,3.302,423,4.09,461,3.809,545,3.017,743,1.235,746,1.219,772,2.434,1058,2.062,1089,3.025,1090,3.43,1527,7.536,1528,5.135]],["title/reference/types.html#openhivenpy.types.member.Member.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.member.Member.format_obj_data",[25,1.356,43,1.74,56,2.012,68,2.422,74,2.977,114,2.537,127,2.545,134,2.695,141,1.392,153,1.295,171,1.422,185,1.447,190,2.389,199,4.707,207,0.801,223,1.058,241,2.646,242,2.913,243,3.86,259,4.031,286,3.57,303,1.505,308,2.54,342,3.201,385,2.832,418,3.164,420,1.784,543,1.58,545,3.857,724,3.86,743,0.881,746,0.87,759,2.5,944,3.027,1010,3.352,1014,2.803,1020,1.918,1028,3.915,1035,3.164,1044,3.758,1083,2.447,1445,4.032,1446,3.029,1458,3.029,1459,3.029,1528,3.664]],["title/reference/types.html#openhivenpy.types.member.Member.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.member.Member.json_validator",[]],["title/reference/types.html#openhivenpy.types.member.Member.kick",[1531,5.588]],["text/reference/types.html#openhivenpy.types.member.Member.kick",[4,2.131,15,2.708,43,1.732,69,1.985,96,4.655,100,2.248,149,3.931,171,1.078,190,1.81,207,1.068,211,3.559,214,3.595,217,3.356,330,2.621,342,2.388,350,3.655,368,2.685,376,3.637,398,3.815,518,3.482,534,3.262,543,1.425,743,1.176,746,1.161,759,3.919,772,2.114,781,6.043,813,2.621,936,6.043,1024,2.88,1025,2.88,1026,3.92,1027,2.88,1073,2.54,1084,2.6,1296,4.294,1389,5.097,1398,5.097,1399,6.655,1456,4.222,1528,4.89,1529,4.89,1531,8.897]],["title/reference/types.html#openhivenpy.types.mention.Mention",[194,3.737]],["text/reference/types.html#openhivenpy.types.mention.Mention",[12,3.006,69,2.334,194,5.732,650,4.79]],["title/reference/types.html#openhivenpy.types.mention.Mention-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.mention.Mention-attributes",[]],["title/reference/types.html#openhivenpy.types.mention.Mention.author",[384,2.95]],["text/reference/types.html#openhivenpy.types.mention.Mention.author",[88,3.452,194,5.732,384,4.525,418,4.566]],["title/reference/types.html#openhivenpy.types.mention.Mention.author_id",[265,3.536]],["text/reference/types.html#openhivenpy.types.mention.Mention.author_id",[]],["title/reference/types.html#openhivenpy.types.mention.Mention.timestamp",[465,3.407]],["text/reference/types.html#openhivenpy.types.mention.Mention.timestamp",[76,5.65,141,1.687,194,5.732,465,5.226]],["title/reference/types.html#openhivenpy.types.mention.Mention.user",[69,1.521]],["text/reference/types.html#openhivenpy.types.mention.Mention.user",[69,2.347,141,1.697,194,5.766]],["title/reference/types.html#openhivenpy.types.mention.Mention.user_id",[347,2.734]],["text/reference/types.html#openhivenpy.types.mention.Mention.user_id",[69,2.347,194,5.766,420,1.969]],["title/reference/types.html#openhivenpy.types.mention.Mention-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.mention.Mention-methods",[]],["title/reference/types.html#openhivenpy.types.mention.Mention.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.mention.Mention.__init__",[43,1.749,69,1.646,71,2.912,100,2.437,114,2.373,194,4.044,207,1.206,265,3.826,347,2.958,384,3.192,465,3.686,743,1.327,746,1.31,771,3.561,772,2.407,774,3.601,1014,2.032,1084,2.934,1440,3.985,1453,5.519,1454,5.519,1457,5.519,1529,5.519,1533,6.046,1534,6.046]],["title/reference/types.html#openhivenpy.types.mention.Mention.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.mention.Mention.format_obj_data",[25,1.775,43,1.748,56,2.633,68,2.142,69,2.687,74,2.633,114,2.513,127,2.344,134,2.384,141,1.261,153,1.101,171,1.447,185,1.23,190,2.982,199,4.385,207,0.681,223,0.9,241,2.249,242,2.683,243,3.415,259,2.996,265,3.325,286,3.288,303,1.28,308,3.325,347,2.57,384,5.21,385,2.322,418,2.799,420,1.874,543,1.398,724,3.415,743,0.749,746,0.739,759,2.212,944,2.678,1010,2.966,1014,2.758,1020,1.631,1028,3.463,1035,2.799,1044,3.325,1083,3.203,1445,3.567,1446,3.964,1458,3.964,1459,3.964,1533,3.412]],["title/reference/types.html#openhivenpy.types.mention.Mention.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.mention.Mention.json_validator",[]],["title/reference/types.html#openhivenpy.types.message.DeletedMessage",[1435,5.317]],["text/reference/types.html#openhivenpy.types.message.DeletedMessage",[88,3.452,337,3.196,518,5.571,650,4.79]],["title/reference/types.html#openhivenpy.types.message.DeletedMessage-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.message.DeletedMessage-attributes",[]],["title/reference/types.html#openhivenpy.types.message.DeletedMessage.house_id",[545,2.237]],["text/reference/types.html#openhivenpy.types.message.DeletedMessage.house_id",[81,4.01,190,2.879,342,2.791,420,1.946,762,7.504]],["title/reference/types.html#openhivenpy.types.message.DeletedMessage.message_id",[595,4.512]],["text/reference/types.html#openhivenpy.types.message.DeletedMessage.message_id",[88,3.473,420,1.969,762,7.592]],["title/reference/types.html#openhivenpy.types.message.DeletedMessage.room_id",[455,2.977]],["text/reference/types.html#openhivenpy.types.message.DeletedMessage.room_id",[337,3.196,420,1.957,467,5.355,762,7.548]],["title/reference/types.html#openhivenpy.types.message.DeletedMessage-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.message.DeletedMessage-methods",[]],["title/reference/types.html#openhivenpy.types.message.DeletedMessage.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.message.DeletedMessage.__init__",[43,1.743,71,3.147,100,2.562,114,2.295,207,1.303,455,3.481,545,2.616,595,5.276,743,1.434,746,1.416,771,3.744,772,2.359,774,3.892,1014,2.196,1084,3.171,1435,6.217,1440,4.307,1452,5.964,1456,5.15,1536,5.035,1537,6.958]],["title/reference/types.html#openhivenpy.types.message.DeletedMessage.__str__",[1091,3.794]],["text/reference/types.html#openhivenpy.types.message.DeletedMessage.__str__",[43,1.665,88,3.172,141,1.55,207,1.571,337,2.937,455,4.196,518,5.119,534,3.523,743,1.729,746,1.706,772,2.215,1091,5.348,1536,6.069]],["title/reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data",[43,1.688,68,3.081,74,3.787,114,2.539,127,2.962,134,3.428,141,1.676,153,1.822,171,1.52,185,2.036,199,5.349,207,1.126,223,1.489,241,3.723,242,2.817,243,4.911,259,4.309,286,4.155,303,2.118,385,3.087,420,1.29,543,2.01,595,4.56,724,4.911,743,1.24,746,1.224,944,3.851,1010,4.265,1014,3.056,1020,2.699,1035,4.025,1445,5.13,1536,4.352]],["title/reference/types.html#openhivenpy.types.message.DeletedMessage.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.message.DeletedMessage.json_validator",[]],["title/reference/types.html#openhivenpy.types.message.Message",[88,2.251]],["text/reference/types.html#openhivenpy.types.message.Message",[12,2.971,69,2.306,88,3.412,105,5.506,289,5.293,650,4.734]],["title/reference/types.html#openhivenpy.types.message.Message-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.message.Message-attributes",[]],["title/reference/types.html#openhivenpy.types.message.Message.attachment",[456,3.985]],["text/reference/types.html#openhivenpy.types.message.Message.attachment",[87,4.79,88,3.452,141,1.687,456,6.112]],["title/reference/types.html#openhivenpy.types.message.Message.author",[384,2.95]],["text/reference/types.html#openhivenpy.types.message.Message.author",[141,1.677,242,3.177,286,3.894,384,4.498,390,5.699]],["title/reference/types.html#openhivenpy.types.message.Message.author_id",[265,3.536]],["text/reference/types.html#openhivenpy.types.message.Message.author_id",[384,4.551,390,5.766,420,1.969]],["title/reference/types.html#openhivenpy.types.message.Message.bucket",[264,4.216]],["text/reference/types.html#openhivenpy.types.message.Message.bucket",[88,3.473,141,1.697,264,6.505]],["title/reference/types.html#openhivenpy.types.message.Message.content",[445,3.221]],["text/reference/types.html#openhivenpy.types.message.Message.content",[88,3.452,141,1.687,203,6.008,445,4.94]],["title/reference/types.html#openhivenpy.types.message.Message.device_id",[267,4.306]],["text/reference/types.html#openhivenpy.types.message.Message.device_id",[88,3.432,141,1.677,384,4.498,420,1.946,1539,9.073]],["title/reference/types.html#openhivenpy.types.message.Message.edited_at",[457,4.632]],["text/reference/types.html#openhivenpy.types.message.Message.edited_at",[88,3.412,141,1.668,465,5.165,866,6.84,1295,6.528,1402,7.022]],["title/reference/types.html#openhivenpy.types.message.Message.embed",[458,3.737]],["text/reference/types.html#openhivenpy.types.message.Message.embed",[87,4.79,88,3.452,141,1.687,458,5.732]],["title/reference/types.html#openhivenpy.types.message.Message.exploding",[459,4.306]],["text/reference/types.html#openhivenpy.types.message.Message.exploding",[88,3.452,141,1.687,459,6.605,972,5.65]],["title/reference/types.html#openhivenpy.types.message.Message.exploding_age",[266,4.306]],["text/reference/types.html#openhivenpy.types.message.Message.exploding_age",[88,3.452,141,1.687,459,6.605,1540,9.127]],["title/reference/types.html#openhivenpy.types.message.Message.house",[342,1.83]],["text/reference/types.html#openhivenpy.types.message.Message.house",[88,3.373,105,5.443,141,1.648,213,5.601,242,3.122,342,3.164,390,5.601]],["title/reference/types.html#openhivenpy.types.message.Message.house_id",[545,2.237]],["text/reference/types.html#openhivenpy.types.message.Message.house_id",[88,3.354,105,5.412,141,1.639,213,5.569,242,3.105,342,3.153,390,5.569,420,1.901]],["title/reference/types.html#openhivenpy.types.message.Message.id",[420,1.276]],["text/reference/types.html#openhivenpy.types.message.Message.id",[88,3.493,420,1.981]],["title/reference/types.html#openhivenpy.types.message.Message.is_house_message",[1541,5.95]],["text/reference/types.html#openhivenpy.types.message.Message.is_house_message",[88,3.412,105,5.506,141,1.668,213,5.666,342,2.775,972,5.584]],["title/reference/types.html#openhivenpy.types.message.Message.mentions",[194,3.737]],["text/reference/types.html#openhivenpy.types.message.Message.mentions",[88,3.473,141,1.697,194,5.766]],["title/reference/types.html#openhivenpy.types.message.Message.recipient_ids",[601,4.216]],["text/reference/types.html#openhivenpy.types.message.Message.recipient_ids",[337,3.626,338,4.472,467,5.293,549,5.432,579,7.022]],["title/reference/types.html#openhivenpy.types.message.Message.room",[337,2.084]],["text/reference/types.html#openhivenpy.types.message.Message.room",[88,3.412,105,5.506,141,1.668,242,3.159,337,3.159,390,5.666]],["title/reference/types.html#openhivenpy.types.message.Message.room_id",[455,2.977]],["text/reference/types.html#openhivenpy.types.message.Message.room_id",[141,1.677,242,3.177,337,3.177,390,5.699,420,1.946]],["title/reference/types.html#openhivenpy.types.message.Message.timestamp",[465,3.407]],["text/reference/types.html#openhivenpy.types.message.Message.timestamp",[88,3.412,134,3.844,141,1.668,465,5.165,866,6.84,1402,7.022]],["title/reference/types.html#openhivenpy.types.message.Message.type",[171,1.124]],["text/reference/types.html#openhivenpy.types.message.Message.type",[88,3.473,141,1.697,171,1.734]],["title/reference/types.html#openhivenpy.types.message.Message-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.message.Message-methods",[]],["title/reference/types.html#openhivenpy.types.message.Message.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.message.Message.__init__",[43,1.759,71,1.832,88,2.298,100,1.759,114,2.476,171,0.765,194,2.544,207,0.759,264,2.871,265,2.408,266,2.932,267,2.932,337,1.419,342,1.246,384,2.008,420,0.869,445,2.193,455,2.027,456,4.069,457,3.153,458,2.544,459,2.932,465,2.319,545,1.523,552,1.973,553,2.713,601,2.871,715,3.245,743,0.835,746,0.824,771,2.571,772,2.476,774,2.266,1014,1.918,1057,2.667,1074,2.667,1084,1.846,1143,2.814,1440,2.508,1451,3.473,1452,3.473,1453,3.473,1454,3.473,1455,3.153,1456,2.998,1457,3.473,1465,2.998,1536,2.932,1542,4.051,1543,4.051,1544,4.051,1545,4.051,1546,3.804,1547,4.051,1548,4.051,1549,4.051,1550,4.051,1551,4.051,1552,3.804]],["title/reference/types.html#openhivenpy.types.message.Message.__repr__",[1089,3.004]],["text/reference/types.html#openhivenpy.types.message.Message.__repr__",[43,1.755,56,2.853,88,2.292,141,1.12,171,1.528,207,1.135,337,2.832,382,3.905,384,4.009,420,1.734,421,3.328,445,4.377,457,6.295,459,5.853,461,3.839,743,1.249,746,1.233,772,2.409,1058,2.086,1089,3.06,1090,3.47,1104,4.687,1536,4.386]],["title/reference/types.html#openhivenpy.types.message.Message.__str__",[1091,3.794]],["text/reference/types.html#openhivenpy.types.message.Message.__str__",[43,1.724,88,2.994,141,1.463,207,1.483,223,1.96,384,3.924,420,2.056,534,3.326,743,1.632,746,1.611,772,2.301,1058,2.725,1091,5.047,1536,5.729]],["title/reference/types.html#openhivenpy.types.message.Message.delete",[518,3.632]],["text/reference/types.html#openhivenpy.types.message.Message.delete",[4,1.913,43,1.733,88,3.74,96,3.54,130,4.743,149,3.712,153,1.551,166,7.676,171,1.361,185,1.734,190,2.87,207,0.959,211,3.362,214,3.337,217,3.115,223,1.268,303,1.803,304,4.339,330,2.352,337,1.793,363,2.967,368,2.41,398,2.516,420,1.098,455,2.562,495,5.005,518,6.201,534,3.027,543,1.8,743,1.056,746,1.042,759,3.91,772,2.128,813,2.352,1024,2.585,1025,2.585,1026,3.638,1027,2.585,1073,3.209,1084,2.334,1104,2.967,1148,3.986,1260,5.333,1296,3.985,1399,6.176,1536,3.706,1553,5.608]],["title/reference/types.html#openhivenpy.types.message.Message.edit",[1295,4.306]],["text/reference/types.html#openhivenpy.types.message.Message.edit",[4,2.139,12,2.564,43,1.742,88,3.589,96,3.824,149,3.938,171,1.082,190,1.817,207,1.072,211,3.566,214,3.604,217,3.365,299,2.34,330,2.63,337,2.005,368,2.695,398,2.813,420,1.228,434,3.977,445,4.786,455,2.864,534,3.27,543,1.43,743,1.18,746,1.165,759,3.752,772,2.215,813,2.63,1024,2.891,1025,2.891,1026,3.93,1027,2.891,1058,1.971,1073,2.55,1084,2.61,1104,3.318,1295,6.867,1296,4.305,1536,4.143]],["title/reference/types.html#openhivenpy.types.message.Message.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.message.Message.format_obj_data",[25,1.284,43,1.756,56,1.905,68,1.55,74,1.905,88,0.918,114,2.522,127,1.858,134,1.725,141,0.962,153,0.735,171,1.639,185,0.822,190,3.043,199,3.577,207,0.455,223,0.601,241,1.503,242,2.126,243,2.471,259,2.168,264,2.868,265,3.609,266,2.929,267,2.929,286,2.606,303,0.855,308,2.405,337,2.126,342,1.601,368,3.176,384,4.818,385,1.772,418,2.025,420,1.737,455,3.375,465,2.317,543,1.011,545,2.536,552,1.183,553,1.626,715,1.945,724,2.471,743,0.501,746,0.494,759,1.6,944,1.937,1010,2.146,1014,2.44,1020,1.09,1028,2.505,1035,2.025,1043,3.436,1044,4.331,1058,2.09,1083,2.98,1143,1.687,1218,4.994,1445,2.581,1446,3.688,1458,3.688,1459,3.688,1536,1.757,1546,2.28,1554,8.908,1555,8.676]],["title/reference/types.html#openhivenpy.types.message.Message.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.message.Message.json_validator",[]],["title/reference/types.html#openhivenpy.types.message.Message.mark_as_read",[1556,5.588]],["text/reference/types.html#openhivenpy.types.message.Message.mark_as_read",[4,1.87,43,1.73,88,3.713,96,3.483,100,2.053,125,5.024,130,4.667,131,3.206,149,3.666,153,1.516,166,7.632,171,1.339,185,1.694,190,2.842,207,0.937,211,3.32,214,3.283,217,3.065,223,1.239,303,1.763,330,2.299,337,1.753,363,2.9,368,2.356,398,2.459,420,1.073,455,2.504,468,3.242,495,6.566,509,4.453,534,2.978,543,1.771,743,1.032,746,1.018,759,3.541,761,6.078,772,2.109,813,2.299,1024,2.527,1025,2.527,1026,3.58,1027,2.527,1073,3.157,1084,2.281,1104,2.9,1148,3.896,1260,5.248,1296,3.921,1536,3.622,1553,5.519,1556,4.7,1557,9.452,1558,5.005]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom",[262,3.683]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom",[69,2.306,87,4.734,337,3.159,467,5.293,650,4.734,1436,7.46]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom-attributes",[]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.client_user",[261,3.854]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.client_user",[68,3.516,141,1.697,261,5.946]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.description",[543,1.487]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.description",[141,1.697,262,5.683,543,2.294]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.emoji",[544,3.737]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.emoji",[87,4.818,262,5.683,544,5.766]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.id",[420,1.276]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.id",[141,1.697,262,5.683,420,1.969]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.last_message_id",[282,3.854]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.last_message_id",[88,3.452,105,5.571,420,1.957,1560,8.571]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.name",[223,1.473]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.name",[223,2.286,262,5.717]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.recipient",[549,3.583]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.recipient",[141,1.687,242,3.196,286,3.917,549,5.496]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.recipient_id",[601,4.216]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.recipient_id",[420,1.981,549,5.561]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.type",[171,1.124]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.type",[171,1.745,262,5.717]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom-methods",[]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__",[43,1.754,71,2.599,100,2.259,114,2.424,171,1.086,207,1.076,223,1.423,261,3.722,262,3.557,282,3.722,420,1.232,543,1.436,544,3.609,549,3.46,601,4.072,743,1.185,746,1.169,771,3.301,772,2.44,774,3.214,1014,1.814,1057,3.783,1267,4.926,1440,3.557,1465,4.253,1468,4.926,1475,4.603,1552,5.396,1561,3.992,1562,5.135,1563,5.396,1564,5.135]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__",[1089,3.004]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__",[43,1.75,56,3.162,141,1.242,171,1.634,207,1.258,262,4.158,282,5.603,382,4.177,420,1.855,421,3.56,461,4.106,549,5.209,743,1.385,746,1.367,772,2.334,1058,2.312,1089,3.391,1090,3.846,1561,4.666]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data",[25,1.859,43,1.744,56,1.817,57,1.759,68,2.244,74,2.758,100,1.117,114,2.481,127,2.419,134,2.496,141,1.309,153,1.774,171,1.338,185,1.307,190,3.04,199,4.505,207,0.723,223,2.551,241,2.389,242,2.976,243,3.576,259,3.138,286,3.393,303,1.359,308,2.294,371,3.004,385,2.41,418,3.542,420,1.823,452,1.787,467,2.265,534,1.621,543,1.464,549,6.451,552,1.88,601,5.017,724,3.576,743,0.796,746,0.785,759,1.526,944,2.804,1010,3.106,1014,2.683,1020,1.732,1028,2.389,1035,2.931,1044,2.294,1083,3.354,1436,3.192,1445,3.735,1446,2.735,1458,2.735,1459,2.735,1561,2.681,1565,3.86,1566,3.86]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data",[1476,3.985]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data",[15,4.141,18,4.447,43,1.68,57,3.976,81,3.856,114,2.277,141,1.258,147,6.182,170,3.597,178,4.703,207,1.275,242,3.556,286,3.744,310,2.763,420,2.065,452,4.04,541,6.457,701,6.06,743,1.403,746,1.385,772,2.149,1014,2.148,1084,3.102,1305,5.628,1476,4.557,1561,4.727]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.json_validator",[]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.send",[519,3.917]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.send",[4,2.328,43,1.676,88,4.157,120,4.415,130,5.423,141,1.815,153,1.887,166,7.558,171,1.556,185,2.11,190,2.614,207,1.167,223,1.543,281,4.323,286,3.535,303,2.901,310,2.53,337,3.231,385,2.121,445,5.527,467,5.415,519,6.722,543,2.058,743,1.284,746,1.268,759,2.464,772,1.391,1058,2.836,1260,6.097,1553,6.412,1561,4.329,1567,5.568,1568,5.342]],["title/reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call",[1569,5.101]],["text/reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call",[4,2.6,43,1.676,69,2.262,97,5.863,120,6.895,130,5.825,153,2.107,166,7.825,171,1.314,185,2.355,190,2.808,207,1.303,223,1.722,303,2.45,337,3.407,426,3.546,467,5.709,521,6.404,543,1.738,743,1.434,746,1.416,759,2.751,772,1.553,1260,6.549,1553,6.888,1561,4.833,1568,5.964,1569,5.964]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom",[263,3.737]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom",[69,2.293,285,5.633,336,6.355,337,3.14,467,5.262,650,4.707,1436,7.417]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom-attributes",[]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.client_user",[261,3.854]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.client_user",[69,2.32,100,2.627,141,1.677,213,5.699,263,5.699]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.description",[543,1.487]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.description",[141,1.697,263,5.766,543,2.294]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.emoji",[544,3.737]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.emoji",[81,4.034,141,1.687,263,5.732,544,5.732]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.id",[420,1.276]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.id",[141,1.697,263,5.766,420,1.969]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.last_message_id",[282,3.854]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.last_message_id",[88,3.412,141,1.668,213,5.666,263,5.666,420,1.935,1560,8.471]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.name",[223,1.473]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.name",[141,1.697,223,2.273,263,5.766]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.recipients",[549,3.583]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.recipients",[141,1.697,338,4.551,549,5.528]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.type",[171,1.124]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.type",[141,1.697,171,1.734,263,5.766]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom-methods",[]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__",[43,1.753,71,2.638,100,2.585,114,2.399,171,1.102,207,1.092,223,1.444,261,3.778,263,3.664,282,3.778,420,1.251,543,1.457,544,3.664,549,3.512,743,1.202,746,1.187,771,3.335,772,2.447,774,3.263,1014,1.841,1057,3.84,1084,2.659,1267,5,1440,3.611,1465,4.317,1468,5,1475,4.673,1561,4.052,1562,5.212,1563,5.478,1564,5.212]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__",[1089,3.004]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__",[43,1.751,56,3.148,141,1.236,171,1.63,207,1.253,263,4.2,282,5.588,382,4.165,420,1.85,421,3.55,461,4.095,549,5.195,743,1.379,746,1.361,772,2.331,1058,2.302,1089,3.377,1090,3.829,1561,4.646]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data",[25,1.991,43,1.741,56,2.953,68,2.402,69,2.26,74,2.953,114,2.49,127,2.532,134,2.673,141,1.383,153,1.281,171,1.563,185,1.431,190,1.991,199,4.685,207,0.792,223,1.851,241,2.617,242,2.897,243,3.829,259,3.36,286,3.551,303,1.489,308,3.728,338,3.11,385,2.546,418,3.138,420,1.774,467,2.481,534,1.776,543,1.567,549,5.322,552,2.059,724,3.829,743,0.871,746,0.86,759,2.48,944,3.003,1010,3.325,1014,2.79,1020,1.897,1028,3.883,1035,3.138,1044,2.512,1058,2.575,1083,2.421,1436,3.496,1445,4,1458,2.996,1459,2.996,1561,2.937,1571,7.479,1572,8.274]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data",[1476,3.985]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data",[15,4.141,18,4.447,43,1.68,57,3.976,81,3.856,114,2.277,141,1.258,147,6.182,170,3.597,178,4.703,207,1.275,242,3.556,286,3.744,310,2.763,420,2.065,452,4.04,541,6.457,701,6.06,743,1.403,746,1.385,772,2.149,1014,2.148,1084,3.102,1304,5.628,1476,4.557,1561,4.727]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.json_validator",[]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send",[519,3.917]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send",[4,2.291,43,1.673,88,4.144,120,6.488,130,5.366,137,5.366,141,1.507,153,1.858,166,6.777,171,1.54,185,2.076,190,3.096,207,1.149,223,1.518,281,4.278,286,3.498,303,2.871,310,2.49,337,3.206,385,2.088,445,5.498,467,5.372,519,6.687,543,2.037,743,1.264,746,1.248,759,2.425,772,1.369,1058,2.806,1260,7.222,1553,6.345,1561,4.26,1567,5.48,1568,5.257]],["title/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call",[1569,5.101]],["text/reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call",[4,2.446,43,1.661,69,2.176,96,4.181,97,5.73,120,6.699,130,5.602,149,3.789,153,1.983,166,7.679,171,1.608,185,2.216,190,2.7,207,1.226,211,2.64,217,3.678,223,1.621,303,2.306,337,3.31,426,3.337,467,5.547,521,6.158,543,2.126,743,1.35,746,1.332,759,3.957,772,1.461,1260,6.298,1296,4.706,1553,6.623,1561,4.548,1568,5.612,1569,5.612]],["title/reference/types.html#openhivenpy.types.relationship.Relationship",[551,3.536]],["text/reference/types.html#openhivenpy.types.relationship.Relationship",[69,2.755,91,5.818,109,4.659,131,3.636,171,1.519,248,5.697,301,4.277,551,6.169,552,3.915,553,5.383,554,6.44,555,7.872,556,5.584,557,6.096,558,6.44,559,6.44,560,6.44,561,5.584,650,4.219]],["title/reference/types.html#openhivenpy.types.relationship.Relationship-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.relationship.Relationship-attributes",[]],["title/reference/types.html#openhivenpy.types.relationship.Relationship.id",[420,1.276]],["text/reference/types.html#openhivenpy.types.relationship.Relationship.id",[69,2.28,95,6.079,127,2.729,170,3.159,347,4.097,420,1.912,839,7.374,1187,6.453]],["title/reference/types.html#openhivenpy.types.relationship.Relationship.type",[171,1.124]],["text/reference/types.html#openhivenpy.types.relationship.Relationship.type",[69,2.521,91,6.005,109,4.808,171,1.568,301,4.358,551,5.86,552,4.041,553,5.556,554,6.647,555,7.978,556,5.764,557,6.292,558,6.647,559,6.647,560,6.647,561,5.764]],["title/reference/types.html#openhivenpy.types.relationship.Relationship.user",[69,1.521]],["text/reference/types.html#openhivenpy.types.relationship.Relationship.user",[69,2.347,242,3.215,839,7.592]],["title/reference/types.html#openhivenpy.types.relationship.Relationship.user_id",[347,2.734]],["text/reference/types.html#openhivenpy.types.relationship.Relationship.user_id",[69,2.347,420,1.969,839,7.592]],["title/reference/types.html#openhivenpy.types.relationship.Relationship-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.relationship.Relationship-methods",[]],["title/reference/types.html#openhivenpy.types.relationship.Relationship.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.relationship.Relationship.__init__",[43,1.747,69,1.71,71,3.024,100,2.498,114,2.341,171,1.263,207,1.253,347,3.072,551,3.975,562,5.531,743,1.379,746,1.361,771,3.65,772,2.387,774,3.741,1014,2.111,1084,3.048,1440,4.14,1465,4.95,1529,5.733,1534,6.28,1574,5.733,1575,6.688]],["title/reference/types.html#openhivenpy.types.relationship.Relationship.__repr__",[1089,3.004]],["text/reference/types.html#openhivenpy.types.relationship.Relationship.__repr__",[43,1.751,56,3.135,69,2.2,141,1.231,171,1.625,207,1.247,347,3.952,382,4.154,420,1.845,421,3.54,461,4.084,551,3.957,743,1.373,746,1.355,772,2.328,1058,2.292,1089,3.362,1090,3.813,1104,3.859,1574,5.708]],["title/reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data",[25,1.302,43,1.742,56,1.932,68,2.35,69,2.637,74,2.889,114,2.539,127,2.495,134,2.615,141,1.359,153,1.243,171,1.649,185,1.39,190,2.332,199,4.627,207,0.769,223,1.016,241,2.541,242,2.855,243,3.746,259,3.936,286,3.5,303,1.446,308,2.439,347,4.667,368,1.932,385,2.776,418,3.07,420,1.749,543,1.533,724,3.746,743,0.846,746,0.835,759,2.426,944,2.937,1010,3.253,1014,2.755,1020,1.842,1028,3.799,1035,3.07,1043,2.323,1044,3.647,1083,2.35,1218,3.038,1445,3.913,1446,2.909,1458,2.909,1459,2.909,1574,3.519]],["title/reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data",[1476,3.985]],["text/reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data",[15,4.141,18,4.447,43,1.68,57,3.976,81,3.856,114,2.277,141,1.258,147,6.182,170,3.597,178,4.703,207,1.275,242,3.556,286,3.744,310,2.763,347,3.126,420,1.871,452,4.04,541,6.457,701,6.06,743,1.403,746,1.385,772,2.149,1014,2.148,1084,3.102,1306,5.628,1476,4.557,1574,5.834]],["title/reference/types.html#openhivenpy.types.relationship.Relationship.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.relationship.Relationship.json_validator",[]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom",[1048,3.917]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom",[12,2.887,109,5.08,171,1.656,213,5.506,337,3.07,342,2.696,552,4.269,553,5.87,650,4.6,780,7.833,1577,8.766]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom-attributes",[]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.description",[543,1.487]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.description",[337,3.234,543,2.307]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.emoji",[544,3.737]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.emoji",[123,4.818,337,3.215,544,5.766]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.house",[342,1.83]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.house",[242,3.215,342,2.824,390,5.766]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.house_id",[545,2.237]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.house_id",[342,2.824,390,5.766,420,1.969]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.id",[420,1.276]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.id",[337,3.234,420,1.981]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.name",[223,1.473]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.name",[223,2.286,337,3.234]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.position",[548,3.255]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.position",[337,3.215,548,5.023,1470,8.621]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.type",[171,1.124]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.type",[171,1.714,337,3.177,552,4.419,1048,5.973,1578,9.073]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom-methods",[]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.__init__",[43,1.754,71,2.533,100,2.22,114,2.439,171,1.058,207,1.049,223,1.387,282,3.628,342,1.723,420,1.201,543,1.399,544,3.518,545,2.106,548,3.064,743,1.155,746,1.14,771,3.244,772,2.451,774,3.133,1014,1.768,1048,3.687,1057,3.687,1084,2.553,1440,3.467,1455,4.36,1456,4.146,1465,4.146,1468,4.802,1473,5.26,1475,4.487,1562,5.005,1564,5.005,1579,4.247]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__",[1089,3.004]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__",[43,1.754,56,2.875,141,1.129,171,1.536,207,1.144,223,2.013,337,2.139,382,3.925,420,1.744,421,3.345,461,3.859,543,2.031,544,5.106,545,3.056,548,4.448,743,1.259,746,1.243,772,2.413,1058,2.799,1089,3.084,1090,3.497,1579,4.632]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.edit",[1295,4.306]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.edit",[4,1.795,12,2.268,25,1.524,43,1.747,45,3.531,81,2.123,96,3.383,114,1.543,116,4.144,149,3.584,171,0.908,177,4.39,190,1.524,207,0.9,211,3.245,214,3.189,217,2.976,223,1.992,299,1.963,310,2.795,330,2.207,337,3.258,368,2.261,420,1.03,434,3.337,529,3.578,534,2.893,543,2.196,544,5.055,711,7.057,743,0.99,746,0.977,759,3.679,772,1.962,813,2.207,1024,2.425,1025,2.425,1026,3.476,1027,2.425,1073,2.139,1084,2.189,1090,2.75,1104,2.784,1295,3.476,1296,3.808,1297,4.118,1579,3.642]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data",[25,1.483,43,1.737,56,2.2,68,2.585,74,3.178,114,2.522,127,2.656,134,2.876,141,1.465,153,1.416,171,1.497,185,1.582,190,2.515,199,4.88,207,0.875,223,1.157,241,2.893,242,2.364,243,4.12,259,3.615,286,3.725,303,1.646,308,2.777,342,3.173,385,2.698,420,1.448,543,1.687,545,3.806,724,4.12,743,0.963,746,0.951,759,1.848,944,3.231,1010,3.578,1014,2.906,1020,2.097,1028,2.893,1035,3.377,1044,2.777,1083,2.676,1445,4.304,1446,3.312,1458,3.312,1459,3.312,1579,3.544]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data",[1476,3.985]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data",[15,4.141,18,4.447,43,1.68,57,3.976,81,3.856,114,2.277,141,1.258,147,6.182,170,3.597,178,4.703,207,1.275,242,3.556,286,3.744,310,2.763,420,2.065,452,4.04,541,6.457,701,6.06,743,1.403,746,1.385,772,2.149,1014,2.148,1084,3.102,1307,5.297,1476,4.557,1579,5.16]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages",[1580,5.588]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages",[4,1.835,43,1.738,88,3.949,96,3.436,114,1.826,134,2.092,141,1.506,149,3.628,171,1.321,207,0.92,211,3.285,214,3.239,217,3.023,275,3.67,281,3.67,286,3.002,299,2.007,310,1.993,330,2.256,337,2.853,338,4.038,342,1.51,354,3.479,368,2.311,420,1.053,486,4.53,534,2.938,543,1.747,701,4.858,724,4.269,743,1.012,744,5.603,746,0.999,759,3.51,772,2.094,813,2.256,1024,2.479,1025,2.479,1026,3.531,1027,2.479,1035,2.456,1073,3.115,1084,3.188,1104,2.845,1135,5.603,1296,3.868,1301,5.419,1579,3.723,1580,4.611,1581,4.91,1582,8.146]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.json_validator",[]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.send",[519,3.917]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.send",[4,1.61,43,1.74,56,2.029,74,2.995,88,4.032,114,2.09,130,4.189,137,4.189,141,1.398,149,1.919,153,1.305,166,6.901,171,1.202,185,1.459,190,2.4,207,0.807,211,2.566,214,2.947,223,1.067,242,2.228,275,3.339,281,3.339,299,2.601,301,2.812,303,2.241,305,3.355,308,2.561,310,1.75,330,1.98,337,2.925,363,2.498,368,2.029,385,1.467,412,2.938,420,0.924,445,5.22,468,2.791,509,2.707,519,6.138,534,2.673,543,1.59,743,0.888,746,0.877,759,1.704,772,1.988,813,1.98,1020,1.934,1024,2.176,1025,2.176,1026,3.213,1027,2.176,1058,2.19,1073,3.369,1084,2.9,1104,2.498,1148,3.355,1260,6.182,1301,4.617,1338,4.825,1553,4.953,1567,3.851,1579,3.268]],["title/reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing",[1583,5.588]],["text/reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing",[4,2.139,14,3.318,43,1.725,67,3.448,68,3.634,69,2.426,96,3.824,100,2.253,102,3.495,113,4.404,134,2.44,149,3.938,171,1.793,190,1.817,207,1.072,211,3.566,214,3.604,217,3.365,289,3.359,330,2.63,337,2.005,338,3.859,342,1.761,354,4.057,368,2.695,420,1.228,468,3.708,529,2.975,534,3.27,543,1.43,737,3.977,743,1.18,746,1.165,759,3.752,772,2.118,813,2.63,1024,2.891,1025,2.891,1026,3.93,1027,2.891,1073,2.55,1084,2.61,1104,3.318,1296,4.305,1340,5.902,1579,4.341,1583,5.376]],["title/reference/types.html#openhivenpy.types.user.User",[69,1.521]],["text/reference/types.html#openhivenpy.types.user.User",[12,2.989,69,2.32,498,6.303,650,4.762,1002,8.108]],["title/reference/types.html#openhivenpy.types.user.User-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.user.User-attributes",[]],["title/reference/types.html#openhivenpy.types.user.User.blocked",[561,4.133]],["text/reference/types.html#openhivenpy.types.user.User.blocked",[69,2.334,141,1.687,561,6.34,972,5.65]],["title/reference/types.html#openhivenpy.types.user.User.email",[430,4.306]],["text/reference/types.html#openhivenpy.types.user.User.email",[69,2.32,100,2.627,151,5.973,214,4.202,1237,8.108]],["title/reference/types.html#openhivenpy.types.user.User.location",[427,3.917]],["text/reference/types.html#openhivenpy.types.user.User.location",[69,2.347,98,4.511,427,6.044]],["title/reference/types.html#openhivenpy.types.user.User.mfa_enabled",[432,4.512]],["text/reference/types.html#openhivenpy.types.user.User.mfa_enabled",[141,1.687,972,5.65,1245,7.548,1247,8.155]],["title/reference/types.html#openhivenpy.types.user.User.presence",[202,3.491]],["text/reference/types.html#openhivenpy.types.user.User.presence",[69,2.347,202,5.387,275,4.818]],["title/reference/types.html#openhivenpy.types.user.User.website",[428,3.683]],["text/reference/types.html#openhivenpy.types.user.User.website",[69,2.347,98,4.511,428,5.683]],["title/reference/types.html#openhivenpy.types.user.User-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.user.User-methods",[]],["title/reference/types.html#openhivenpy.types.user.User.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.user.User.__init__",[43,1.751,69,1.593,71,2.818,100,2.385,114,2.435,202,3.656,207,1.167,427,4.102,428,3.857,430,4.509,432,4.725,561,4.329,743,1.284,746,1.268,771,3.485,772,2.388,774,3.486,1014,1.967,1440,3.857,1585,4.85,1586,6.231,1587,6.231,1588,6.231,1589,6.231,1590,6.231,1591,6.231]],["title/reference/types.html#openhivenpy.types.user.User.__repr__",[1089,3.004]],["text/reference/types.html#openhivenpy.types.user.User.__repr__",[43,1.753,56,2.981,69,1.619,131,3.765,141,1.171,207,1.186,223,2.061,300,3.736,309,4.284,382,4.02,420,1.786,421,3.426,423,4.244,461,3.952,743,1.305,746,1.288,772,2.397,1058,2.18,1089,3.198,1090,3.626,1585,4.93]],["title/reference/types.html#openhivenpy.types.user.User.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.user.User.format_obj_data",[43,1.683,68,3.089,74,3.797,114,2.54,127,2.967,134,3.437,141,1.679,153,1.829,171,1.524,185,2.044,199,5.356,207,1.131,223,1.495,241,3.737,242,2.825,243,4.924,259,4.32,286,4.161,303,2.126,385,3.093,543,2.015,724,4.924,743,1.245,746,1.228,944,3.861,1010,4.276,1014,3.061,1020,3.62,1035,4.035,1340,4.578,1445,5.143,1585,4.699]],["title/reference/types.html#openhivenpy.types.user.User.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.user.User.json_validator",[]],["title/reference/types.html#openhivenpy.types.user.LazyUser",[1340,4.512]],["text/reference/types.html#openhivenpy.types.user.LazyUser",[12,2.778,49,4.717,68,3.813,69,2.546,114,2.232,235,4.828,242,2.953,289,4.948,452,3.905,498,5.858,508,7.229,529,4.382,536,6.974,650,4.425,1593,8.432]],["title/reference/types.html#openhivenpy.types.user.LazyUser-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.user.LazyUser-attributes",[]],["title/reference/types.html#openhivenpy.types.user.LazyUser.account",[73,3.583]],["text/reference/types.html#openhivenpy.types.user.LazyUser.account",[73,5.432,100,2.612,141,1.668,151,5.939,275,4.734,1228,8.061]],["title/reference/types.html#openhivenpy.types.user.LazyUser.application",[72,4.306]],["text/reference/types.html#openhivenpy.types.user.LazyUser.application",[25,2.846,72,6.49,100,2.597,141,1.658,151,5.904,203,5.904,275,4.707]],["title/reference/types.html#openhivenpy.types.user.LazyUser.bio",[429,3.794]],["text/reference/types.html#openhivenpy.types.user.LazyUser.bio",[69,2.361,429,5.889]],["title/reference/types.html#openhivenpy.types.user.LazyUser.bot",[131,2.691]],["text/reference/types.html#openhivenpy.types.user.LazyUser.bot",[69,2.334,131,4.128,141,1.687,158,4.696]],["title/reference/types.html#openhivenpy.types.user.LazyUser.email_verified",[431,4.056]],["text/reference/types.html#openhivenpy.types.user.LazyUser.email_verified",[141,1.687,158,4.696,430,6.605,1238,8.155]],["title/reference/types.html#openhivenpy.types.user.LazyUser.flags",[77,3.123]],["text/reference/types.html#openhivenpy.types.user.LazyUser.flags",[69,2.32,77,4.762,650,4.762,1239,8.108,1240,8.108]],["title/reference/types.html#openhivenpy.types.user.LazyUser.header",[300,2.67]],["text/reference/types.html#openhivenpy.types.user.LazyUser.header",[69,2.347,300,4.12,1241,7.592]],["title/reference/types.html#openhivenpy.types.user.LazyUser.icon",[423,3.033]],["text/reference/types.html#openhivenpy.types.user.LazyUser.icon",[69,2.347,423,4.679,1241,7.592]],["title/reference/types.html#openhivenpy.types.user.LazyUser.id",[420,1.276]],["text/reference/types.html#openhivenpy.types.user.LazyUser.id",[69,2.334,203,6.008,420,1.957,579,7.105]],["title/reference/types.html#openhivenpy.types.user.LazyUser.name",[223,1.473]],["text/reference/types.html#openhivenpy.types.user.LazyUser.name",[69,2.361,223,2.286]],["title/reference/types.html#openhivenpy.types.user.LazyUser.user_flags",[79,4.632]],["text/reference/types.html#openhivenpy.types.user.LazyUser.user_flags",[77,4.847,1187,6.684]],["title/reference/types.html#openhivenpy.types.user.LazyUser.username",[309,3.062]],["text/reference/types.html#openhivenpy.types.user.LazyUser.username",[69,2.361,309,4.752]],["title/reference/types.html#openhivenpy.types.user.LazyUser-methods",[298,2.17]],["text/reference/types.html#openhivenpy.types.user.LazyUser-methods",[]],["title/reference/types.html#openhivenpy.types.user.LazyUser.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.user.LazyUser.__init__",[43,1.754,69,1.387,71,2.453,77,3.936,100,2.172,101,3.001,114,2.423,131,2.453,207,1.016,223,1.343,300,2.435,309,2.792,420,1.163,423,2.765,429,3.459,431,3.698,717,4.848,743,1.118,746,1.104,771,3.174,772,2.437,774,3.035,900,4.848,1014,1.712,1057,3.571,1084,2.473,1340,4.114,1440,3.358,1475,4.346,1510,5.094,1585,4.223,1594,5.425,1595,5.425,1596,5.425,1597,5.425,1598,5.425,1599,5.425,1600,5.425,1601,5.425]],["title/reference/types.html#openhivenpy.types.user.LazyUser.__repr__",[1089,3.004]],["text/reference/types.html#openhivenpy.types.user.LazyUser.__repr__",[43,1.753,56,2.981,131,3.765,141,1.171,207,1.186,223,2.061,300,3.736,309,4.284,382,4.02,420,1.786,421,3.426,423,4.244,461,3.952,743,1.305,746,1.288,772,2.397,1058,2.18,1089,3.198,1090,3.626,1340,4.802,1585,4.93]],["title/reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data",[1020,2.67]],["text/reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data",[43,1.658,68,3.155,74,3.878,114,2.524,127,3.005,134,3.51,141,1.706,153,1.887,171,1.556,185,2.11,199,5.413,207,1.167,223,1.543,241,3.857,242,2.885,243,5.028,259,4.412,286,4.214,303,2.194,385,3.142,543,2.058,724,5.028,743,1.284,746,1.268,944,3.943,1010,4.367,1014,3.099,1020,2.796,1035,4.121,1445,5.253,1585,4.85]],["title/reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data",[1476,3.985]],["text/reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data",[15,4.141,18,4.447,43,1.68,57,3.976,81,3.856,114,2.277,141,1.258,147,6.182,170,3.597,178,4.703,207,1.275,242,3.556,286,3.744,310,2.763,420,2.065,452,4.04,541,6.457,701,6.06,743,1.403,746,1.385,772,2.149,1014,2.148,1039,5.297,1084,3.102,1476,4.557,1585,5.297]],["title/reference/types.html#openhivenpy.types.user.LazyUser.json_validator",[1447,3.794]],["text/reference/types.html#openhivenpy.types.user.LazyUser.json_validator",[]],["title/reference/types.html#openhivenpy.types.usertyping.UserTyping",[1437,5.317]],["text/reference/types.html#openhivenpy.types.usertyping.UserTyping",[12,2.989,69,2.32,171,1.714,337,3.177,650,4.762]],["title/reference/types.html#openhivenpy.types.usertyping.UserTyping-attributes",[348,3.255]],["text/reference/types.html#openhivenpy.types.usertyping.UserTyping-attributes",[]],["title/reference/types.html#openhivenpy.types.usertyping.UserTyping.author",[384,2.95]],["text/reference/types.html#openhivenpy.types.usertyping.UserTyping.author",[68,3.475,69,2.32,171,1.714,242,3.177,384,4.498]],["title/reference/types.html#openhivenpy.types.usertyping.UserTyping.author_id",[265,3.536]],["text/reference/types.html#openhivenpy.types.usertyping.UserTyping.author_id",[68,3.455,242,3.159,384,4.472,390,5.666,420,1.935,1431,6.266]],["title/reference/types.html#openhivenpy.types.usertyping.UserTyping.house",[342,1.83]],["text/reference/types.html#openhivenpy.types.usertyping.UserTyping.house",[68,3.495,242,3.196,342,2.807,1431,6.34]],["title/reference/types.html#openhivenpy.types.usertyping.UserTyping.house_id",[545,2.237]],["text/reference/types.html#openhivenpy.types.usertyping.UserTyping.house_id",[68,3.455,242,3.159,342,2.775,390,5.666,420,1.935,1431,6.266]],["title/reference/types.html#openhivenpy.types.usertyping.UserTyping.is_house_typing",[1603,5.95]],["text/reference/types.html#openhivenpy.types.usertyping.UserTyping.is_house_typing",[141,1.677,171,1.714,213,5.699,342,2.791,972,5.617]],["title/reference/types.html#openhivenpy.types.usertyping.UserTyping.room",[337,2.084]],["text/reference/types.html#openhivenpy.types.usertyping.UserTyping.room",[68,3.495,242,3.196,337,3.196,1431,6.34]],["title/reference/types.html#openhivenpy.types.usertyping.UserTyping.room_id",[455,2.977]],["text/reference/types.html#openhivenpy.types.usertyping.UserTyping.room_id",[68,3.455,242,3.159,337,3.159,390,5.666,420,1.935,1431,6.266]],["title/reference/types.html#openhivenpy.types.usertyping.UserTyping.timestamp",[465,3.407]],["text/reference/types.html#openhivenpy.types.usertyping.UserTyping.timestamp",[69,2.32,133,4.762,171,1.714,1402,7.063,1449,8.521]],["title/reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__",[771,2.517]],["text/reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__",[43,1.752,71,2.709,100,2.323,114,2.414,207,1.122,265,3.56,337,2.098,342,1.843,384,2.97,455,2.997,465,3.43,545,2.252,743,1.235,746,1.219,771,3.395,772,2.434,774,3.351,1014,1.891,1084,2.73,1437,5.353,1440,3.708,1451,5.135,1452,5.135,1453,5.135,1454,5.135,1455,4.663,1456,4.434,1457,5.135,1604,5.626]],["title/reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__",[1089,3.004]],["text/reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__",[43,1.751,56,3.135,141,1.231,171,1.258,207,1.247,265,5.113,382,4.154,384,4.265,421,3.54,455,4.304,461,4.084,545,3.234,743,1.373,746,1.355,772,2.328,1058,2.292,1089,3.362,1090,3.813,1104,3.859,1604,6.253]],["title/setup/index.html",[131,1.974,767,3.741]],["text/setup/index.html",[43,1.291,47,4.6,131,3.964,372,4.385,373,4.695,374,4.903,500,5.143,515,5.426,529,4.555,767,7.514,792,5.87]],["title/setup/index.html#setup-of-a-bot",[131,1.974,767,3.741]],["text/setup/index.html#setup-of-a-bot",[47,4.679,372,4.461,373,4.776,374,4.988,500,5.232,515,5.52,529,4.633,792,5.971]]],"fields":["title","text"],"invertedIndex":[["",{"_index":43,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/hiven_swarm.html":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#entity":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#member":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#relationship":{},"api_reference/object_reference.html#role":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_delete":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_leave":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_delete":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#role_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_delete":{},"api_reference/swarm_events.html#room_update":{},"api_reference/swarm_events.html#typing_start":{},"api_reference/swarm_events.html#user_update":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_4":{},"changelog.html#changed":{},"changelog.html#changed_5":{},"changelog.html#changelog":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/event_handling.html":{},"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#installation":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"getting_started/logging.html#simple-example-of-logging":{},"home/bug_reporting.html":{},"home/contributing.html":{},"home/license.html":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/events.html":{},"reference/events.html#hiveneventhandler-and-listeners":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__str__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.__init__":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__str__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__str__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.feed.Feed.__init__":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__str__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__str__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__str__":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{},"setup/index.html":{}},"title":{}}],["0",{"_index":552,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_delete":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_leave":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_delete":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#role_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_delete":{},"api_reference/swarm_events.html#room_update":{},"api_reference/swarm_events.html#typing_start":{},"api_reference/swarm_events.html#user_update":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{},"reference/types.html#openhivenpy.types.textroom.TextRoom":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.type":{}},"title":{}}],["0.1",{"_index":1409,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["02",{"_index":232,"text":{"changelog.html":{}},"title":{"changelog.html#v012-2021-02-03":{},"changelog.html#v013-2021-02-16":{}}}],["03",{"_index":292,"text":{"changelog.html":{}},"title":{"changelog.html#v012-2021-02-03":{}}}],["04",{"_index":197,"text":{"changelog.html":{}},"title":{"changelog.html#v0131-2021-04-09":{},"changelog.html#v0132-2021-04-09":{}}}],["05",{"_index":1149,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{}},"title":{}}],["08",{"_index":64,"text":{"changelog.html":{}},"title":{"changelog.html#v02dev1-2021-08-13":{},"changelog.html#v02dev2-2021-08-23":{}}}],["09",{"_index":198,"text":{"changelog.html":{}},"title":{"changelog.html#v0131-2021-04-09":{},"changelog.html#v0132-2021-04-09":{}}}],["1",{"_index":553,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{},"reference/types.html#openhivenpy.types.textroom.TextRoom":{}},"title":{}}],["1000",{"_index":1219,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{}},"title":{}}],["128",{"_index":825,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{}},"title":{}}],["13",{"_index":83,"text":{"changelog.html":{}},"title":{"changelog.html#v02dev1-2021-08-13":{}}}],["15",{"_index":1369,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["16",{"_index":233,"text":{"changelog.html":{}},"title":{"changelog.html#v013-2021-02-16":{}}}],["2",{"_index":556,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/index.html":{},"getting_started/index.html#environment":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{}},"title":{}}],["200",{"_index":415,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersmerooms":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["2020",{"_index":933,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["2021",{"_index":63,"text":{"changelog.html":{},"home/license.html":{},"home/license.html#license":{}},"title":{"changelog.html#v012-2021-02-03":{},"changelog.html#v013-2021-02-16":{},"changelog.html#v0131-2021-04-09":{},"changelog.html#v0132-2021-04-09":{},"changelog.html#v02dev1-2021-08-13":{},"changelog.html#v02dev2-2021-08-23":{}}}],["204",{"_index":1388,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["23",{"_index":65,"text":{"changelog.html":{}},"title":{"changelog.html#v02dev2-2021-08-23":{}}}],["3",{"_index":557,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/index.html":{},"getting_started/index.html#environment":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{}},"title":{}}],["3.7",{"_index":226,"text":{"changelog.html":{},"changelog.html#changed_3":{},"getting_started/index.html":{},"getting_started/index.html#environment":{}},"title":{}}],["30",{"_index":1366,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["30000",{"_index":1259,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["36",{"_index":277,"text":{"changelog.html":{},"changelog.html#changed_4":{}},"title":{}}],["37",{"_index":245,"text":{"changelog.html":{},"changelog.html#added_4":{}},"title":{}}],["4",{"_index":558,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{}},"title":{}}],["40",{"_index":1264,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["400",{"_index":377,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersmerooms":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{}}}],["401",{"_index":1397,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["403",{"_index":444,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["404",{"_index":391,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{"api_reference/hiven_exceptions.html#404-not-found-not_found":{}}}],["415",{"_index":400,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{}},"title":{"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{}}}],["427",{"_index":986,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["429",{"_index":152,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["451",{"_index":1411,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["46",{"_index":239,"text":{"changelog.html":{},"changelog.html#added_4":{}},"title":{}}],["5",{"_index":560,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{}},"title":{}}],["500",{"_index":1413,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["68",{"_index":221,"text":{"changelog.html":{},"changelog.html#changed_3":{}},"title":{}}],["69",{"_index":201,"text":{"changelog.html":{},"changelog.html#added_2":{}},"title":{}}],["8",{"_index":874,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["_",{"_index":1135,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{}},"title":{}}],["__call__",{"_index":1078,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{}},"title":{"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{}}}],["__class__",{"_index":1092,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__str__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{}},"title":{}}],["__init__",{"_index":771,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.__init__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.feed.Feed.__init__":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.feed.Feed.__init__":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}}}],["__main__",{"_index":778,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["__name__",{"_index":777,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__str__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{}},"title":{}}],["__repr__",{"_index":1089,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}}}],["__str__",{"_index":1091,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__str__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__str__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__str__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__str__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__str__":{},"reference/types.html#openhivenpy.types.message.Message.__str__":{}},"title":{"reference/events.html#openhivenpy.events.DispatchEventListener.__str__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__str__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__str__":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__str__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__str__":{},"reference/types.html#openhivenpy.types.message.Message.__str__":{}}}],["_active_listen",{"_index":1116,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners":{}},"title":{}}],["_api_vers",{"_index":1276,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["_arg",{"_index":1109,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{}},"title":{}}],["_attach",{"_index":1542,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{}},"title":{}}],["_author",{"_index":1453,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{}}],["_author_id",{"_index":1454,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{}}],["_available_ev",{"_index":1117,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{}},"title":{}}],["_await",{"_index":1086,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{}},"title":{}}],["_banner",{"_index":1488,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.__init__":{}},"title":{}}],["_bio",{"_index":1595,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{}},"title":{}}],["_block",{"_index":1588,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.User.__init__":{}},"title":{}}],["_bot",{"_index":1601,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{}},"title":{}}],["_bucket",{"_index":1549,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{}},"title":{}}],["_client",{"_index":1084,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{}}],["_client_memb",{"_index":1487,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.__init__":{}},"title":{}}],["_client_us",{"_index":1267,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{}},"title":{}}],["_close_timeout",{"_index":1280,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["_code",{"_index":1519,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{}},"title":{}}],["_connect",{"_index":1268,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["_content",{"_index":1543,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{}},"title":{}}],["_created_at",{"_index":1520,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{}},"title":{}}],["_default_permiss",{"_index":1484,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.__init__":{}},"title":{}}],["_descript",{"_index":1468,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{}},"title":{}}],["_device_id",{"_index":1550,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{}},"title":{}}],["_dispatch",{"_index":1107,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{}},"title":{}}],["_edited_at",{"_index":1544,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{}},"title":{}}],["_email",{"_index":1590,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.User.__init__":{}},"title":{}}],["_email_verifi",{"_index":1596,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{}},"title":{}}],["_emb",{"_index":1548,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{}},"title":{}}],["_emoji",{"_index":1564,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{}},"title":{}}],["_empti",{"_index":1147,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{}},"title":{}}],["_entiti",{"_index":1483,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{}},"title":{}}],["_error",{"_index":1417,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["_event_data",{"_index":1108,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{}},"title":{}}],["_event_nam",{"_index":1085,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{}},"title":{}}],["_explod",{"_index":1547,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{}},"title":{}}],["_exploding_ag",{"_index":1551,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{}},"title":{}}],["_filenam",{"_index":1441,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{}},"title":{}}],["_flag",{"_index":1599,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{}},"title":{}}],["_get_from_client_buff",{"_index":1165,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{}}],["_header",{"_index":1600,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{}},"title":{}}],["_heartbeat",{"_index":1278,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["_host",{"_index":1272,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["_hous",{"_index":1455,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{}}],["_house_id",{"_index":1456,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{}}],["_house_memb",{"_index":1523,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{}},"title":{}}],["_icon",{"_index":1510,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{}},"title":{}}],["_id",{"_index":1057,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{}},"title":{}}],["_imag",{"_index":1467,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{}},"title":{}}],["_joined_at",{"_index":1530,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{}},"title":{}}],["_json_data",{"_index":1403,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["_kwarg",{"_index":1110,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{}},"title":{}}],["_last_message_id",{"_index":1562,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{}},"title":{}}],["_last_updated_at",{"_index":1575,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{}},"title":{}}],["_locat",{"_index":1586,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.User.__init__":{}},"title":{}}],["_log_websocket",{"_index":1270,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["_loop",{"_index":1266,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["_max_ag",{"_index":1521,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{}},"title":{}}],["_max_us",{"_index":1522,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{}},"title":{}}],["_media_url",{"_index":1442,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{}},"title":{}}],["_member",{"_index":1485,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.__init__":{}},"title":{}}],["_member_data",{"_index":1486,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.__init__":{}},"title":{}}],["_mention",{"_index":1545,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{}},"title":{}}],["_message_id",{"_index":1537,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{}},"title":{}}],["_mfa_en",{"_index":1591,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.User.__init__":{}},"title":{}}],["_name",{"_index":1475,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{}},"title":{}}],["_non_buffer_ev",{"_index":1118,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{}},"title":{}}],["_owner",{"_index":1489,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{}},"title":{}}],["_owner_id",{"_index":1511,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{}},"title":{}}],["_posit",{"_index":1473,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{}},"title":{}}],["_presenc",{"_index":1589,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.User.__init__":{}},"title":{}}],["_queue_ev",{"_index":1271,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["_raw",{"_index":1443,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{}},"title":{}}],["_readi",{"_index":1351,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["_recipi",{"_index":1563,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{}},"title":{}}],["_recipient_id",{"_index":1552,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{}},"title":{}}],["_request",{"_index":1354,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{}},"title":{}}],["_resource_point",{"_index":1474,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{}},"title":{}}],["_resp",{"_index":1395,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["_role",{"_index":1481,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{}},"title":{}}],["_roles_data",{"_index":1482,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.__init__":{}},"title":{}}],["_room",{"_index":1451,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{}}],["_room_id",{"_index":1452,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{}}],["_session",{"_index":1352,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["_storag",{"_index":1269,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["_success",{"_index":1416,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["_timeout",{"_index":1392,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["_timestamp",{"_index":1457,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{}}],["_titl",{"_index":1466,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{}},"title":{}}],["_token",{"_index":773,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["_type",{"_index":1465,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{}},"title":{}}],["_url",{"_index":1464,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{}},"title":{}}],["_user",{"_index":1534,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{}},"title":{}}],["_user_id",{"_index":1529,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{}},"title":{}}],["_usernam",{"_index":1594,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{}},"title":{}}],["_validate_existence_of_ev",{"_index":1134,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{}},"title":{}}],["_websit",{"_index":1587,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.User.__init__":{}},"title":{}}],["abil",{"_index":794,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{}},"title":{}}],["abov",{"_index":954,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["abstracteventloop",{"_index":1246,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{}},"title":{}}],["access",{"_index":412,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.attachment.Attachment.media_url":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{}}],["accordingli",{"_index":786,"text":{"getting_started/index.html":{},"getting_started/index.html#hiven-types":{}},"title":{}}],["account",{"_index":73,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#added":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.account":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.account":{}},"title":{"getting_started/deploying_your_first_bot.html#creating-a-bot-account":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.account":{},"reference/types.html#openhivenpy.types.user.LazyUser.account":{}}}],["ack",{"_index":1558,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{}},"title":{}}],["action",{"_index":973,"text":{"home/license.html":{},"home/license.html#license":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{}},"title":{}}],["activ",{"_index":850,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{}},"title":{}}],["active_listen",{"_index":1112,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{}},"title":{"reference/events.html#openhivenpy.events.HivenEventHandler.active_listeners":{}}}],["actual",{"_index":736,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{}},"title":{}}],["ad",{"_index":66,"text":{"changelog.html":{},"changelog.html#added":{},"changelog.html#added_1":{},"changelog.html#added_5":{},"changelog.html#changed_5":{},"changelog.html#removed":{},"changelog.html#removed_4":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-botclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{"changelog.html#added":{},"changelog.html#added_1":{},"changelog.html#added_2":{},"changelog.html#added_3":{},"changelog.html#added_4":{},"changelog.html#added_5":{}}}],["add",{"_index":113,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"changelog.html":{},"changelog.html#added_1":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["add_listen",{"_index":1088,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{}},"title":{"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{}}}],["add_multi_listen",{"_index":161,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{}},"title":{"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{}}}],["add_new_ev",{"_index":1138,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{}}],["add_or_update_ent",{"_index":1017,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{}}}],["add_or_update_hous",{"_index":1029,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{}}}],["add_or_update_house_memb",{"_index":1037,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{}}}],["add_or_update_private_room",{"_index":1041,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{}}}],["add_or_update_relationship",{"_index":1046,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{}}}],["add_or_update_room",{"_index":1030,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{}}}],["add_or_update_us",{"_index":1031,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{}}}],["add_single_listen",{"_index":162,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{}},"title":{"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{}}}],["addhandl",{"_index":883,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["addit",{"_index":514,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["addition",{"_index":1145,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["adher",{"_index":60,"text":{"changelog.html":{},"changelog.html#changelog":{}},"title":{}}],["advanc",{"_index":865,"text":{"getting_started/logging.html":{}},"title":{"getting_started/logging.html#advanced-logging":{}}}],["affect",{"_index":329,"text":{"changelog.html":{},"changelog.html#changed_5":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{}},"title":{}}],["ag",{"_index":1540,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.exploding_age":{}},"title":{}}],["aiohttp",{"_index":685,"text":{"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#installation":{},"getting_started/index.html#the-hiven-swarm":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.session":{}},"title":{}}],["aiohttp.clientrespons",{"_index":1377,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["aiohttp.clientsess",{"_index":1356,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["aka",{"_index":604,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type":{}},"title":{}}],["alia",{"_index":1187,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.user_flags":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.users":{},"reference/types.html#openhivenpy.types.member.Member.id":{},"reference/types.html#openhivenpy.types.member.Member.joined_house_at":{},"reference/types.html#openhivenpy.types.relationship.Relationship.id":{},"reference/types.html#openhivenpy.types.user.LazyUser.user_flags":{}},"title":{}}],["aliv",{"_index":726,"text":{"getting_started/index.html":{},"getting_started/index.html#the-hiven-swarm":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["allow",{"_index":304,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#role":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#role_update":{},"changelog.html":{},"changelog.html#added_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.delete":{}},"title":{}}],["alreadi",{"_index":488,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#hiven-types":{},"home/contributing.html":{},"home/contributing.html#summary":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{}},"title":{}}],["alter",{"_index":1036,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{}},"title":{}}],["alway",{"_index":1578,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.type":{}},"title":{}}],["amount",{"_index":1250,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.startup_time":{}},"title":{}}],["and/or",{"_index":948,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["anoth",{"_index":248,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"changelog.html":{},"changelog.html#added_4":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{}},"title":{}}],["api",{"_index":5,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"changelog.html":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{},"index.html":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.api_version":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_room":{}},"title":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#api-request-endpoints":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{}}}],["api.hiven.io",{"_index":482,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{}},"title":{}}],["api_url",{"_index":1349,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["api_vers",{"_index":1229,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.api_version":{}}}],["append",{"_index":1035,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{}}],["appli",{"_index":733,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["applic",{"_index":72,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"changelog.html":{},"changelog.html#added":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.botclient.BotClient":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.application":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.application":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.application":{},"reference/types.html#openhivenpy.types.user.LazyUser.application":{}}}],["application/json",{"_index":497,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{}},"title":{}}],["appropri",{"_index":1019,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{}},"title":{}}],["area",{"_index":396,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["arg",{"_index":115,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{"reference/events.html#openhivenpy.events.SingleDispatchEventListener.args":{}}}],["argument",{"_index":24,"text":{"changelog.html":{},"changelog.html#added_5":{},"index.html":{}},"title":{}}],["aris",{"_index":977,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["asctime)",{"_index":879,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["ask",{"_index":906,"text":{"home/contributing.html":{},"home/contributing.html#issue-page":{}},"title":{}}],["assign",{"_index":123,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#role":{},"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.emoji":{}},"title":{}}],["associ",{"_index":943,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["async",{"_index":4,"text":{"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#installation":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#using-a-userclient":{},"index.html":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["asyncio",{"_index":363,"text":{"changelog.html":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"getting_started/index.html#quickstart":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.loop":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.loop":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{}}],["asyncio.create_task",{"_index":224,"text":{"changelog.html":{},"changelog.html#changed_3":{}},"title":{}}],["asyncio.get_event_loop",{"_index":1320,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["asyncio.task",{"_index":1383,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["asyncio.wait_for",{"_index":290,"text":{"changelog.html":{},"changelog.html#removed_3":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["attach",{"_index":456,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/object_reference.html":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.attachment.Attachment":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.attachment":{}},"title":{"api_reference/object_reference.html#attachment":{},"reference/types.html#openhivenpy.types.attachment.Attachment":{},"reference/types.html#openhivenpy.types.message.Message.attachment":{}}}],["attribut",{"_index":348,"text":{"changelog.html":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"reference/hiven_parsers.html":{},"reference/hivenclient.html":{},"reference/http.html":{},"reference/types.html":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers-attributes":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient-attributes":{},"reference/http.html#openhivenpy.gateway.http.HTTP-attributes":{},"reference/types.html#openhivenpy.types.attachment.Attachment-attributes":{},"reference/types.html#openhivenpy.types.context.Context-attributes":{},"reference/types.html#openhivenpy.types.embed.Embed-attributes":{},"reference/types.html#openhivenpy.types.entity.Entity-attributes":{},"reference/types.html#openhivenpy.types.house.House-attributes":{},"reference/types.html#openhivenpy.types.house.LazyHouse-attributes":{},"reference/types.html#openhivenpy.types.member.Member-attributes":{},"reference/types.html#openhivenpy.types.mention.Mention-attributes":{},"reference/types.html#openhivenpy.types.message.DeletedMessage-attributes":{},"reference/types.html#openhivenpy.types.message.Message-attributes":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom-attributes":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom-attributes":{},"reference/types.html#openhivenpy.types.relationship.Relationship-attributes":{},"reference/types.html#openhivenpy.types.textroom.TextRoom-attributes":{},"reference/types.html#openhivenpy.types.user.LazyUser-attributes":{},"reference/types.html#openhivenpy.types.user.User-attributes":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping-attributes":{}}}],["auth",{"_index":485,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{}},"title":{}}],["authent",{"_index":381,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_restapi.html":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{}},"title":{"api_reference/hiven_restapi.html#authentication-header":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{}}}],["author",{"_index":384,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/license.html":{},"home/license.html#license":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.author":{},"reference/types.html#openhivenpy.types.context.Context.author_id":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.author":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__str__":{},"reference/types.html#openhivenpy.types.message.Message.author":{},"reference/types.html#openhivenpy.types.message.Message.author_id":{},"reference/types.html#openhivenpy.types.message.Message.device_id":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.author":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.author_id":{}},"title":{"reference/types.html#openhivenpy.types.context.Context.author":{},"reference/types.html#openhivenpy.types.mention.Mention.author":{},"reference/types.html#openhivenpy.types.message.Message.author":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.author":{}}}],["author_id",{"_index":265,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#typing_start":{},"changelog.html":{},"changelog.html#added_4":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{"reference/types.html#openhivenpy.types.context.Context.author_id":{},"reference/types.html#openhivenpy.types.mention.Mention.author_id":{},"reference/types.html#openhivenpy.types.message.Message.author_id":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.author_id":{}}}],["authoris",{"_index":416,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.token":{}},"title":{}}],["automat",{"_index":704,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#installation":{},"getting_started/index.html#the-hiven-swarm":{},"getting_started/index.html#using-a-userclient":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["avail",{"_index":529,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/event_handling.html":{},"getting_started/event_handling.html#event-handling":{},"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#specifying-the-log-level":{},"home/bug_reporting.html":{},"home/bug_reporting.html#bug-reporting":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.house_ids":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.room_ids":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.LazyUser":{},"setup/index.html":{},"setup/index.html#setup-of-a-bot":{}},"title":{}}],["available_ev",{"_index":1113,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{}},"title":{"reference/events.html#openhivenpy.events.HivenEventHandler.available_events":{}}}],["avoid",{"_index":189,"text":{"changelog.html":{},"changelog.html#changed_1":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{}},"title":{}}],["await",{"_index":1073,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{"reference/events.html#openhivenpy.events.DispatchEventListener.awaitable":{}}}],["back",{"_index":370,"text":{"changelog.html":{},"changelog.html#removed_4":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["background",{"_index":860,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["bad",{"_index":378,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{}},"title":{"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{}}}],["banner",{"_index":620,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.banner":{}},"title":{"reference/types.html#openhivenpy.types.house.House.banner":{}}}],["base",{"_index":57,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#lazy-user":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_4":{},"changelog.html#changed":{},"changelog.html#changed_1":{},"changelog.html#changelog":{},"changelog.html#v02dev1-2021-08-13":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#specifying-the-log-level":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{},"reference/events.html":{},"reference/events.html#hiveneventhandler-and-listeners":{},"reference/events.html#openhivenpy.events.DispatchEventListener":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{}},"title":{}}],["baseroom",{"_index":1220,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{}},"title":{}}],["baseus",{"_index":75,"text":{"changelog.html":{},"changelog.html#added":{}},"title":{}}],["basic",{"_index":713,"text":{"getting_started/index.html":{},"getting_started/index.html#basic-concept":{}},"title":{"getting_started/index.html#basic-concept":{}}}],["basicconfig",{"_index":849,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["batch_house_member_upd",{"_index":36,"text":{"api_reference/swarm_events.html":{},"index.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{}},"title":{"api_reference/swarm_events.html#batch_house_member_update":{}}}],["batch_siz",{"_index":645,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{}},"title":{}}],["batch_typ",{"_index":644,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{}},"title":{}}],["bc",{"_index":1176,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{}},"title":{}}],["be",{"_index":18,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#request-exceptions":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#api-request-endpoints":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/hiven_swarm.html":{},"api_reference/hiven_swarm.html#using-the-hiven-swarm":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#json-object-reference":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#hiven-swarm-events":{},"changelog.html":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"index.html":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{}},"title":{}}],["befor",{"_index":209,"text":{"changelog.html":{},"changelog.html#changed_2":{},"changelog.html#changed_4":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["beginn",{"_index":765,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["behavior",{"_index":1000,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{"home/troubleshooting.html#unexpected-behavior":{}}}],["believ",{"_index":1546,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{}},"title":{}}],["better",{"_index":360,"text":{"changelog.html":{},"changelog.html#changed_5":{},"changelog.html#removed_4":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{}},"title":{}}],["between",{"_index":750,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["bi",{"_index":573,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#role":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#message_create":{}},"title":{}}],["big",{"_index":1293,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["bio",{"_index":429,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.bio":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.bio":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.bio":{},"reference/types.html#openhivenpy.types.user.LazyUser.bio":{}}}],["block",{"_index":561,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.blocked":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.user.User.blocked":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.blocked":{},"reference/types.html#openhivenpy.types.user.User.blocked":{}}}],["block_us",{"_index":1330,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{}},"title":{"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{}}}],["bo",{"_index":630,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_leave":{}},"title":{}}],["bodi",{"_index":417,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{}},"title":{"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#writing-a-request-with-a-json-body":{}}}],["bool",{"_index":426,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#user_update":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/events.html":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{}},"title":{}}],["bot",{"_index":131,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#user_update":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#changed_1":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.botclient.BotClient":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.bot":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.startup_time":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.bot":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"setup/index.html":{}},"title":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#creating-a-bot-account":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.bot":{},"reference/types.html#openhivenpy.types.user.LazyUser.bot":{},"setup/index.html":{},"setup/index.html#setup-of-a-bot":{}}}],["bot_token_len",{"_index":1289,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["botclient",{"_index":758,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{}},"title":{"getting_started/index.html#using-a-botclient":{},"reference/hivenclient.html#openhivenpy.client.botclient.BotClient":{}}}],["both",{"_index":1248,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.room_ids":{}},"title":{}}],["break",{"_index":1372,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["bridg",{"_index":749,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["brief",{"_index":1025,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["broker",{"_index":89,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.message_broker":{}},"title":{}}],["browser",{"_index":816,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{}},"title":{}}],["bucket",{"_index":264,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"changelog.html":{},"changelog.html#added_4":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.bucket":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{}},"title":{"reference/types.html#openhivenpy.types.message.Message.bucket":{}}}],["buffer",{"_index":94,"text":{"changelog.html":{},"changelog.html#added_1":{},"changelog.html#changed_1":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{}}],["bug",{"_index":279,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"changelog.html":{},"changelog.html#changed_4":{},"changelog.html#changed_5":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/bug_reporting.html":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#issue-page":{},"home/contributing.html#summary":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{"home/bug_reporting.html":{},"home/bug_reporting.html#bug-reporting":{}}}],["build",{"_index":698,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["built",{"_index":843,"text":{"getting_started/logging.html":{},"getting_started/logging.html#logging-and-debugging":{}},"title":{}}],["c",{"_index":932,"text":{"home/license.html":{},"home/license.html#license":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["cach",{"_index":170,"text":{"changelog.html":{},"changelog.html#changed_1":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#quickstart":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.storage":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.house_ids":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.room_ids":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.id":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{}},"title":{"reference/cache.html":{},"reference/cache.html#client-cache":{}}}],["cache.pi",{"_index":175,"text":{"changelog.html":{},"changelog.html#changed_1":{}},"title":{}}],["cached_memb",{"_index":1311,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{}},"title":{}}],["call",{"_index":97,"text":{"changelog.html":{},"changelog.html#added_1":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{}},"title":{}}],["call_creat",{"_index":659,"text":{"api_reference/swarm_events.html":{}},"title":{"api_reference/swarm_events.html#call_create":{}}}],["call_delet",{"_index":671,"text":{"api_reference/swarm_events.html":{}},"title":{"api_reference/swarm_events.html#call_delete":{}}}],["call_listen",{"_index":144,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{}},"title":{"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{}}}],["call_upd",{"_index":664,"text":{"api_reference/swarm_events.html":{}},"title":{"api_reference/swarm_events.html#call_update":{}}}],["callabl",{"_index":1075,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{}},"title":{}}],["calle",{"_index":1139,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{}},"title":{}}],["caller",{"_index":1140,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{}},"title":{}}],["cancel",{"_index":1234,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close_timeout":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["cancel_friend_request",{"_index":1333,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{}},"title":{"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{}}}],["cancellederror",{"_index":1422,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["case",{"_index":496,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"getting_started/index.html":{},"getting_started/index.html#the-hiven-swarm":{},"home/contributing.html":{},"home/contributing.html#using-github":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{}},"title":{}}],["categori",{"_index":351,"text":{"changelog.html":{},"changelog.html#changed_5":{},"getting_started/logging.html":{},"getting_started/logging.html#specifying-the-log-level":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{}},"title":{}}],["caus",{"_index":280,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"changelog.html":{},"changelog.html#changed_4":{},"changelog.html#changed_5":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["caution",{"_index":1373,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["ce",{"_index":587,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{}},"title":{}}],["certain",{"_index":1400,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["chang",{"_index":45,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#request-exceptions":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#api-request-endpoints":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/hiven_swarm.html":{},"api_reference/hiven_swarm.html#using-the-hiven-swarm":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#json-object-reference":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#hiven-swarm-events":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#changed_5":{},"changelog.html#changelog":{},"changelog.html#removed":{},"changelog.html#removed_2":{},"changelog.html#v02dev1-2021-08-13":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#using-a-userclient":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#contributing-changes":{},"home/contributing.html#using-github":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{}},"title":{"changelog.html#changed":{},"changelog.html#changed_1":{},"changelog.html#changed_2":{},"changelog.html#changed_3":{},"changelog.html#changed_4":{},"changelog.html#changed_5":{},"home/contributing.html#contributing-changes":{}}}],["changelog",{"_index":42,"text":{"changelog.html":{},"changelog.html#changelog":{}},"title":{"changelog.html":{},"changelog.html#changelog":{}}}],["changelog.md",{"_index":53,"text":{"changelog.html":{},"changelog.html#changelog":{}},"title":{}}],["charact",{"_index":826,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{}},"title":{}}],["charg",{"_index":939,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["chat",{"_index":1436,"text":{"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{}},"title":{}}],["check",{"_index":433,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{}},"title":{}}],["check_if_initialis",{"_index":1021,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{}}}],["chme",{"_index":606,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{}},"title":{}}],["choos",{"_index":832,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{}},"title":{}}],["chosen",{"_index":388,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{}},"title":{}}],["chunk",{"_index":640,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_members_chunk":{}},"title":{}}],["circular",{"_index":278,"text":{"changelog.html":{},"changelog.html#changed_4":{}},"title":{}}],["cl",{"_index":1445,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{}}],["claim",{"_index":969,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["class",{"_index":68,"text":{"changelog.html":{},"changelog.html#added":{},"changelog.html#added_1":{},"changelog.html#added_2":{},"changelog.html#added_3":{},"changelog.html#added_4":{},"changelog.html#added_5":{},"changelog.html#changed_1":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/events.html":{},"reference/events.html#hiveneventhandler-and-listeners":{},"reference/events.html#openhivenpy.events.DispatchEventListener":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.botclient.BotClient":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.author":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.house":{},"reference/types.html#openhivenpy.types.context.Context.room":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.house":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.client_user":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.LazyUser":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.author":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.author_id":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.house":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.house_id":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.room":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.room_id":{}},"title":{}}],["classic",{"_index":394,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{}},"title":{}}],["classif",{"_index":658,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#typing_start":{}},"title":{}}],["classmethod",{"_index":241,"text":{"changelog.html":{},"changelog.html#added_4":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{}}],["clean",{"_index":1051,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["cleaner",{"_index":215,"text":{"changelog.html":{},"changelog.html#removed_1":{}},"title":{}}],["cleanup",{"_index":1130,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners":{}},"title":{}}],["cleanup_listen",{"_index":1129,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners":{}},"title":{"reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners":{}}}],["client",{"_index":100,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#added_1":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.__init__":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.account":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.application":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.http":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.initialised":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.storage":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.token":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.token":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.feed.Feed.__init__":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.client_member":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.client_user":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.account":{},"reference/types.html#openhivenpy.types.user.LazyUser.application":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.user.User.email":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{"api_reference/object_reference.html#objects-for-the-client-user":{},"reference/cache.html":{},"reference/cache.html#client-cache":{},"reference/events.html#openhivenpy.events.DispatchEventListener.client":{},"reference/hivenclient.html":{},"reference/hivenclient.html#websocket-clients":{},"reference/http.html":{},"reference/http.html#http-client":{}}}],["client.edit(**kwarg",{"_index":311,"text":{"changelog.html":{},"changelog.html#added_5":{},"changelog.html#changed_5":{}},"title":{}}],["client.ev",{"_index":160,"text":{"changelog.html":{},"changelog.html#added_1":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{}},"title":{}}],["client/serv",{"_index":705,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["client_memb",{"_index":1032,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.__init__":{}},"title":{"reference/types.html#openhivenpy.types.house.House.client_member":{}}}],["client_typ",{"_index":1230,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type":{}}}],["client_us",{"_index":261,"text":{"changelog.html":{},"changelog.html#added_4":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.client_user":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_user":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.client_user":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.client_user":{}}}],["clientcach",{"_index":1013,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/hiven_parsers.html":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache":{}}}],["clientrespons",{"_index":1378,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["clientsess",{"_index":1347,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.session":{}},"title":{}}],["clienttimeout",{"_index":1391,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["close",{"_index":268,"text":{"changelog.html":{},"changelog.html#added_4":{},"changelog.html#changed_4":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#the-hiven-swarm":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close_timeout":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{}}}],["close_timeout",{"_index":1231,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close_timeout":{}}}],["closing_cleanup",{"_index":1050,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{}}}],["code",{"_index":207,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"changelog.html":{},"changelog.html#added_4":{},"changelog.html#added_5":{},"changelog.html#changed_2":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__str__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.__init__":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__str__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__str__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.feed.Feed.__init__":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__str__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__str__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__str__":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{"reference/types.html#openhivenpy.types.invite.Invite.code":{}}}],["collec",{"_index":646,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{}},"title":{}}],["color",{"_index":575,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#role":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#role_update":{}},"title":{}}],["command",{"_index":781,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-botclient":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.context.Context":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.timestamp":{},"reference/types.html#openhivenpy.types.member.Member.kick":{}},"title":{}}],["commit",{"_index":341,"text":{"changelog.html":{},"changelog.html#changed_5":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"home/contributing.html#summary":{}},"title":{}}],["common",{"_index":501,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{}},"title":{}}],["commun",{"_index":1420,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{}},"title":{}}],["compil",{"_index":46,"text":{"changelog.html":{},"changelog.html#changelog":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["complet",{"_index":848,"text":{"getting_started/logging.html":{},"getting_started/logging.html#specifying-the-log-level":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["compromis",{"_index":812,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{}},"title":{}}],["concept",{"_index":714,"text":{"getting_started/index.html":{},"getting_started/index.html#basic-concept":{}},"title":{"getting_started/index.html#basic-concept":{}}}],["condit",{"_index":953,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["configur",{"_index":511,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#the-hiven-swarm":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.log_websocket":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.queue_events":{}},"title":{}}],["connect",{"_index":274,"text":{"changelog.html":{},"changelog.html#changed_4":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#the-hiven-swarm":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/license.html":{},"home/license.html#license":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close_timeout":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connection":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connection_status":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.http":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.open":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connection":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}}}],["connection.connect",{"_index":325,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["connection_statu",{"_index":1236,"text":{"reference/hivenclient.html":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connection_status":{}}}],["consid",{"_index":508,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.user.LazyUser":{}},"title":{}}],["consol",{"_index":818,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["constant",{"_index":258,"text":{"changelog.html":{},"changelog.html#added_4":{}},"title":{}}],["construct",{"_index":287,"text":{"changelog.html":{},"changelog.html#changed_4":{}},"title":{}}],["contain",{"_index":418,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.attachment.Attachment":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.resource_pointers":{},"reference/types.html#openhivenpy.types.house.House":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.author":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{}},"title":{}}],["containt",{"_index":439,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{}},"title":{}}],["content",{"_index":445,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.content":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{"api_reference/hiven_restapi.html#specifying-the-content-type":{},"reference/types.html#openhivenpy.types.message.Message.content":{}}}],["context",{"_index":1431,"text":{"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.context.Context":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.author":{},"reference/types.html#openhivenpy.types.context.Context.house":{},"reference/types.html#openhivenpy.types.context.Context.room":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.author_id":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.house":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.house_id":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.room":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.room_id":{}},"title":{"reference/types.html#openhivenpy.types.context.Context":{}}}],["continu",{"_index":1410,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["contract",{"_index":974,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["contribut",{"_index":887,"text":{"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#issue-page":{},"home/contributing.html#using-github":{}},"title":{"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#contributing-changes":{}}}],["control",{"_index":795,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{}},"title":{}}],["copi",{"_index":823,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"home/license.html":{},"home/license.html#license":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{}},"title":{}}],["copyright",{"_index":931,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["core",{"_index":315,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["coro",{"_index":1154,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{}},"title":{}}],["coroutin",{"_index":124,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{}},"title":{}}],["correct",{"_index":308,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"changelog.html":{},"changelog.html#added_5":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{}}],["correctli",{"_index":179,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{},"changelog.html":{},"changelog.html#changed_1":{},"home/contributing.html":{},"home/contributing.html#using-github":{},"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["correspond",{"_index":271,"text":{"changelog.html":{},"changelog.html#added_4":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#the-hiven-swarm":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{}},"title":{}}],["count",{"_index":924,"text":{"home/contributing.html":{},"home/contributing.html#summary":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{}},"title":{}}],["cours",{"_index":513,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{}},"title":{}}],["creat",{"_index":134,"text":{"changelog.html":{},"changelog.html#added_1":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.timestamp":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{"getting_started/deploying_your_first_bot.html#creating-a-bot-account":{}}}],["create_default_cach",{"_index":1016,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{}},"title":{}}],["create_ent",{"_index":1490,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{}},"title":{"reference/types.html#openhivenpy.types.house.House.create_entity":{}}}],["create_invit",{"_index":1493,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{}},"title":{"reference/types.html#openhivenpy.types.house.House.create_invite":{}}}],["create_private_group_room",{"_index":312,"text":{"changelog.html":{},"changelog.html#added_5":{}},"title":{}}],["create_private_room",{"_index":344,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["create_room",{"_index":1497,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_room":{}},"title":{"reference/types.html#openhivenpy.types.house.House.create_room":{}}}],["created_at",{"_index":1515,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{}},"title":{"reference/types.html#openhivenpy.types.invite.Invite.created_at":{}}}],["creation",{"_index":243,"text":{"changelog.html":{},"changelog.html#added_4":{},"changelog.html#changed_5":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{}}],["critic",{"_index":847,"text":{"getting_started/logging.html":{},"getting_started/logging.html#specifying-the-log-level":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["crucial",{"_index":809,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{}},"title":{}}],["current",{"_index":275,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"changelog.html":{},"changelog.html#changed_4":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{},"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/index.html#installation":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.account":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.api_version":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.application":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.presence":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.user.LazyUser.account":{},"reference/types.html#openhivenpy.types.user.LazyUser.application":{},"reference/types.html#openhivenpy.types.user.User.presence":{}},"title":{}}],["custom",{"_index":844,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"getting_started/logging.html#logging-and-debugging":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{}},"title":{}}],["customis",{"_index":793,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.embed.Embed":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{}},"title":{}}],["cycl",{"_index":108,"text":{"changelog.html":{},"changelog.html#added_1":{}},"title":{}}],["d",{"_index":527,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_delete":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_leave":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_delete":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#role_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_delete":{},"api_reference/swarm_events.html#room_update":{},"api_reference/swarm_events.html#typing_start":{},"api_reference/swarm_events.html#user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{}},"title":{}}],["damag",{"_index":970,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["data",{"_index":114,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_delete":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_leave":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_delete":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#role_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_delete":{},"api_reference/swarm_events.html#room_update":{},"api_reference/swarm_events.html#typing_start":{},"api_reference/swarm_events.html#user_update":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_5":{},"changelog.html#changed_1":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#the-hiven-swarm":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.attachment.Attachment.raw":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.feed.Feed.__init__":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.user.LazyUser":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{}}],["data_field",{"_index":516,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{}},"title":{}}],["dataclass",{"_index":252,"text":{"changelog.html":{},"changelog.html#added_4":{}},"title":{}}],["dataclassobject",{"_index":1459,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{}},"title":{}}],["datatyp",{"_index":493,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{}},"title":{}}],["date",{"_index":866,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.member.Member.joined_at":{},"reference/types.html#openhivenpy.types.member.Member.joined_house_at":{},"reference/types.html#openhivenpy.types.message.Message.edited_at":{},"reference/types.html#openhivenpy.types.message.Message.timestamp":{}},"title":{}}],["datetim",{"_index":1216,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/types.html":{}},"title":{}}],["datetime.datetim",{"_index":1210,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{}},"title":{}}],["deafen",{"_index":667,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_update":{}},"title":{}}],["deal",{"_index":725,"text":{"getting_started/index.html":{},"getting_started/index.html#the-hiven-swarm":{},"home/license.html":{},"home/license.html#license":{}},"title":{}}],["debug",{"_index":294,"text":{"changelog.html":{},"changelog.html#added_5":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{"getting_started/logging.html":{},"getting_started/logging.html#logging-and-debugging":{}}}],["decid",{"_index":756,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["declar",{"_index":720,"text":{"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#the-hiven-swarm":{}},"title":{}}],["decod",{"_index":1414,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["decor",{"_index":738,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-userclient":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{}},"title":{}}],["deepcopi",{"_index":1022,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{}},"title":{}}],["def",{"_index":743,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__str__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.__init__":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__str__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__str__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.feed.Feed.__init__":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__str__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__str__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__str__":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{}}],["default",{"_index":185,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/object_reference.html":{},"changelog.html":{},"changelog.html#added_5":{},"changelog.html#changed_1":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.default_permissions":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{"api_reference/object_reference.html#default-user":{}}}],["default_ent",{"_index":1500,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_room":{}},"title":{}}],["default_permiss",{"_index":619,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.__init__":{}},"title":{"reference/types.html#openhivenpy.types.house.House.default_permissions":{}}}],["default_permission_overrid",{"_index":542,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{}},"title":{}}],["defin",{"_index":776,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{}},"title":{}}],["del",{"_index":1059,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["delay",{"_index":166,"text":{"changelog.html":{},"changelog.html#changed_1":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{}}],["delet",{"_index":518,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.DeletedMessage":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__str__":{},"reference/types.html#openhivenpy.types.message.Message.delete":{}},"title":{"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.message.Message.delete":{}}}],["deletedmessag",{"_index":1435,"text":{"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{}},"title":{"reference/types.html#openhivenpy.types.message.DeletedMessage":{}}}],["delight",{"_index":891,"text":{"home/contributing.html":{},"home/contributing.html#contributing":{}},"title":{}}],["deni",{"_index":572,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#role":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#role_update":{}},"title":{}}],["depend",{"_index":328,"text":{"changelog.html":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/index.html#installation":{},"getting_started/index.html#quickstart":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#summary":{}},"title":{}}],["deploy",{"_index":790,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{}}}],["deprec",{"_index":204,"text":{"changelog.html":{},"changelog.html#added_2":{},"changelog.html#removed_3":{}},"title":{}}],["depreca",{"_index":525,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{}},"title":{}}],["dept",{"_index":804,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{}},"title":{}}],["depth",{"_index":476,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{}},"title":{}}],["descript",{"_index":543,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"getting_started/logging.html":{},"getting_started/logging.html#specifying-the-log-level":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.description":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.description":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.description":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.description":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{"reference/types.html#openhivenpy.types.embed.Embed.description":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.description":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.description":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.description":{}}}],["detail",{"_index":475,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{}},"title":{}}],["develop",{"_index":19,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#issue-page":{},"home/contributing.html#using-github":{},"index.html":{}},"title":{}}],["devic",{"_index":1539,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.device_id":{}},"title":{}}],["device_id",{"_index":267,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"changelog.html":{},"changelog.html#added_4":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{}},"title":{"reference/types.html#openhivenpy.types.message.Message.device_id":{}}}],["dict",{"_index":1014,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.entity.Entity.resource_pointers":{},"reference/types.html#openhivenpy.types.feed.Feed.__init__":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{}}],["dictionari",{"_index":1010,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.attachment.Attachment.raw":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{}}],["didn't",{"_index":1263,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["differ",{"_index":988,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["differenti",{"_index":541,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{}},"title":{}}],["dimens",{"_index":609,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{}},"title":{}}],["direct",{"_index":840,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{}},"title":{}}],["directli",{"_index":145,"text":{"changelog.html":{},"changelog.html#added_1":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["discord",{"_index":718,"text":{"getting_started/index.html":{},"getting_started/index.html#basic-concept":{}},"title":{}}],["discord.pi",{"_index":717,"text":{"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{}},"title":{}}],["discuss",{"_index":487,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{}},"title":{}}],["dispatch",{"_index":1079,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{}},"title":{"reference/events.html#openhivenpy.events.DispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatched":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{}}}],["dispatch_ev",{"_index":143,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{}},"title":{"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{}}}],["dispatch_{event_nam",{"_index":321,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["dispatcheventlisten",{"_index":1071,"text":{"reference/events.html":{},"reference/events.html#hiveneventhandler-and-listeners":{},"reference/events.html#openhivenpy.events.DispatchEventListener":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{}},"title":{"reference/events.html#openhivenpy.events.DispatchEventListener":{}}}],["display",{"_index":1433,"text":{"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.feed.Feed":{}},"title":{}}],["distribut",{"_index":93,"text":{"changelog.html":{},"changelog.html#added_1":{},"getting_started/index.html":{},"getting_started/index.html#quickstart":{},"home/license.html":{},"home/license.html#license":{}},"title":{}}],["do",{"_index":811,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{}},"title":{}}],["doc",{"_index":296,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_delete":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_leave":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_delete":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#role_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_delete":{},"api_reference/swarm_events.html#room_update":{},"api_reference/swarm_events.html#typing_start":{},"api_reference/swarm_events.html#user_update":{},"changelog.html":{},"changelog.html#added_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/logging.html":{},"getting_started/logging.html#specifying-the-log-level":{}},"title":{}}],["docstr",{"_index":276,"text":{"changelog.html":{},"changelog.html#changed_4":{}},"title":{}}],["document",{"_index":47,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#request-exceptions":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#api-request-endpoints":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/hiven_swarm.html":{},"api_reference/hiven_swarm.html#using-the-hiven-swarm":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#json-object-reference":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#hiven-swarm-events":{},"changelog.html":{},"changelog.html#changelog":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/event_handling.html":{},"getting_started/event_handling.html#event-handling":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"home/bug_reporting.html":{},"home/bug_reporting.html#bug-reporting":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/license.html":{},"home/license.html#license":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{},"home/troubleshooting.html#unexpected-behavior":{},"setup/index.html":{},"setup/index.html#setup-of-a-bot":{}},"title":{}}],["doesn't",{"_index":761,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse.icon":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{}},"title":{}}],["done",{"_index":125,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#added_1":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{}},"title":{}}],["dot",{"_index":181,"text":{"changelog.html":{},"changelog.html#changed_1":{}},"title":{}}],["dotenv",{"_index":710,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["down",{"_index":655,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{}},"title":{}}],["download",{"_index":981,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{"home/troubleshooting.html#issues-downloading-the-module":{}}}],["downtim",{"_index":652,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{}},"title":{}}],["dtype",{"_index":1407,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["due",{"_index":15,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_exceptions.html#request-exceptions":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#api-request-endpoints":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/hiven_swarm.html":{},"api_reference/hiven_swarm.html#using-the-hiven-swarm":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#json-object-reference":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#hiven-swarm-events":{},"changelog.html":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#installation":{},"getting_started/index.html#using-a-userclient":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"home/troubleshooting.html#unexpected-behavior":{},"index.html":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{}},"title":{}}],["duplic",{"_index":1034,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{}},"title":{}}],["dure",{"_index":1322,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["dynam",{"_index":126,"text":{"changelog.html":{},"changelog.html#added_1":{}},"title":{}}],["dynamiceventbuff",{"_index":1226,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{}}],["e",{"_index":214,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{},"changelog.html":{},"changelog.html#removed_1":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.User.email":{}},"title":{}}],["each",{"_index":479,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["earli",{"_index":797,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{}},"title":{}}],["easi",{"_index":2,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{},"home/contributing.html":{},"home/contributing.html#using-github":{},"index.html":{}},"title":{}}],["easier",{"_index":293,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"changelog.html":{},"changelog.html#added_5":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler":{}},"title":{}}],["easili",{"_index":691,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"getting_started/logging.html#logging-and-debugging":{},"home/contributing.html":{},"home/contributing.html#issue-page":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{}},"title":{}}],["edit",{"_index":1295,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.edited_at":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{}}}],["edited_at",{"_index":457,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_update":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{}},"title":{"reference/types.html#openhivenpy.types.message.Message.edited_at":{}}}],["effect",{"_index":920,"text":{"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["effici",{"_index":251,"text":{"changelog.html":{},"changelog.html#added_4":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["elif",{"_index":1044,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{}},"title":{}}],["email",{"_index":430,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email_verified":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.email_verified":{},"reference/types.html#openhivenpy.types.user.User.__init__":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email":{},"reference/types.html#openhivenpy.types.user.User.email":{}}}],["email_verifi",{"_index":431,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#user_update":{},"reference/hivenclient.html":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email_verified":{},"reference/types.html#openhivenpy.types.user.LazyUser.email_verified":{}}}],["emb",{"_index":458,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/object_reference.html":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_update":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.embed.Embed":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.description":{},"reference/types.html#openhivenpy.types.embed.Embed.image":{},"reference/types.html#openhivenpy.types.embed.Embed.title":{},"reference/types.html#openhivenpy.types.embed.Embed.type":{},"reference/types.html#openhivenpy.types.embed.Embed.url":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.embed":{}},"title":{"api_reference/object_reference.html#embed":{},"reference/types.html#openhivenpy.types.embed.Embed":{},"reference/types.html#openhivenpy.types.message.Message.embed":{}}}],["emoji",{"_index":544,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.emoji":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.emoji":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.emoji":{}},"title":{"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.emoji":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.emoji":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.emoji":{}}}],["emp",{"_index":530,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{}},"title":{}}],["empti",{"_index":1131,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["emul",{"_index":1009,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{}},"title":{}}],["enabl",{"_index":1245,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.log_websocket":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.mfa_enabled":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.queue_events":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.User.mfa_enabled":{}},"title":{}}],["enable_desktop_notif",{"_index":593,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{}},"title":{}}],["encod",{"_index":872,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["encount",{"_index":404,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["end",{"_index":1261,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["endpoint",{"_index":398,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersmerooms":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{}},"title":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#api-request-endpoints":{},"api_reference/hiven_request_endpoints.html#endpoints":{},"api_reference/hiven_request_endpoints.html#house-endpoints":{},"api_reference/hiven_request_endpoints.html#message-endpoints":{},"api_reference/hiven_request_endpoints.html#room-endpoints":{},"api_reference/hiven_request_endpoints.html#user-endpoints":{}}}],["enhanc",{"_index":208,"text":{"changelog.html":{},"changelog.html#changed_2":{}},"title":{}}],["enter",{"_index":168,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"changelog.html":{},"changelog.html#changed_1":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{}},"title":{}}],["entir",{"_index":500,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/event_handling.html":{},"getting_started/event_handling.html#event-handling":{},"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"home/bug_reporting.html":{},"home/bug_reporting.html#bug-reporting":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{},"setup/index.html":{},"setup/index.html#setup-of-a-bot":{}},"title":{}}],["entiti",{"_index":313,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{},"api_reference/object_reference.html":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{},"changelog.html":{},"changelog.html#added_5":{},"changelog.html#changed_5":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.entity.Entity":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.entity.Entity.house":{},"reference/types.html#openhivenpy.types.entity.Entity.house_id":{},"reference/types.html#openhivenpy.types.entity.Entity.id":{},"reference/types.html#openhivenpy.types.entity.Entity.name":{},"reference/types.html#openhivenpy.types.entity.Entity.resource_pointers":{},"reference/types.html#openhivenpy.types.entity.Entity.type":{},"reference/types.html#openhivenpy.types.house.House":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.entities":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{}},"title":{"api_reference/object_reference.html#entity":{},"reference/types.html#openhivenpy.types.entity.Entity":{},"reference/types.html#openhivenpy.types.house.House.entities":{}}}],["entity_id",{"_index":1299,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{}},"title":{}}],["entri",{"_index":1162,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{}},"title":{}}],["env",{"_index":182,"text":{"changelog.html":{},"changelog.html#changed_1":{},"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["environ",{"_index":683,"text":{"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/index.html#installation":{},"getting_started/index.html#quickstart":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{}},"title":{"getting_started/index.html#environment":{}}}],["equival",{"_index":352,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["err_cod",{"_index":1418,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["err_msg",{"_index":1419,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["error",{"_index":217,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"changelog.html":{},"changelog.html#added_3":{},"changelog.html#changed_4":{},"changelog.html#changed_5":{},"getting_started/logging.html":{},"getting_started/logging.html#logging-and-debugging":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["esqu",{"_index":1598,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{}},"title":{}}],["essenti",{"_index":923,"text":{"home/contributing.html":{},"home/contributing.html#summary":{}},"title":{}}],["establish",{"_index":855,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["etc",{"_index":343,"text":{"changelog.html":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{}},"title":{}}],["even",{"_index":979,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{}},"title":{}}],["event",{"_index":92,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#typing_start":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_4":{},"changelog.html#added_5":{},"changelog.html#changed_1":{},"changelog.html#changed_4":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/event_handling.html":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#the-hiven-swarm":{},"getting_started/index.html#using-a-userclient":{},"home/license.html":{},"home/license.html#license":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__str__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.loop":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.message_broker":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.loop":{}},"title":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#hiven-swarm-events":{},"getting_started/event_handling.html":{},"getting_started/event_handling.html#event-handling":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{}}}],["event_buff",{"_index":1133,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{}},"title":{}}],["event_data",{"_index":1080,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{}},"title":{}}],["event_handl",{"_index":272,"text":{"changelog.html":{},"changelog.html#added_4":{}},"title":{}}],["event_listen",{"_index":362,"text":{"changelog.html":{},"changelog.html#changed_5":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{}},"title":{}}],["event_loop",{"_index":1256,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["event_nam",{"_index":1077,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__str__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{}},"title":{"reference/events.html#openhivenpy.events.DispatchEventListener.event_name":{}}}],["event_pars",{"_index":110,"text":{"changelog.html":{},"changelog.html#added_1":{}},"title":{}}],["eventhandl",{"_index":318,"text":{"changelog.html":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#the-hiven-swarm":{}},"title":{"getting_started/index.html#event-listening-with-the-eventhandler":{}}}],["eventlisten",{"_index":841,"text":{"getting_started/deploying_your_first_bot.html":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{}},"title":{"getting_started/deploying_your_first_bot.html#setting-up-a-simple-eventlistener":{}}}],["eventloop",{"_index":1321,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["everyon",{"_index":537,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#lazy-user":{}},"title":{}}],["everyth",{"_index":193,"text":{"changelog.html":{},"changelog.html#removed":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["exactli",{"_index":796,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{}},"title":{}}],["exampl",{"_index":383,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{"getting_started/logging.html#simple-example-of-logging":{}}}],["exc_info",{"_index":1026,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["exceed",{"_index":1233,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close_timeout":{}},"title":{}}],["excel",{"_index":858,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["except",{"_index":211,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"changelog.html":{},"changelog.html#added_4":{},"changelog.html#added_5":{},"changelog.html#changed_5":{},"changelog.html#removed_1":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#request-exceptions":{}}}],["execut",{"_index":96,"text":{"changelog.html":{},"changelog.html#added_1":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#quickstart":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["exist",{"_index":81,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"changelog.html":{},"changelog.html#changed":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.http":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.icon":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.house_id":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.emoji":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{}},"title":{}}],["existing_entity_id",{"_index":1492,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{}},"title":{}}],["exit",{"_index":1053,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{}},"title":{}}],["expect",{"_index":419,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_delete":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_leave":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_delete":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#role_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_delete":{},"api_reference/swarm_events.html#room_update":{},"api_reference/swarm_events.html#typing_start":{},"api_reference/swarm_events.html#user_update":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["expires_at",{"_index":1401,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["explain",{"_index":244,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"changelog.html":{},"changelog.html#added_4":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{}},"title":{}}],["explod",{"_index":459,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.exploding":{},"reference/types.html#openhivenpy.types.message.Message.exploding_age":{}},"title":{"reference/types.html#openhivenpy.types.message.Message.exploding":{}}}],["exploding_ag",{"_index":266,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"changelog.html":{},"changelog.html#added_4":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{}},"title":{"reference/types.html#openhivenpy.types.message.Message.exploding_age":{}}}],["express",{"_index":960,"text":{"home/license.html":{},"home/license.html#license":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{}},"title":{}}],["extend",{"_index":1002,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.User":{}},"title":{}}],["extens",{"_index":10,"text":{"index.html":{}},"title":{}}],["f",{"_index":534,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#member":{},"api_reference/object_reference.html#privateroom":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__str__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__str__":{},"reference/types.html#openhivenpy.types.message.Message.__str__":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["fail",{"_index":330,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"changelog.html":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["fals",{"_index":101,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{}},"title":{}}],["fast",{"_index":3,"text":{"getting_started/index.html":{},"getting_started/index.html#quickstart":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"index.html":{}},"title":{}}],["fastest",{"_index":708,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["fastjsonschema",{"_index":707,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["faulti",{"_index":334,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{},"changelog.html":{},"changelog.html#changed_5":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{}},"title":{}}],["featur",{"_index":678,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/index.html#quickstart":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{}},"title":{}}],["feed",{"_index":1432,"text":{"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.feed.Feed":{},"reference/types.html#openhivenpy.types.feed.Feed.__init__":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{}},"title":{"reference/types.html#openhivenpy.types.feed.Feed":{}}}],["feedback",{"_index":895,"text":{"home/contributing.html":{},"home/contributing.html#contributing":{}},"title":{}}],["feren",{"_index":586,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{}},"title":{}}],["fetch",{"_index":452,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.embed.Embed":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.user.LazyUser":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{}},"title":{}}],["fetch_current_friend_request",{"_index":1337,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{}},"title":{"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{}}}],["fetch_invit",{"_index":353,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["few",{"_index":191,"text":{"changelog.html":{},"changelog.html#changed_1":{}},"title":{}}],["field",{"_index":305,"text":{"changelog.html":{},"changelog.html#added_5":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{}}],["file",{"_index":48,"text":{"changelog.html":{},"changelog.html#added_1":{},"changelog.html#changed_1":{},"changelog.html#changelog":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"home/license.html":{},"home/license.html#license":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.attachment.Attachment":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.filename":{},"reference/types.html#openhivenpy.types.attachment.Attachment.media_url":{}},"title":{}}],["filehandl",{"_index":870,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["filenam",{"_index":608,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{}},"title":{"reference/types.html#openhivenpy.types.attachment.Attachment.filename":{}}}],["find",{"_index":397,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{}},"title":{}}],["find_ent",{"_index":1298,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{}}}],["find_hous",{"_index":1302,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{}}}],["find_house_memb",{"_index":1303,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.find_member":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{}}}],["find_memb",{"_index":1503,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.find_member":{}},"title":{"reference/types.html#openhivenpy.types.house.House.find_member":{}}}],["find_private_group_room",{"_index":1304,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{}}}],["find_private_room",{"_index":1305,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{}}}],["find_relationship",{"_index":1306,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{}}}],["find_room",{"_index":1307,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/types.html#openhivenpy.types.house.House.find_room":{}}}],["find_us",{"_index":1039,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{}}}],["fine",{"_index":1005,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["finish",{"_index":374,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#request-exceptions":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#api-request-endpoints":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/hiven_swarm.html":{},"api_reference/hiven_swarm.html#using-the-hiven-swarm":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#json-object-reference":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#hiven-swarm-events":{},"api_reference/swarm_events.html#init_state":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/event_handling.html":{},"getting_started/event_handling.html#event-handling":{},"home/bug_reporting.html":{},"home/bug_reporting.html#bug-reporting":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"setup/index.html":{},"setup/index.html#setup-of-a-bot":{}},"title":{}}],["fire",{"_index":256,"text":{"changelog.html":{},"changelog.html#added_4":{},"changelog.html#changed_4":{}},"title":{}}],["first",{"_index":791,"text":{"getting_started/deploying_your_first_bot.html":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{}}}],["fit",{"_index":963,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["fix",{"_index":222,"text":{"changelog.html":{},"changelog.html#changed_3":{},"changelog.html#changed_4":{},"changelog.html#changed_5":{}},"title":{}}],["fla",{"_index":632,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_leave":{}},"title":{}}],["flag",{"_index":77,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#relationship":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#user_update":{},"changelog.html":{},"changelog.html#changed":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.flags":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.user_flags":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.flags":{},"reference/types.html#openhivenpy.types.user.LazyUser.user_flags":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.flags":{},"reference/types.html#openhivenpy.types.user.LazyUser.flags":{}}}],["float",{"_index":1553,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{}}],["folder",{"_index":55,"text":{"changelog.html":{},"changelog.html#changelog":{}},"title":{}}],["follow",{"_index":20,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"home/license.html":{},"home/license.html#license":{},"index.html":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{}},"title":{}}],["forbidden",{"_index":1399,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{}},"title":{}}],["forc",{"_index":1282,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{}},"title":{}}],["forev",{"_index":928,"text":{"home/contributing.html":{},"home/contributing.html#summary":{},"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["fork",{"_index":915,"text":{"home/contributing.html":{},"home/contributing.html#contributing-changes":{}},"title":{}}],["form",{"_index":724,"text":{"getting_started/index.html":{},"getting_started/index.html#the-hiven-swarm":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{}}],["format",{"_index":56,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"changelog.html":{},"changelog.html#changed_5":{},"changelog.html#changelog":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{}}],["format_event_as_listen",{"_index":1155,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{}},"title":{}}],["format_obj_data",{"_index":1020,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}}}],["formatt",{"_index":878,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["found",{"_index":392,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{}},"title":{"api_reference/hiven_exceptions.html#404-not-found-not_found":{}}}],["frame",{"_index":727,"text":{"getting_started/index.html":{},"getting_started/index.html#the-hiven-swarm":{}},"title":{}}],["framework",{"_index":706,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["free",{"_index":893,"text":{"home/contributing.html":{},"home/contributing.html#contributing":{},"home/license.html":{},"home/license.html#license":{}},"title":{}}],["friend",{"_index":555,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{}},"title":{}}],["from_dict",{"_index":219,"text":{"changelog.html":{},"changelog.html#added_3":{}},"title":{}}],["fromtimestamp",{"_index":1217,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{}},"title":{}}],["frostbytespac",{"_index":228,"text":{"changelog.html":{},"changelog.html#removed_2":{}},"title":{}}],["full",{"_index":51,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"changelog.html":{},"changelog.html#added":{},"changelog.html#changelog":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{}},"title":{}}],["fulli",{"_index":22,"text":{"changelog.html":{},"changelog.html#added_4":{},"index.html":{}},"title":{}}],["func",{"_index":1142,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{}},"title":{}}],["func_nam",{"_index":1121,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{}},"title":{}}],["function",{"_index":11,"text":{"changelog.html":{},"changelog.html#added_1":{},"changelog.html#changed_1":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#environment":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"index.html":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["furnish",{"_index":951,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["further",{"_index":1006,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["futur",{"_index":782,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#using-a-botclient":{}},"title":{}}],["gateway",{"_index":1235,"text":{"reference/hivenclient.html":{}},"title":{}}],["gather",{"_index":1128,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{}},"title":{}}],["gcc",{"_index":992,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["gener",{"_index":173,"text":{"changelog.html":{},"changelog.html#changed_1":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{}}],["get",{"_index":486,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"api_reference/hiven_swarm.html":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#the-hiven-swarm":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{}},"title":{"api_reference/hiven_swarm.html#getting-started-using-the-hiven-swarm":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{}}}],["get_buff",{"_index":1137,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{}},"title":{}}],["get_cached_data",{"_index":1476,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{}},"title":{"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{}}}],["get_ent",{"_index":1172,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{}}}],["get_event_loop",{"_index":1323,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["get_hous",{"_index":1160,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{}}}],["get_house_memb",{"_index":1164,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.get_member":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{}}}],["get_memb",{"_index":1504,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.get_member":{}},"title":{"reference/types.html#openhivenpy.types.house.House.get_member":{}}}],["get_private_group_room",{"_index":1213,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{}}}],["get_private_room",{"_index":1212,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{}}}],["get_recent_messag",{"_index":1580,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{}},"title":{"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{}}}],["get_relationship",{"_index":1202,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{}}}],["get_room",{"_index":1204,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.get_room":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/types.html#openhivenpy.types.house.House.get_room":{}}}],["get_us",{"_index":1200,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{}}}],["getattr",{"_index":1083,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__str__":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{}},"title":{}}],["getenv",{"_index":1274,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["getlogg",{"_index":868,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["getmemb",{"_index":1119,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{}},"title":{}}],["git",{"_index":905,"text":{"home/contributing.html":{},"home/contributing.html#using-github":{}},"title":{}}],["github",{"_index":697,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"home/contributing.html":{},"home/contributing.html#using-github":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{"home/contributing.html#using-github":{}}}],["give",{"_index":912,"text":{"home/contributing.html":{},"home/contributing.html#issue-page":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{}},"title":{}}],["given",{"_index":187,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"changelog.html":{},"changelog.html#changed_1":{}},"title":{}}],["go",{"_index":904,"text":{"home/contributing.html":{},"home/contributing.html#issue-page":{},"home/contributing.html#using-github":{}},"title":{}}],["goal",{"_index":676,"text":{"getting_started/index.html":{},"getting_started/index.html#quickstart":{}},"title":{}}],["gone",{"_index":195,"text":{"changelog.html":{},"changelog.html#removed":{}},"title":{}}],["good",{"_index":505,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"getting_started/index.html":{},"getting_started/index.html#quickstart":{}},"title":{}}],["grant",{"_index":938,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["group",{"_index":336,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"changelog.html":{},"changelog.html#changed_5":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom":{}},"title":{}}],["gs",{"_index":633,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_leave":{}},"title":{}}],["guid",{"_index":903,"text":{"home/contributing.html":{},"home/contributing.html#using-github":{}},"title":{}}],["ha",{"_index":647,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{}},"title":{}}],["hand",{"_index":861,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["handi",{"_index":862,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["handl",{"_index":90,"text":{"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_5":{},"changelog.html#changed_1":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/event_handling.html":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#the-hiven-swarm":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.message_broker":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{"getting_started/event_handling.html":{},"getting_started/event_handling.html#event-handling":{}}}],["handler",{"_index":269,"text":{"changelog.html":{},"changelog.html#added_4":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["handshak",{"_index":1262,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["happen",{"_index":800,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{}},"title":{}}],["hard",{"_index":829,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{}},"title":{}}],["harm",{"_index":507,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{}},"title":{}}],["hash",{"_index":824,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{}},"title":{}}],["have",{"_index":785,"text":{"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{}},"title":{}}],["header",{"_index":300,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#relationship":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#user_update":{},"changelog.html":{},"changelog.html#added_5":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.header":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.header":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{}},"title":{"api_reference/hiven_restapi.html#authentication-header":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.header":{},"reference/types.html#openhivenpy.types.user.LazyUser.header":{}}}],["hear",{"_index":892,"text":{"home/contributing.html":{},"home/contributing.html#contributing":{}},"title":{}}],["heartbeat",{"_index":1242,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.heartbeat":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.heartbeat":{}}}],["heavili",{"_index":894,"text":{"home/contributing.html":{},"home/contributing.html#contributing":{}},"title":{}}],["height",{"_index":611,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{}},"title":{}}],["heir",{"_index":589,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#init_state":{}},"title":{}}],["help",{"_index":926,"text":{"home/contributing.html":{},"home/contributing.html#summary":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["here",{"_index":86,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"changelog.html":{},"changelog.html#v02dev1-2021-08-13":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{}},"title":{}}],["herebi",{"_index":937,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["hex",{"_index":576,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#role":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#role_update":{}},"title":{}}],["hide",{"_index":864,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["higher",{"_index":686,"text":{"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{}},"title":{}}],["hit",{"_index":1380,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["hiven",{"_index":12,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_exceptions.html#request-exceptions":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#api-request-endpoints":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/hiven_swarm.html":{},"api_reference/hiven_swarm.html#using-the-hiven-swarm":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#json-object-reference":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#relationship":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#hiven-swarm-events":{},"api_reference/swarm_events.html#typing_start":{},"changelog.html":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#the-hiven-swarm":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"index.html":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.botclient.BotClient":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.api_version":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.host":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.attachment.Attachment":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.feed.Feed":{},"reference/types.html#openhivenpy.types.house.House":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite":{},"reference/types.html#openhivenpy.types.member.Member":{},"reference/types.html#openhivenpy.types.mention.Mention":{},"reference/types.html#openhivenpy.types.message.Message":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.user.LazyUser":{},"reference/types.html#openhivenpy.types.user.User":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping":{}},"title":{"api_reference/hiven_swarm.html":{},"api_reference/hiven_swarm.html#getting-started-using-the-hiven-swarm":{},"api_reference/hiven_swarm.html#logging-into-the-hiven-swarm":{},"api_reference/hiven_swarm.html#using-the-hiven-swarm":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#hiven-swarm-events":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#the-hiven-swarm":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#hiven-parsers":{},"reference/types.html":{},"reference/types.html#hiven-types":{}}}],["hiven_api_vers",{"_index":1277,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["hiven_host",{"_index":1275,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["hiven_token",{"_index":1287,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["hivencli",{"_index":71,"text":{"changelog.html":{},"changelog.html#added":{},"changelog.html#added_5":{},"changelog.html#changed_4":{},"changelog.html#changed_5":{},"changelog.html#removed_4":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.__init__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.feed.Feed.__init__":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient":{}}}],["hivenclient.clos",{"_index":157,"text":{"changelog.html":{},"changelog.html#added_1":{},"changelog.html#changed_4":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{}},"title":{}}],["hivenclient.connect",{"_index":327,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["hivenclient.get_hous",{"_index":1509,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{}},"title":{}}],["hivenclient.get_us",{"_index":1593,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser":{}},"title":{}}],["hivenclient.run",{"_index":326,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["hivenconnectionerror",{"_index":1294,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["hiveneventhandl",{"_index":117,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{"reference/events.html":{},"reference/events.html#hiveneventhandler-and-listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler":{}}}],["hiveneventhandler.add_multi_listen",{"_index":135,"text":{"changelog.html":{},"changelog.html#added_1":{}},"title":{}}],["hiveneventhandler.add_single_listen",{"_index":128,"text":{"changelog.html":{},"changelog.html#added_1":{}},"title":{}}],["hivenobject",{"_index":234,"text":{"changelog.html":{},"changelog.html#added_4":{}},"title":{}}],["hivenpars",{"_index":1115,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers":{}}}],["hold",{"_index":176,"text":{"changelog.html":{},"changelog.html#changed_1":{}},"title":{}}],["holder",{"_index":967,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["home",{"_index":0,"text":{},"title":{"index.html":{}}}],["hood",{"_index":139,"text":{"changelog.html":{},"changelog.html#added_1":{}},"title":{}}],["host",{"_index":481,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"home/contributing.html":{},"home/contributing.html#using-github":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.host":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.host":{}}}],["hous",{"_index":342,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersmerooms":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#member":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#role":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#typing_start":{},"changelog.html":{},"changelog.html#changed_5":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.house_ids":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.room_ids":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.house":{},"reference/types.html#openhivenpy.types.entity.Entity":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.house":{},"reference/types.html#openhivenpy.types.entity.Entity.house_id":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.house.House":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.banner":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.default_permissions":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.entities":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.house.House.members":{},"reference/types.html#openhivenpy.types.house.House.owner":{},"reference/types.html#openhivenpy.types.house.House.roles":{},"reference/types.html#openhivenpy.types.house.House.users":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.icon":{},"reference/types.html#openhivenpy.types.house.LazyHouse.id":{},"reference/types.html#openhivenpy.types.house.LazyHouse.name":{},"reference/types.html#openhivenpy.types.house.LazyHouse.owner_id":{},"reference/types.html#openhivenpy.types.house.LazyHouse.rooms":{},"reference/types.html#openhivenpy.types.house.LazyHouse.type":{},"reference/types.html#openhivenpy.types.invite.Invite":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.house":{},"reference/types.html#openhivenpy.types.member.Member.house_id":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.house_id":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.house":{},"reference/types.html#openhivenpy.types.message.Message.house_id":{},"reference/types.html#openhivenpy.types.message.Message.is_house_message":{},"reference/types.html#openhivenpy.types.textroom.TextRoom":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.house":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.house_id":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.house":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.house_id":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.is_house_typing":{}},"title":{"api_reference/hiven_request_endpoints.html#house-endpoints":{},"api_reference/object_reference.html#house":{},"reference/types.html#openhivenpy.types.context.Context.house":{},"reference/types.html#openhivenpy.types.entity.Entity.house":{},"reference/types.html#openhivenpy.types.house.House":{},"reference/types.html#openhivenpy.types.invite.Invite.house":{},"reference/types.html#openhivenpy.types.member.Member.house":{},"reference/types.html#openhivenpy.types.message.Message.house":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.house":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.house":{}}}],["house.format_obj_data",{"_index":1038,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{}},"title":{}}],["house_",{"_index":1555,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{}},"title":{}}],["house_delet",{"_index":1168,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{}},"title":{}}],["house_delete(house_id",{"_index":1166,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{}},"title":{}}],["house_down",{"_index":648,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{}},"title":{"api_reference/swarm_events.html#house_down":{}}}],["house_down(house_id",{"_index":1167,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{}},"title":{}}],["house_entities_upd",{"_index":642,"text":{"api_reference/swarm_events.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{}},"title":{"api_reference/swarm_events.html#house_entities_update":{}}}],["house_entity_upd",{"_index":37,"text":{"api_reference/swarm_events.html":{},"index.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{}},"title":{"api_reference/swarm_events.html#house_entity_update":{}}}],["house_id",{"_index":545,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#member":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#role":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_leave":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_delete":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#role_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_delete":{},"api_reference/swarm_events.html#room_update":{},"api_reference/swarm_events.html#typing_start":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.house_ids":{},"reference/types.html#openhivenpy.types.context.Context.house_id":{},"reference/types.html#openhivenpy.types.entity.Entity.house_id":{},"reference/types.html#openhivenpy.types.invite.Invite.house_id":{},"reference/types.html#openhivenpy.types.member.Member.house_id":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.house_id":{},"reference/types.html#openhivenpy.types.message.Message.house_id":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.house_id":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.house_id":{}}}],["house_join",{"_index":617,"text":{"api_reference/swarm_events.html":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{}},"title":{"api_reference/swarm_events.html#house_join":{}}}],["house_leav",{"_index":623,"text":{"api_reference/swarm_events.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{}},"title":{"api_reference/swarm_events.html#house_leave":{}}}],["house_memb",{"_index":1516,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{}},"title":{"reference/types.html#openhivenpy.types.invite.Invite.house_members":{}}}],["house_member_chunk",{"_index":35,"text":{"index.html":{}},"title":{}}],["house_member_ent",{"_index":32,"text":{"api_reference/swarm_events.html":{},"index.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{}},"title":{"api_reference/swarm_events.html#house_member_enter":{}}}],["house_member_exit",{"_index":33,"text":{"api_reference/swarm_events.html":{},"changelog.html":{},"changelog.html#changed_5":{},"index.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{}},"title":{"api_reference/swarm_events.html#house_member_exit":{}}}],["house_member_join",{"_index":30,"text":{"api_reference/swarm_events.html":{},"index.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{}},"title":{"api_reference/swarm_events.html#house_member_join":{}}}],["house_member_leav",{"_index":31,"text":{"api_reference/swarm_events.html":{},"index.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{}},"title":{"api_reference/swarm_events.html#house_member_leave":{}}}],["house_member_offlin",{"_index":1184,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{}},"title":{}}],["house_member_onlin",{"_index":1182,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{}},"title":{}}],["house_member_upd",{"_index":34,"text":{"api_reference/swarm_events.html":{},"index.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{}},"title":{"api_reference/swarm_events.html#house_member_update":{}}}],["house_members_chunk",{"_index":638,"text":{"api_reference/swarm_events.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{}},"title":{"api_reference/swarm_events.html#house_members_chunk":{}}}],["house_membership",{"_index":598,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{}},"title":{}}],["house_upd",{"_index":621,"text":{"api_reference/swarm_events.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{}},"title":{"api_reference/swarm_events.html#house_update":{}}}],["http",{"_index":149,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_5":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"getting_started/index.html#the-hiven-swarm":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.http":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.ready":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.http":{},"reference/http.html":{},"reference/http.html#http-client":{},"reference/http.html#openhivenpy.gateway.http.HTTP":{}}}],["http.patch",{"_index":333,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["http.raw_request",{"_index":335,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["http_client_respons",{"_index":1421,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["http_request",{"_index":1381,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}}}],["http_resp_cod",{"_index":1396,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["httperror",{"_index":1296,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["httpfailedrequesterror",{"_index":1389,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.member.Member.kick":{}},"title":{}}],["httpforbiddenerror",{"_index":1398,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.member.Member.kick":{}},"title":{}}],["httpinternalservererror",{"_index":1386,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["httpinvalidrequest",{"_index":1412,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["httpnotfounderror",{"_index":1385,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["httpratelimiterror",{"_index":148,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["httpreceivednodataerror",{"_index":1387,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["httprequesttimeouterror",{"_index":1379,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["https://api.hiven.io/v1",{"_index":484,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{}},"title":{}}],["https://api.hiven.io/{vers",{"_index":1370,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.clientsess",{"_index":1374,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["https://github.com/luna",{"_index":702,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["https://hiven.hous",{"_index":1524,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{}},"title":{}}],["httpsessionnotreadyerror",{"_index":1390,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["httptraceback",{"_index":1360,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["human_repr",{"_index":1394,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["icon",{"_index":423,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#relationship":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.icon":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.icon":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.icon":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.icon":{},"reference/types.html#openhivenpy.types.house.LazyHouse.icon":{},"reference/types.html#openhivenpy.types.user.LazyUser.icon":{}}}],["icon(base64",{"_index":1502,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.edit":{}},"title":{}}],["id",{"_index":420,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#entity":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#relationship":{},"api_reference/object_reference.html#role":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_leave":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#role_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_delete":{},"api_reference/swarm_events.html#room_update":{},"api_reference/swarm_events.html#user_update":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.house_ids":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.id":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.room_ids":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.author_id":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.house_id":{},"reference/types.html#openhivenpy.types.context.Context.room_id":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.entity.Entity.house_id":{},"reference/types.html#openhivenpy.types.entity.Entity.id":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.id":{},"reference/types.html#openhivenpy.types.house.LazyHouse.owner_id":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.house_id":{},"reference/types.html#openhivenpy.types.member.Member.id":{},"reference/types.html#openhivenpy.types.member.Member.user_id":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.user_id":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.house_id":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.message_id":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.room_id":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__str__":{},"reference/types.html#openhivenpy.types.message.Message.author_id":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.device_id":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.house_id":{},"reference/types.html#openhivenpy.types.message.Message.id":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.message.Message.room_id":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.id":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.last_message_id":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.id":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.last_message_id":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.recipient_id":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.id":{},"reference/types.html#openhivenpy.types.relationship.Relationship.user_id":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.house_id":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.id":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.id":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.author_id":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.house_id":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.room_id":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.id":{},"reference/types.html#openhivenpy.types.entity.Entity.id":{},"reference/types.html#openhivenpy.types.house.LazyHouse.id":{},"reference/types.html#openhivenpy.types.member.Member.id":{},"reference/types.html#openhivenpy.types.message.Message.id":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.id":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.id":{},"reference/types.html#openhivenpy.types.relationship.Relationship.id":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.id":{},"reference/types.html#openhivenpy.types.user.LazyUser.id":{}}}],["id/str",{"_index":1228,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.account":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.account":{}},"title":{}}],["id_",{"_index":1023,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{}},"title":{}}],["id_list",{"_index":1572,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{}},"title":{}}],["idea",{"_index":890,"text":{"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#issue-page":{},"home/contributing.html#summary":{}},"title":{}}],["idz",{"_index":590,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{}},"title":{}}],["ignor",{"_index":1103,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["ii",{"_index":1444,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{}},"title":{}}],["ill",{"_index":535,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{}},"title":{}}],["im",{"_index":626,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_join":{}},"title":{}}],["imag",{"_index":1461,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.image":{}},"title":{"reference/types.html#openhivenpy.types.embed.Embed.image":{}}}],["immedi",{"_index":104,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{}},"title":{}}],["implement",{"_index":120,"text":{"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_4":{},"changelog.html#changed_1":{},"changelog.html#removed_4":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{}},"title":{}}],["impli",{"_index":961,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["import",{"_index":14,"text":{"changelog.html":{},"changelog.html#changed_4":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{},"index.html":{},"reference/events.html":{},"reference/events.html#hiveneventhandler-and-listeners":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["improv",{"_index":897,"text":{"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#summary":{}},"title":{}}],["includ",{"_index":361,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"home/license.html":{},"home/license.html#license":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.initialised":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.room_ids":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.resource_pointers":{}},"title":{}}],["incom",{"_index":91,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#changed_1":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.message_broker":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{}},"title":{}}],["incoming_",{"_index":1339,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{}},"title":{}}],["info",{"_index":382,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{},"getting_started/index.html":{},"getting_started/index.html#quickstart":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{},"home/contributing.html":{},"home/contributing.html#issue-page":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{}}],["info:openhivenpy.gateway.http:[http",{"_index":852,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["info:openhivenpy.gateway.ws:[websocket",{"_index":854,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["info:openhivenpy.types.hiven_client:[cli",{"_index":857,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["inform",{"_index":515,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/event_handling.html":{},"getting_started/event_handling.html#event-handling":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{},"home/bug_reporting.html":{},"home/bug_reporting.html#bug-reporting":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#issue-page":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{},"setup/index.html":{},"setup/index.html#setup-of-a-bot":{}},"title":{}}],["inherit",{"_index":737,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-userclient":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["init",{"_index":165,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#changed_1":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{}},"title":{}}],["init_client_user_obj",{"_index":1055,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{}}}],["init_read_st",{"_index":1069,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{}},"title":{}}],["init_st",{"_index":577,"text":{"api_reference/swarm_events.html":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{}},"title":{"api_reference/swarm_events.html#init_state":{}}}],["initi",{"_index":856,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["initialis",{"_index":255,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#added_4":{},"changelog.html#changed_4":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.initialised":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.initialised":{}}}],["input",{"_index":188,"text":{"changelog.html":{},"changelog.html#changed_1":{},"getting_started/logging.html":{},"getting_started/logging.html#specifying-the-log-level":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["insert",{"_index":763,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["insid",{"_index":213,"text":{"changelog.html":{},"changelog.html#added_3":{},"changelog.html#removed_1":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.entity.Entity":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.resource_pointers":{},"reference/types.html#openhivenpy.types.message.Message.house":{},"reference/types.html#openhivenpy.types.message.Message.house_id":{},"reference/types.html#openhivenpy.types.message.Message.is_house_message":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.client_user":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.last_message_id":{},"reference/types.html#openhivenpy.types.textroom.TextRoom":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.is_house_typing":{}},"title":{}}],["inspect",{"_index":1003,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{}},"title":{}}],["instal",{"_index":690,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{"getting_started/index.html#installation":{}}}],["instanc",{"_index":286,"text":{"changelog.html":{},"changelog.html#changed_4":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.session":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.house":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.author":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.recipient":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{}}],["instanti",{"_index":324,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["instead",{"_index":346,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"changelog.html":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["int",{"_index":1043,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{}},"title":{}}],["integ",{"_index":284,"text":{"changelog.html":{},"changelog.html#changed_4":{}},"title":{}}],["integr",{"_index":240,"text":{"changelog.html":{},"changelog.html#added_4":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"home/contributing.html":{},"home/contributing.html#using-github":{}},"title":{}}],["intend",{"_index":1054,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{}},"title":{}}],["inter",{"_index":410,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{}},"title":{}}],["interact",{"_index":470,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#the-hiven-swarm":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{}},"title":{}}],["interfac",{"_index":118,"text":{"changelog.html":{},"changelog.html#added_1":{}},"title":{}}],["interfer",{"_index":1325,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["intern",{"_index":405,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["internal_server_error",{"_index":402,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{}},"title":{"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{}}}],["interv",{"_index":1258,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["intro",{"_index":806,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{}},"title":{}}],["invalid",{"_index":1291,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["invalid/do",{"_index":1127,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{}},"title":{}}],["invalidpasseddataerror",{"_index":1028,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{}},"title":{}}],["invalidtokenerror",{"_index":1290,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["investig",{"_index":1007,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["invit",{"_index":354,"text":{"changelog.html":{},"changelog.html#changed_5":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.invite.Invite":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{"reference/types.html#openhivenpy.types.invite.Invite":{}}}],["io",{"_index":462,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{}},"title":{}}],["is/ar",{"_index":1566,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{}},"title":{}}],["is_house_messag",{"_index":1541,"text":{"reference/types.html":{}},"title":{"reference/types.html#openhivenpy.types.message.Message.is_house_message":{}}}],["is_house_typ",{"_index":1603,"text":{"reference/types.html":{}},"title":{"reference/types.html#openhivenpy.types.usertyping.UserTyping.is_house_typing":{}}}],["isawait",{"_index":1097,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{}},"title":{}}],["iscoroutinefunct",{"_index":1098,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{}},"title":{}}],["isinst",{"_index":1458,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{}},"title":{}}],["issu",{"_index":331,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"changelog.html":{},"changelog.html#changed_5":{},"getting_started/logging.html":{},"getting_started/logging.html#logging-and-debugging":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"home/contributing.html#issue-page":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{"home/contributing.html#issue-page":{},"home/troubleshooting.html#issues-downloading-the-module":{}}}],["it'",{"_index":297,"text":{"changelog.html":{},"changelog.html#added_5":{},"getting_started/index.html":{},"getting_started/index.html#using-a-botclient":{},"home/contributing.html":{},"home/contributing.html#using-github":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.embed.Embed.url":{},"reference/types.html#openhivenpy.types.entity.Entity.resource_pointers":{}},"title":{}}],["item",{"_index":1047,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.edit":{}},"title":{}}],["item_data",{"_index":1018,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{}},"title":{}}],["itself",{"_index":180,"text":{"changelog.html":{},"changelog.html#changed_1":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{}},"title":{}}],["ix",{"_index":668,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_update":{}},"title":{}}],["javascript",{"_index":729,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{}},"title":{}}],["join",{"_index":1090,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.joined_at":{},"reference/types.html#openhivenpy.types.member.Member.joined_house_at":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{}}],["join_token",{"_index":660,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_update":{}},"title":{}}],["joined_at",{"_index":349,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#member":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"changelog.html":{},"changelog.html#changed_5":{},"changelog.html#removed_4":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.joined_house_at":{}},"title":{"reference/types.html#openhivenpy.types.member.Member.joined_at":{}}}],["joined_house_at",{"_index":1527,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{}},"title":{"reference/types.html#openhivenpy.types.member.Member.joined_house_at":{}}}],["json",{"_index":299,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/object_reference.html":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_delete":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_leave":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_delete":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#role_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_delete":{},"api_reference/swarm_events.html#room_update":{},"api_reference/swarm_events.html#typing_start":{},"api_reference/swarm_events.html#user_update":{},"changelog.html":{},"changelog.html#added_5":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"getting_started/index.html#the-hiven-swarm":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{"api_reference/hiven_restapi.html#writing-a-request-with-a-json-body":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#json-object-reference":{}}}],["json_decod",{"_index":1404,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["json_valid",{"_index":1447,"text":{"reference/types.html":{}},"title":{"reference/types.html#openhivenpy.types.attachment.Attachment.json_validator":{},"reference/types.html#openhivenpy.types.context.Context.json_validator":{},"reference/types.html#openhivenpy.types.embed.Embed.json_validator":{},"reference/types.html#openhivenpy.types.entity.Entity.json_validator":{},"reference/types.html#openhivenpy.types.house.House.json_validator":{},"reference/types.html#openhivenpy.types.house.LazyHouse.json_validator":{},"reference/types.html#openhivenpy.types.invite.Invite.json_validator":{},"reference/types.html#openhivenpy.types.member.Member.json_validator":{},"reference/types.html#openhivenpy.types.mention.Mention.json_validator":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.json_validator":{},"reference/types.html#openhivenpy.types.message.Message.json_validator":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.json_validator":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.json_validator":{},"reference/types.html#openhivenpy.types.relationship.Relationship.json_validator":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.json_validator":{},"reference/types.html#openhivenpy.types.user.LazyUser.json_validator":{},"reference/types.html#openhivenpy.types.user.User.json_validator":{}}}],["jsondecodeerror",{"_index":1415,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["k",{"_index":437,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_update":{}},"title":{}}],["keep",{"_index":58,"text":{"changelog.html":{},"changelog.html#changelog":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/index.html":{},"getting_started/index.html#the-hiven-swarm":{},"home/contributing.html":{},"home/contributing.html#issue-page":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["key",{"_index":711,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{}},"title":{}}],["key/nam",{"_index":1123,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{}},"title":{}}],["keyboardinterrupt",{"_index":1292,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["keyerror",{"_index":1144,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{}},"title":{}}],["kick",{"_index":1531,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.member.Member.kick":{}},"title":{"reference/types.html#openhivenpy.types.member.Member.kick":{}}}],["kind",{"_index":959,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["klatzer",{"_index":935,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["klatzer/openhiven.py/archive/main.zip",{"_index":703,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["know",{"_index":834,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{}},"title":{}}],["known",{"_index":982,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["kwarg",{"_index":116,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{}},"title":{"reference/events.html#openhivenpy.events.SingleDispatchEventListener.kwargs":{}}}],["languag",{"_index":728,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{}},"title":{}}],["larger",{"_index":682,"text":{"getting_started/index.html":{},"getting_started/index.html#quickstart":{}},"title":{}}],["last",{"_index":1560,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.last_message_id":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.last_message_id":{}},"title":{}}],["last_message_id",{"_index":282,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#changed_4":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{}},"title":{"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.last_message_id":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.last_message_id":{}}}],["last_permission_upd",{"_index":564,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#member":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{}},"title":{}}],["last_updated_at",{"_index":562,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{}},"title":{}}],["later",{"_index":371,"text":{"changelog.html":{},"changelog.html#removed_4":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{}},"title":{}}],["latest",{"_index":230,"text":{"changelog.html":{},"changelog.html#removed_2":{}},"title":{}}],["lazi",{"_index":536,"text":{"api_reference/object_reference.html":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.user.LazyUser":{}},"title":{"api_reference/object_reference.html#lazy-user":{}}}],["lazyhous",{"_index":1434,"text":{"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{}},"title":{"reference/types.html#openhivenpy.types.house.LazyHouse":{}}}],["lazyus",{"_index":1340,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{"reference/types.html#openhivenpy.types.user.LazyUser":{}}}],["lead",{"_index":1284,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{}},"title":{}}],["leak",{"_index":835,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{}},"title":{}}],["leav",{"_index":1506,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.leave":{}},"title":{"reference/types.html#openhivenpy.types.house.House.leave":{}}}],["legaci",{"_index":997,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["len",{"_index":1211,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["length",{"_index":629,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_join":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{}},"title":{}}],["less",{"_index":734,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["level",{"_index":571,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#role":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#role_update":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{"getting_started/logging.html#specifying-the-log-level":{}}}],["levelname)",{"_index":880,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["li",{"_index":550,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#member":{},"api_reference/object_reference.html#privateroom":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{}},"title":{}}],["liabil",{"_index":971,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["liabl",{"_index":968,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["lib",{"_index":1471,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.resource_pointers":{}},"title":{}}],["librari",{"_index":174,"text":{"changelog.html":{},"changelog.html#added_4":{},"changelog.html#changed_1":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"getting_started/index.html#the-hiven-swarm":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["licens",{"_index":227,"text":{"changelog.html":{},"changelog.html#removed_2":{},"home/license.html":{},"home/license.html#license":{}},"title":{"home/license.html":{},"home/license.html#license":{}}}],["lifesign",{"_index":522,"text":{"api_reference/hiven_swarm.html":{}},"title":{"api_reference/hiven_swarm.html#lifesignal":{}}}],["limit",{"_index":151,"text":{"changelog.html":{},"changelog.html#added_1":{},"home/license.html":{},"home/license.html#license":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.account":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.application":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.account":{},"reference/types.html#openhivenpy.types.user.LazyUser.application":{},"reference/types.html#openhivenpy.types.user.User.email":{}},"title":{}}],["line",{"_index":510,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{}},"title":{}}],["link",{"_index":1241,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.header":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.icon":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.header":{},"reference/types.html#openhivenpy.types.user.LazyUser.icon":{}},"title":{}}],["linux",{"_index":991,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["list",{"_index":338,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"changelog.html":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.house_ids":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.room_ids":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.entities":{},"reference/types.html#openhivenpy.types.house.House.members":{},"reference/types.html#openhivenpy.types.house.House.roles":{},"reference/types.html#openhivenpy.types.house.House.users":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.rooms":{},"reference/types.html#openhivenpy.types.message.Message.recipient_ids":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.recipients":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{"reference/types.html#list-of-represented-types":{}}}],["list[ent",{"_index":1171,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{}},"title":{}}],["list[memb",{"_index":1158,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{}},"title":{}}],["listen",{"_index":21,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#added_1":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#using-a-userclient":{},"index.html":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{}},"title":{"getting_started/index.html#event-listening-with-the-eventhandler":{},"reference/events.html":{},"reference/events.html#hiveneventhandler-and-listeners":{}}}],["load",{"_index":183,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"changelog.html":{},"changelog.html#changed_1":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["local",{"_index":821,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["localstorage['hiven",{"_index":820,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{}},"title":{}}],["locat",{"_index":427,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.location":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.user.User.location":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.location":{},"reference/types.html#openhivenpy.types.user.User.location":{}}}],["log",{"_index":212,"text":{"api_reference/hiven_swarm.html":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#removed_1":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"getting_started/logging.html#logging-and-debugging":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.client_member":{}},"title":{"api_reference/hiven_swarm.html#logging-into-the-hiven-swarm":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"getting_started/logging.html#logging-and-debugging":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{}}}],["log_parser_error",{"_index":1159,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{}}],["log_traceback",{"_index":1024,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["log_traceback(level='error",{"_index":365,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["log_type_except",{"_index":1440,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.feed.Feed.__init__":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{}}],["log_websocket",{"_index":1244,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.log_websocket":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.log_websocket":{}}}],["logger",{"_index":867,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["logging.filehandl",{"_index":885,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["logging.formatt",{"_index":884,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["logic",{"_index":770,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["long",{"_index":474,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"home/contributing.html":{},"home/contributing.html#summary":{}},"title":{}}],["longer",{"_index":1425,"text":{"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["look",{"_index":684,"text":{"getting_started/index.html":{},"getting_started/index.html#quickstart":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["loop",{"_index":106,"text":{"changelog.html":{},"changelog.html#added_1":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#quickstart":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.loop":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.loop":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.loop":{},"reference/http.html#openhivenpy.gateway.http.HTTP.loop":{}}}],["lot",{"_index":837,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{}},"title":{}}],["lower",{"_index":846,"text":{"getting_started/logging.html":{},"getting_started/logging.html#specifying-the-log-level":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{}},"title":{}}],["luna",{"_index":934,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["m",{"_index":695,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["made",{"_index":76,"text":{"changelog.html":{},"changelog.html#changed":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"home/contributing.html#summary":{},"home/contributing.html#using-github":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.mention.Mention.timestamp":{}},"title":{}}],["mail",{"_index":1237,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.User.email":{}},"title":{}}],["main",{"_index":54,"text":{"changelog.html":{},"changelog.html#changelog":{},"changelog.html#v02dev1-2021-08-13":{},"getting_started/index.html":{},"getting_started/index.html#using-a-botclient":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["make",{"_index":490,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#using-a-userclient":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["manag",{"_index":902,"text":{"home/contributing.html":{},"home/contributing.html#using-github":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["mani",{"_index":688,"text":{"getting_started/index.html":{},"getting_started/index.html#environment":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["manifest.in",{"_index":220,"text":{"changelog.html":{},"changelog.html#changed_3":{}},"title":{}}],["manual",{"_index":1132,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{}},"title":{}}],["map",{"_index":588,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#init_state":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{}},"title":{}}],["mark",{"_index":1557,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{}},"title":{}}],["mark_as_read",{"_index":1556,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{}},"title":{"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{}}}],["marshmallow",{"_index":247,"text":{"changelog.html":{},"changelog.html#added_4":{}},"title":{}}],["max_ag",{"_index":1517,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{}},"title":{"reference/types.html#openhivenpy.types.invite.Invite.max_age":{}}}],["max_us",{"_index":1494,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{}},"title":{"reference/types.html#openhivenpy.types.invite.Invite.max_uses":{}}}],["maxim",{"_index":1495,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{}},"title":{}}],["mayb",{"_index":889,"text":{"home/contributing.html":{},"home/contributing.html#contributing":{}},"title":{}}],["mean",{"_index":102,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#changed_1":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#the-hiven-swarm":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["meantim",{"_index":1426,"text":{"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["media",{"_index":401,"text":{"api_reference/hiven_exceptions.html":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.media_url":{}},"title":{"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{}}}],["media_url",{"_index":607,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{}},"title":{"reference/types.html#openhivenpy.types.attachment.Attachment.media_url":{}}}],["mem",{"_index":1181,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{}},"title":{}}],["mem_data",{"_index":1163,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{}},"title":{}}],["mem_id",{"_index":1040,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{}},"title":{}}],["member",{"_index":350,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#member":{},"api_reference/object_reference.html#role":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#message_create":{},"changelog.html":{},"changelog.html#changed_5":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.client_member":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.members":{},"reference/types.html#openhivenpy.types.house.House.users":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.id":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.member.Member.roles":{},"reference/types.html#openhivenpy.types.member.Member.user_id":{}},"title":{"api_reference/object_reference.html#member":{},"reference/types.html#openhivenpy.types.house.House.members":{},"reference/types.html#openhivenpy.types.member.Member":{}}}],["member_",{"_index":1512,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{}},"title":{}}],["member_id",{"_index":1063,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.get_member":{}},"title":{}}],["members_data",{"_index":1161,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{}},"title":{}}],["membership",{"_index":1068,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{}},"title":{}}],["mention",{"_index":194,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"changelog.html":{},"changelog.html#removed":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.mention.Mention":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.author":{},"reference/types.html#openhivenpy.types.mention.Mention.timestamp":{},"reference/types.html#openhivenpy.types.mention.Mention.user":{},"reference/types.html#openhivenpy.types.mention.Mention.user_id":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.mentions":{}},"title":{"reference/types.html#openhivenpy.types.mention.Mention":{},"reference/types.html#openhivenpy.types.message.Message.mentions":{}}}],["mention_count",{"_index":596,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{}},"title":{}}],["merchant",{"_index":962,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["merg",{"_index":945,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["messag",{"_index":88,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/object_reference.html":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_3":{},"changelog.html#added_4":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#the-hiven-swarm":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.message_broker":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.attachment.Attachment":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.context.Context.timestamp":{},"reference/types.html#openhivenpy.types.embed.Embed":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.author":{},"reference/types.html#openhivenpy.types.message.DeletedMessage":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__str__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.message_id":{},"reference/types.html#openhivenpy.types.message.Message":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__str__":{},"reference/types.html#openhivenpy.types.message.Message.attachment":{},"reference/types.html#openhivenpy.types.message.Message.bucket":{},"reference/types.html#openhivenpy.types.message.Message.content":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.device_id":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.edited_at":{},"reference/types.html#openhivenpy.types.message.Message.embed":{},"reference/types.html#openhivenpy.types.message.Message.exploding":{},"reference/types.html#openhivenpy.types.message.Message.exploding_age":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.house":{},"reference/types.html#openhivenpy.types.message.Message.house_id":{},"reference/types.html#openhivenpy.types.message.Message.id":{},"reference/types.html#openhivenpy.types.message.Message.is_house_message":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.message.Message.mentions":{},"reference/types.html#openhivenpy.types.message.Message.room":{},"reference/types.html#openhivenpy.types.message.Message.timestamp":{},"reference/types.html#openhivenpy.types.message.Message.type":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.last_message_id":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.last_message_id":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{"api_reference/hiven_request_endpoints.html#message-endpoints":{},"api_reference/object_reference.html#message":{},"reference/types.html#openhivenpy.types.message.Message":{}}}],["message)",{"_index":882,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["message_brok",{"_index":1136,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/hivenclient.html":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.message_broker":{}}}],["message_cr",{"_index":602,"text":{"api_reference/swarm_events.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{}},"title":{"api_reference/swarm_events.html#message_create":{}}}],["message_delet",{"_index":612,"text":{"api_reference/swarm_events.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{}},"title":{"api_reference/swarm_events.html#message_delete":{}}}],["message_id",{"_index":595,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_delete":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{}},"title":{"reference/types.html#openhivenpy.types.message.DeletedMessage.message_id":{}}}],["message_upd",{"_index":40,"text":{"api_reference/swarm_events.html":{},"index.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{}},"title":{"api_reference/swarm_events.html#message_update":{}}}],["messagebrok",{"_index":681,"text":{"getting_started/index.html":{},"getting_started/index.html#quickstart":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/hivenclient.html":{}},"title":{}}],["messages_",{"_index":1582,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{}},"title":{}}],["metadata",{"_index":464,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_update":{}},"title":{}}],["method",{"_index":298,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#added_5":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache-methods":{},"reference/events.html#openhivenpy.events.DispatchEventListener-methods":{},"reference/events.html#openhivenpy.events.HivenEventHandler-methods":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener-methods":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener-methods":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers-methods":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient-methods":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient-methods":{},"reference/http.html#openhivenpy.gateway.http.HTTP-methods":{},"reference/types.html#openhivenpy.types.attachment.Attachment-methods":{},"reference/types.html#openhivenpy.types.context.Context-methods":{},"reference/types.html#openhivenpy.types.embed.Embed-methods":{},"reference/types.html#openhivenpy.types.entity.Entity-methods":{},"reference/types.html#openhivenpy.types.house.House-methods":{},"reference/types.html#openhivenpy.types.house.LazyHouse-methods":{},"reference/types.html#openhivenpy.types.invite.Invite-methods":{},"reference/types.html#openhivenpy.types.member.Member-methods":{},"reference/types.html#openhivenpy.types.mention.Mention-methods":{},"reference/types.html#openhivenpy.types.message.DeletedMessage-methods":{},"reference/types.html#openhivenpy.types.message.Message-methods":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom-methods":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom-methods":{},"reference/types.html#openhivenpy.types.relationship.Relationship-methods":{},"reference/types.html#openhivenpy.types.textroom.TextRoom-methods":{},"reference/types.html#openhivenpy.types.user.LazyUser-methods":{},"reference/types.html#openhivenpy.types.user.User-methods":{}}}],["mfa",{"_index":1247,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.mfa_enabled":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.User.mfa_enabled":{}},"title":{}}],["mfa_en",{"_index":432,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"reference/hivenclient.html":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.User.__init__":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.mfa_enabled":{},"reference/types.html#openhivenpy.types.user.User.mfa_enabled":{}}}],["microsoft",{"_index":996,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["min",{"_index":1408,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["mind",{"_index":911,"text":{"home/contributing.html":{},"home/contributing.html#issue-page":{}},"title":{}}],["miss",{"_index":259,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_delete":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#role_update":{},"changelog.html":{},"changelog.html#added_4":{},"changelog.html#added_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{}}],["mistyp",{"_index":441,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{}},"title":{}}],["mit",{"_index":930,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["mode",{"_index":875,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["modern",{"_index":689,"text":{"getting_started/index.html":{},"getting_started/index.html#environment":{}},"title":{}}],["modifi",{"_index":944,"text":{"home/license.html":{},"home/license.html#license":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{}}],["modul",{"_index":237,"text":{"changelog.html":{},"changelog.html#added_4":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#environment":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#the-hiven-swarm":{},"getting_started/logging.html":{},"getting_started/logging.html#logging-and-debugging":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{},"home/troubleshooting.html":{}},"title":{"home/troubleshooting.html#issues-downloading-the-module":{}}}],["moment",{"_index":1208,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{}},"title":{}}],["more",{"_index":235,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"changelog.html":{},"changelog.html#added_4":{},"getting_started/index.html":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#using-a-botclient":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.user.LazyUser":{}},"title":{}}],["motiv",{"_index":917,"text":{"home/contributing.html":{},"home/contributing.html#contributing-changes":{}},"title":{}}],["move",{"_index":316,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["mp",{"_index":628,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_member_join":{}},"title":{}}],["ms",{"_index":1243,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.heartbeat":{}},"title":{}}],["msg",{"_index":744,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{}},"title":{}}],["msg='traceback",{"_index":366,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["msg_data",{"_index":1196,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{}},"title":{}}],["much",{"_index":913,"text":{"home/contributing.html":{},"home/contributing.html#issue-page":{}},"title":{}}],["multi",{"_index":1312,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{}},"title":{}}],["multidispatcheventlisten",{"_index":129,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#hiveneventhandler-and-listeners":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{}},"title":{"reference/events.html#openhivenpy.events.MultiDispatchEventListener":{}}}],["multipl",{"_index":285,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#changed_4":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/logging.html":{},"getting_started/logging.html#specifying-the-log-level":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom":{}},"title":{}}],["mute",{"_index":669,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_update":{}},"title":{}}],["n",{"_index":436,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{}},"title":{}}],["na",{"_index":631,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_leave":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{}},"title":{}}],["name",{"_index":223,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#entity":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#relationship":{},"api_reference/object_reference.html#role":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#role_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_update":{},"api_reference/swarm_events.html#user_update":{},"changelog.html":{},"changelog.html#changed_3":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__str__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.name":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.filename":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.name":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__str__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.name":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.__str__":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.name":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.name":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.name":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.name":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.name":{},"reference/types.html#openhivenpy.types.entity.Entity.name":{},"reference/types.html#openhivenpy.types.house.LazyHouse.name":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.name":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.name":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.name":{},"reference/types.html#openhivenpy.types.user.LazyUser.name":{}}}],["name)",{"_index":881,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["nameerror",{"_index":1297,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{}},"title":{}}],["navig",{"_index":817,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{}},"title":{}}],["ne",{"_index":424,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#member":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#relationship":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#user_update":{}},"title":{}}],["neat",{"_index":836,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{}},"title":{}}],["need",{"_index":509,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"getting_started/index.html#the-hiven-swarm":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#using-github":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{}}],["never",{"_index":1214,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{}},"title":{}}],["nevertheless",{"_index":504,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{}},"title":{}}],["new",{"_index":74,"text":{"changelog.html":{},"changelog.html#added":{},"changelog.html#added_1":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#using-github":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{}}],["new_data",{"_index":1156,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{}},"title":{}}],["new_event_loop",{"_index":1326,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["new_hous",{"_index":1175,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{}},"title":{}}],["new_house_data",{"_index":1174,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{}},"title":{}}],["new_us",{"_index":1222,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{}}],["newest",{"_index":993,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["newli",{"_index":1125,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{}},"title":{}}],["next",{"_index":107,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["nice",{"_index":677,"text":{"getting_started/index.html":{},"getting_started/index.html#quickstart":{}},"title":{}}],["no_auth",{"_index":379,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{}},"title":{"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{}}}],["non_buffer_ev",{"_index":1114,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{}},"title":{"reference/events.html#openhivenpy.events.HivenEventHandler.non_buffer_events":{}}}],["none",{"_index":190,"text":{"changelog.html":{},"changelog.html#added_5":{},"changelog.html#changed_1":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.icon":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.house_id":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["noninfring",{"_index":966,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["normal",{"_index":1143,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{}},"title":{}}],["not_found",{"_index":393,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{}},"title":{"api_reference/hiven_exceptions.html#404-not-found-not_found":{}}}],["notabl",{"_index":44,"text":{"changelog.html":{},"changelog.html#changelog":{}},"title":{}}],["note",{"_index":49,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#changelog":{},"changelog.html#v02dev1-2021-08-13":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-userclient":{},"home/contributing.html":{},"home/contributing.html#issue-page":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.user.LazyUser":{}},"title":{}}],["notic",{"_index":784,"text":{"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"home/license.html":{},"home/license.html#license":{}},"title":{}}],["notification_prefer",{"_index":591,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{}},"title":{}}],["notimplementederror",{"_index":1568,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{}},"title":{}}],["now",{"_index":70,"text":{"changelog.html":{},"changelog.html#added":{},"changelog.html#added_5":{},"changelog.html#changed_1":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["ns",{"_index":463,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{}},"title":{}}],["nt",{"_index":425,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#entity":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#relationship":{},"api_reference/object_reference.html#role":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#role_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_update":{},"api_reference/swarm_events.html#typing_start":{},"api_reference/swarm_events.html#user_update":{}},"title":{}}],["nter",{"_index":568,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#entity":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{}},"title":{}}],["null",{"_index":636,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_enter":{}},"title":{}}],["numer",{"_index":1239,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.flags":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.flags":{}},"title":{}}],["o",{"_index":533,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#member":{},"api_reference/object_reference.html#privateroom":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{}},"title":{}}],["objec",{"_index":460,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#member":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#user_update":{}},"title":{}}],["object",{"_index":242,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/object_reference.html":{},"changelog.html":{},"changelog.html#added_4":{},"changelog.html#added_5":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#using-a-userclient":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.http":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.author":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.house":{},"reference/types.html#openhivenpy.types.context.Context.room":{},"reference/types.html#openhivenpy.types.embed.Embed":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.entity.Entity.house":{},"reference/types.html#openhivenpy.types.entity.Entity.resource_pointers":{},"reference/types.html#openhivenpy.types.house.House.client_member":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.owner":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.house":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.author":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.house":{},"reference/types.html#openhivenpy.types.message.Message.house_id":{},"reference/types.html#openhivenpy.types.message.Message.room":{},"reference/types.html#openhivenpy.types.message.Message.room_id":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.recipient":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.user":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.house":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.user.LazyUser":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.author":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.author_id":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.house":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.house_id":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.room":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.room_id":{}},"title":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#json-object-reference":{},"api_reference/object_reference.html#objects-for-the-client-user":{}}}],["objectvalid",{"_index":238,"text":{"changelog.html":{},"changelog.html#added_4":{}},"title":{}}],["obtain",{"_index":941,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["occur",{"_index":376,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#request-exceptions":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#api-request-endpoints":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/hiven_swarm.html":{},"api_reference/hiven_swarm.html#using-the-hiven-swarm":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#json-object-reference":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#hiven-swarm-events":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.member.Member.kick":{}},"title":{}}],["offlin",{"_index":359,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_exit":{},"changelog.html":{},"changelog.html#changed_5":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{}},"title":{}}],["old",{"_index":192,"text":{"changelog.html":{},"changelog.html#removed":{},"changelog.html#removed_2":{}},"title":{}}],["old_hous",{"_index":1194,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{}},"title":{}}],["old_house_data",{"_index":1193,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{}},"title":{}}],["old_us",{"_index":1224,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{}}],["old_user_data",{"_index":1223,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{}}],["on",{"_index":87,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#v02dev1-2021-08-13":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.embed.Embed.description":{},"reference/types.html#openhivenpy.types.message.Message.attachment":{},"reference/types.html#openhivenpy.types.message.Message.embed":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.emoji":{}},"title":{}}],["on_",{"_index":1122,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{}},"title":{}}],["on_batch_house_member_upd",{"_index":643,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{}}}],["on_batch_house_member_update(hous",{"_index":1157,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{}},"title":{}}],["on_connection_queued_start",{"_index":1364,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["on_house_delet",{"_index":306,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"changelog.html":{},"changelog.html#added_5":{}},"title":{}}],["on_house_down",{"_index":649,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{}}}],["on_house_entities_upd",{"_index":314,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"changelog.html":{},"changelog.html#added_5":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{}}}],["on_house_entities_update(ent",{"_index":1170,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{}},"title":{}}],["on_house_join",{"_index":618,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_join":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{}}}],["on_house_join(hous",{"_index":1173,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{}},"title":{}}],["on_house_leav",{"_index":1178,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{}}}],["on_house_leave(hous",{"_index":1179,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{}},"title":{}}],["on_house_member_chunk",{"_index":639,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_members_chunk":{}},"title":{}}],["on_house_member_ent",{"_index":357,"text":{"changelog.html":{},"changelog.html#changed_5":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{}}}],["on_house_member_exit",{"_index":355,"text":{"changelog.html":{},"changelog.html#changed_5":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{}}}],["on_house_member_join",{"_index":625,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_join":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{}}}],["on_house_member_join(memb",{"_index":1185,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{}},"title":{}}],["on_house_member_leav",{"_index":307,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_leave":{},"changelog.html":{},"changelog.html#added_5":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{}}}],["on_house_member_leave(memb",{"_index":1186,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{}},"title":{}}],["on_house_member_offlin",{"_index":356,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_exit":{},"changelog.html":{},"changelog.html#changed_5":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{}}}],["on_house_member_offline(memb",{"_index":1183,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{}},"title":{}}],["on_house_member_onlin",{"_index":358,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_enter":{},"changelog.html":{},"changelog.html#changed_5":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{}}}],["on_house_member_online(memb",{"_index":1180,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{}},"title":{}}],["on_house_member_upd",{"_index":1188,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{}}}],["on_house_member_update(memb",{"_index":1189,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{}},"title":{}}],["on_house_members_chunk",{"_index":1190,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{}}}],["on_house_members_chunk(hous",{"_index":1191,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{}},"title":{}}],["on_house_remov",{"_index":624,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_leave":{}},"title":{}}],["on_house_upd",{"_index":622,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_update":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{}}}],["on_house_update(old_hous",{"_index":1192,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{}},"title":{}}],["on_init",{"_index":578,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{}},"title":{}}],["on_member_upd",{"_index":637,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_update":{}},"title":{}}],["on_message_cr",{"_index":603,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{}}}],["on_message_create(msg",{"_index":1195,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{}},"title":{}}],["on_message_delet",{"_index":613,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_delete":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{}}}],["on_message_delete(msg_id",{"_index":1197,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{}},"title":{}}],["on_message_upd",{"_index":614,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_update":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{}}}],["on_message_update(msg",{"_index":1198,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{}},"title":{}}],["on_presence_upd",{"_index":599,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#presence_update":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{}}}],["on_presence_update(us",{"_index":1199,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{}},"title":{}}],["on_readi",{"_index":764,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["on_relationship_upd",{"_index":600,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#relationship_update":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{}}}],["on_relationship_update(relationship",{"_index":1201,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{}},"title":{}}],["on_request_end",{"_index":1361,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["on_request_except",{"_index":1362,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["on_request_redirect",{"_index":1363,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["on_request_start",{"_index":1359,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["on_response_chunk_receiv",{"_index":1365,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["on_room_cr",{"_index":615,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#room_create":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{}}}],["on_room_create(room",{"_index":1203,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{}},"title":{}}],["on_room_delet",{"_index":1205,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{}}}],["on_room_delete(room",{"_index":1206,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{}},"title":{}}],["on_room_upd",{"_index":616,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#room_delete":{},"api_reference/swarm_events.html#room_update":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{}}}],["on_room_update(room",{"_index":1207,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{}},"title":{}}],["on_typing_start",{"_index":656,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#typing_start":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{}}}],["on_typing_start(us",{"_index":1209,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{}},"title":{}}],["on_user_upd",{"_index":273,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#user_update":{},"changelog.html":{},"changelog.html#added_4":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}}}],["on_user_update(old_us",{"_index":1221,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{}}],["onboard",{"_index":592,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{}},"title":{}}],["onc",{"_index":122,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener":{}},"title":{}}],["onlin",{"_index":634,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_enter":{}},"title":{}}],["onto",{"_index":735,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["op",{"_index":257,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_delete":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_leave":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_delete":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#role_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_delete":{},"api_reference/swarm_events.html#room_update":{},"api_reference/swarm_events.html#typing_start":{},"api_reference/swarm_events.html#user_update":{},"changelog.html":{},"changelog.html#added_4":{}},"title":{}}],["open",{"_index":815,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"home/contributing.html":{},"home/contributing.html#summary":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.open":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.open":{}}}],["openhiven.log",{"_index":871,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["openhiven.pi",{"_index":1,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#environment":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#installation":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#the-hiven-swarm":{},"getting_started/logging.html":{},"getting_started/logging.html#logging-and-debugging":{},"getting_started/logging.html#simple-example-of-logging":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#issue-page":{},"home/contributing.html#using-github":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"home/troubleshooting.html#unexpected-behavior":{},"index.html":{}},"title":{"getting_started/index.html#using-openhivenpy":{}}}],["openhivenpi",{"_index":696,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#installation":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"reference/hivenclient.html":{}},"title":{}}],["openhivenpy.botcli",{"_index":779,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-botclient":{}},"title":{}}],["openhivenpy.client.botclient.botcli",{"_index":1345,"text":{"reference/hivenclient.html":{}},"title":{}}],["openhivenpy.client.cache.clientcach",{"_index":1008,"text":{"reference/cache.html":{}},"title":{}}],["openhivenpy.client.hivenclient.hivencli",{"_index":1227,"text":{"reference/hivenclient.html":{}},"title":{}}],["openhivenpy.client.userclient.usercli",{"_index":1329,"text":{"reference/hivenclient.html":{}},"title":{}}],["openhivenpy.env",{"_index":184,"text":{"changelog.html":{},"changelog.html#changed_1":{}},"title":{}}],["openhivenpy.events.dispatcheventlisten",{"_index":1072,"text":{"reference/events.html":{}},"title":{}}],["openhivenpy.events.event_parsers.hivenpars",{"_index":1150,"text":{"reference/hiven_parsers.html":{}},"title":{}}],["openhivenpy.events.hiveneventhandl",{"_index":1111,"text":{"reference/events.html":{}},"title":{}}],["openhivenpy.events.multidispatcheventlisten",{"_index":1100,"text":{"reference/events.html":{}},"title":{}}],["openhivenpy.events.singledispatcheventlisten",{"_index":1105,"text":{"reference/events.html":{}},"title":{}}],["openhivenpy.exceptions.exception.invalidtoken",{"_index":760,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["openhivenpy.gateway.http.http",{"_index":1346,"text":{"reference/http.html":{}},"title":{}}],["openhivenpy.typ",{"_index":783,"text":{"getting_started/index.html":{},"getting_started/index.html#hiven-types":{}},"title":{}}],["openhivenpy.types.attachment.attach",{"_index":1438,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.context.context",{"_index":1448,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.embed.emb",{"_index":1460,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.entity.ent",{"_index":1469,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.feed.fe",{"_index":1477,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.house.hous",{"_index":1479,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.house.lazyhous",{"_index":1508,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.invite.invit",{"_index":1514,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.member.memb",{"_index":1525,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.mention.ment",{"_index":1532,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.message.deletedmessag",{"_index":1535,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.message.messag",{"_index":1538,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.private_room.privategrouproom",{"_index":1570,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.private_room.privateroom",{"_index":1559,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.relationship.relationship",{"_index":1573,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.textroom.textroom",{"_index":1576,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.us",{"_index":1335,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{}},"title":{}}],["openhivenpy.types.user.lazyus",{"_index":1592,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.user.us",{"_index":1584,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.types.usertyping.usertyp",{"_index":1602,"text":{"reference/types.html":{}},"title":{}}],["openhivenpy.usercli",{"_index":747,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["openhivenpy\\client\\cache.pi",{"_index":1012,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{}},"title":{}}],["openhivenpy\\client\\hivenclient.pi",{"_index":1265,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__str__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["openhivenpy\\client\\userclient.pi",{"_index":1331,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{}},"title":{}}],["openhivenpy\\events\\__init__.pi",{"_index":1082,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__str__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{}},"title":{}}],["openhivenpy\\events\\event_parsers.pi",{"_index":1151,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.__init__":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{}}],["openhivenpy\\gateway\\http.pi",{"_index":1348,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__str__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["openhivenpy\\types\\attachment.pi",{"_index":1439,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{}},"title":{}}],["openhivenpy\\types\\context.pi",{"_index":1450,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{}},"title":{}}],["openhivenpy\\types\\embed.pi",{"_index":1463,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{}},"title":{}}],["openhivenpy\\types\\entity.pi",{"_index":1472,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{}},"title":{}}],["openhivenpy\\types\\feed.pi",{"_index":1478,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.feed.Feed.__init__":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{}},"title":{}}],["openhivenpy\\types\\house.pi",{"_index":1480,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__str__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{}},"title":{}}],["openhivenpy\\types\\invite.pi",{"_index":1518,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{}},"title":{}}],["openhivenpy\\types\\member.pi",{"_index":1528,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.kick":{}},"title":{}}],["openhivenpy\\types\\mention.pi",{"_index":1533,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{}},"title":{}}],["openhivenpy\\types\\message.pi",{"_index":1536,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__str__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__str__":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{}},"title":{}}],["openhivenpy\\types\\private_room.pi",{"_index":1561,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{}},"title":{}}],["openhivenpy\\types\\relationship.pi",{"_index":1574,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{}},"title":{}}],["openhivenpy\\types\\textroom.pi",{"_index":1579,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["openhivenpy\\types\\user.pi",{"_index":1585,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{}}],["openhivenpy\\types\\usertyping.pi",{"_index":1604,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{}}],["opensourc",{"_index":922,"text":{"home/contributing.html":{},"home/contributing.html#summary":{}},"title":{}}],["optimis",{"_index":838,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{}},"title":{}}],["option",{"_index":310,"text":{"changelog.html":{},"changelog.html#added_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/hiven_parsers.html":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{}},"title":{"reference/http.html#openhivenpy.gateway.http.HTTP.options":{}}}],["optional[aiohttp.clientsess",{"_index":1355,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["optional[asyncio.events.abstracteventloop",{"_index":1319,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["optional[dict",{"_index":1300,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{}},"title":{}}],["optional[ent",{"_index":1491,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{}},"title":{}}],["optional[int",{"_index":1257,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["optional[invit",{"_index":1496,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{}},"title":{}}],["optional[list[messag",{"_index":1581,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{}},"title":{}}],["optional[memb",{"_index":1505,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.get_member":{}},"title":{}}],["optional[messag",{"_index":1567,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{}}],["optional[openhivenpy.types.entity.ent",{"_index":1308,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{}},"title":{}}],["optional[openhivenpy.types.house.hous",{"_index":1309,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{}},"title":{}}],["optional[openhivenpy.types.member.memb",{"_index":1310,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{}},"title":{}}],["optional[openhivenpy.types.private_room.privategrouproom",{"_index":1313,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{}},"title":{}}],["optional[openhivenpy.types.private_room.privateroom",{"_index":1314,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{}},"title":{}}],["optional[openhivenpy.types.relationship.relationship",{"_index":1315,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{}},"title":{}}],["optional[openhivenpy.types.textroom.textroom",{"_index":1316,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{}},"title":{}}],["optional[openhivenpy.types.user.us",{"_index":1317,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{}},"title":{}}],["optional[str",{"_index":1254,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["optional[textroom",{"_index":1499,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.get_room":{}},"title":{}}],["origin",{"_index":762,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.house_id":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.message_id":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.room_id":{}},"title":{}}],["os",{"_index":1273,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["os.getenv",{"_index":1318,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["os.getenv('hiven_token",{"_index":1285,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["otherwis",{"_index":976,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["out",{"_index":478,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"home/contributing.html":{},"home/contributing.html#summary":{},"home/license.html":{},"home/license.html#license":{},"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["outdat",{"_index":792,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/event_handling.html":{},"getting_started/event_handling.html#event-handling":{},"home/bug_reporting.html":{},"home/bug_reporting.html#bug-reporting":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"home/troubleshooting.html#troubleshooting":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"setup/index.html":{},"setup/index.html#setup-of-a-bot":{}},"title":{}}],["outgo",{"_index":554,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{}},"title":{}}],["outgoing_",{"_index":1341,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{}},"title":{}}],["output",{"_index":845,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"getting_started/logging.html#logging-and-debugging":{},"getting_started/logging.html#specifying-the-log-level":{}},"title":{}}],["outsid",{"_index":538,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["over",{"_index":723,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#the-hiven-swarm":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.raw":{}},"title":{}}],["overwrit",{"_index":1286,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["overwritten",{"_index":302,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"changelog.html":{},"changelog.html#added_5":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{}},"title":{}}],["ow",{"_index":438,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_update":{}},"title":{}}],["owner",{"_index":413,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"home/contributing.html":{},"home/contributing.html#summary":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.owner":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.owner_id":{}},"title":{"reference/types.html#openhivenpy.types.house.House.owner":{}}}],["owner_id",{"_index":546,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{}},"title":{"reference/types.html#openhivenpy.types.house.LazyHouse.owner_id":{}}}],["packag",{"_index":987,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["page",{"_index":373,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#request-exceptions":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#api-request-endpoints":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/hiven_swarm.html":{},"api_reference/hiven_swarm.html#using-the-hiven-swarm":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#json-object-reference":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#hiven-swarm-events":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/event_handling.html":{},"getting_started/event_handling.html#event-handling":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#quickstart":{},"home/bug_reporting.html":{},"home/bug_reporting.html#bug-reporting":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#issue-page":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{},"home/troubleshooting.html#unexpected-behavior":{},"setup/index.html":{},"setup/index.html#setup-of-a-bot":{}},"title":{"home/contributing.html#issue-page":{}}}],["pair",{"_index":712,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["parallel",{"_index":680,"text":{"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["param",{"_index":303,"text":{"changelog.html":{},"changelog.html#added_5":{},"changelog.html#changed_5":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{}}],["paramet",{"_index":153,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_5":{},"changelog.html#changed_3":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{}}],["parent",{"_index":390,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.house_id":{},"reference/types.html#openhivenpy.types.member.Member.house":{},"reference/types.html#openhivenpy.types.member.Member.house_id":{},"reference/types.html#openhivenpy.types.message.Message.author":{},"reference/types.html#openhivenpy.types.message.Message.author_id":{},"reference/types.html#openhivenpy.types.message.Message.house":{},"reference/types.html#openhivenpy.types.message.Message.house_id":{},"reference/types.html#openhivenpy.types.message.Message.room":{},"reference/types.html#openhivenpy.types.message.Message.room_id":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.house":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.house_id":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.author_id":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.house_id":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.room_id":{}},"title":{}}],["parent_ent",{"_index":389,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{}},"title":{}}],["parent_entity_doesnt_exist",{"_index":387,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{}},"title":{"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{}}}],["parent_entity_id",{"_index":1498,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_room":{}},"title":{}}],["pars",{"_index":520,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{}},"title":{}}],["parser",{"_index":580,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#hiven-parsers":{}}}],["particular",{"_index":964,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["pass",{"_index":25,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_5":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#the-hiven-swarm":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"index.html":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.application":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.application":{}},"title":{"api_reference/hiven_restapi.html#passing-values-in-the-body":{}}}],["patch",{"_index":434,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{}},"title":{"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{}}}],["peopl",{"_index":908,"text":{"home/contributing.html":{},"home/contributing.html#issue-page":{}},"title":{}}],["pep",{"_index":985,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["perform",{"_index":406,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["permiss",{"_index":936,"text":{"home/license.html":{},"home/license.html#license":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.default_permissions":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.member.Member.kick":{}},"title":{}}],["permission_overrid",{"_index":547,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{}},"title":{}}],["permit",{"_index":950,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["person",{"_index":940,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["php",{"_index":731,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{}},"title":{}}],["ping",{"_index":369,"text":{"changelog.html":{},"changelog.html#removed_4":{}},"title":{}}],["pip",{"_index":692,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["place",{"_index":910,"text":{"home/contributing.html":{},"home/contributing.html#issue-page":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["plan",{"_index":687,"text":{"getting_started/index.html":{},"getting_started/index.html#environment":{}},"title":{}}],["platform",{"_index":807,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{}},"title":{}}],["pleas",{"_index":801,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"home/contributing.html":{},"home/contributing.html#issue-page":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["poi",{"_index":567,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#entity":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{}},"title":{}}],["point",{"_index":480,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{}},"title":{}}],["pop",{"_index":1446,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{}},"title":{}}],["popul",{"_index":1033,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{}},"title":{}}],["popular",{"_index":984,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["portal",{"_index":1577,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.textroom.TextRoom":{}},"title":{}}],["portion",{"_index":957,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["posit",{"_index":548,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#entity":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#role":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#role_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_update":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.entity.Entity.position":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.position":{}},"title":{"reference/types.html#openhivenpy.types.entity.Entity.position":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.position":{}}}],["possibl",{"_index":109,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_4":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"home/contributing.html#issue-page":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{},"reference/types.html#openhivenpy.types.textroom.TextRoom":{}},"title":{}}],["post",{"_index":468,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersmerooms":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{"reference/http.html#openhivenpy.gateway.http.HTTP.post":{}}}],["practic",{"_index":506,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{}},"title":{}}],["practis",{"_index":732,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{}},"title":{}}],["pre",{"_index":585,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{}},"title":{}}],["predic",{"_index":1120,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{}},"title":{}}],["prefix",{"_index":320,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["presenc",{"_index":202,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"changelog.html":{},"changelog.html#added_2":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.presence":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.user.User.presence":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.presence":{},"reference/types.html#openhivenpy.types.user.User.presence":{}}}],["presence_upd",{"_index":39,"text":{"api_reference/swarm_events.html":{},"index.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{}},"title":{"api_reference/swarm_events.html#presence_update":{}}}],["primarili",{"_index":1101,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener":{}},"title":{}}],["print",{"_index":745,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["prior",{"_index":340,"text":{"changelog.html":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.context.Context":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{}},"title":{}}],["privat",{"_index":467,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersmerooms":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#typing_start":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.room_ids":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.room_id":{},"reference/types.html#openhivenpy.types.message.Message.recipient_ids":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{}},"title":{}}],["private_*room",{"_index":1042,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{}},"title":{}}],["private_room",{"_index":597,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{}},"title":{}}],["privategrouproom",{"_index":263,"text":{"changelog.html":{},"changelog.html#added_4":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.client_user":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.description":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.emoji":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.id":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.last_message_id":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.name":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.type":{}},"title":{"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom":{}}}],["privateroom",{"_index":262,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"changelog.html":{},"changelog.html#added_4":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.description":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.emoji":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.id":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.name":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.type":{}},"title":{"api_reference/object_reference.html#privateroom":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom":{}}}],["probabl",{"_index":1526,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.member.Member.joined_at":{},"reference/types.html#openhivenpy.types.member.Member.joined_house_at":{}},"title":{}}],["problem",{"_index":842,"text":{"getting_started/logging.html":{},"getting_started/logging.html#logging-and-debugging":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["process",{"_index":260,"text":{"changelog.html":{},"changelog.html#added_4":{},"getting_started/index.html":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#the-hiven-swarm":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["program",{"_index":751,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["project",{"_index":59,"text":{"changelog.html":{},"changelog.html#changelog":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#summary":{},"home/contributing.html#using-github":{}},"title":{}}],["promptli",{"_index":899,"text":{"home/contributing.html":{},"home/contributing.html#contributing":{}},"title":{}}],["proper",{"_index":163,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"changelog.html":{},"changelog.html#added_5":{},"changelog.html#changed_1":{},"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["properli",{"_index":494,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["properti",{"_index":67,"text":{"changelog.html":{},"changelog.html#added":{},"changelog.html#changed":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connection":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.log_websocket":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.queue_events":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["protect",{"_index":775,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["provid",{"_index":9,"text":{"changelog.html":{},"changelog.html#changed_1":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#quickstart":{},"home/license.html":{},"home/license.html#license":{},"index.html":{}},"title":{}}],["publish",{"_index":946,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["pull",{"_index":916,"text":{"home/contributing.html":{},"home/contributing.html#contributing-changes":{}},"title":{}}],["purpos",{"_index":965,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["put",{"_index":491,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{}},"title":{"reference/http.html#openhivenpy.gateway.http.HTTP.put":{}}}],["pypi",{"_index":693,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["python",{"_index":8,"text":{"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#environment":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#installation":{},"getting_started/logging.html":{},"getting_started/logging.html#logging-and-debugging":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"index.html":{}},"title":{}}],["python3",{"_index":694,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["question",{"_index":907,"text":{"home/contributing.html":{},"home/contributing.html#issue-page":{}},"title":{}}],["queu",{"_index":1255,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["queue_ev",{"_index":99,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.queue_events":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.queue_events":{}}}],["quick",{"_index":766,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["quickli",{"_index":472,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"home/contributing.html":{},"home/contributing.html#contributing":{}},"title":{}}],["quickstart",{"_index":673,"text":{"getting_started/index.html":{},"getting_started/index.html#quickstart":{}},"title":{"getting_started/index.html":{},"getting_started/index.html#quickstart":{}}}],["r",{"_index":1070,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{}},"title":{}}],["rais",{"_index":759,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["rang",{"_index":851,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["rare",{"_index":528,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{}},"title":{}}],["rate",{"_index":150,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["rate_limit",{"_index":1376,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["raw",{"_index":754,"text":{"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#using-a-userclient":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.attachment.Attachment.raw":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{}},"title":{"reference/types.html#openhivenpy.types.attachment.Attachment.raw":{}}}],["raw_data",{"_index":1301,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{}}],["raw_request",{"_index":155,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}}}],["react",{"_index":722,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#the-hiven-swarm":{}},"title":{}}],["read",{"_index":495,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"home/contributing.html":{},"home/contributing.html#issue-page":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{}},"title":{}}],["read_stat",{"_index":594,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{}},"title":{}}],["readabl",{"_index":1011,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{}},"title":{}}],["readi",{"_index":167,"text":{"changelog.html":{},"changelog.html#added_4":{},"changelog.html#changed_1":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.initialised":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.ready":{}},"title":{"reference/http.html#openhivenpy.gateway.http.HTTP.ready":{}}}],["readonli",{"_index":1076,"text":{"reference/events.html":{},"reference/hiven_parsers.html":{},"reference/hivenclient.html":{},"reference/http.html":{},"reference/types.html":{}},"title":{}}],["reason",{"_index":918,"text":{"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["receiv",{"_index":26,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"changelog.html":{},"changelog.html#added_1":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-botclient":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"index.html":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.raw":{},"reference/types.html#openhivenpy.types.context.Context.timestamp":{}},"title":{}}],["recent",{"_index":701,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{}},"title":{}}],["recipi",{"_index":549,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.recipient_ids":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.recipients":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.recipient":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.recipient_id":{}},"title":{"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.recipients":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.recipient":{}}}],["recipient/",{"_index":1565,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{}},"title":{}}],["recipient_id",{"_index":601,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#typing_start":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{}},"title":{"reference/types.html#openhivenpy.types.message.Message.recipient_ids":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.recipient_id":{}}}],["recognis",{"_index":442,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{}},"title":{}}],["recommend",{"_index":768,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["recov",{"_index":653,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{}},"title":{}}],["ref",{"_index":1513,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{}},"title":{}}],["refer",{"_index":339,"text":{"api_reference/object_reference.html":{},"changelog.html":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#json-object-reference":{}}}],["referenc",{"_index":172,"text":{"changelog.html":{},"changelog.html#changed_1":{}},"title":{}}],["regist",{"_index":740,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-userclient":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.context.Context":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{}},"title":{}}],["regular",{"_index":498,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"getting_started/index.html#using-a-userclient":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.user.LazyUser":{},"reference/types.html#openhivenpy.types.user.User":{}},"title":{}}],["rel",{"_index":492,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"home/contributing.html":{},"home/contributing.html#using-github":{}},"title":{}}],["relat",{"_index":119,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersmerooms":{},"changelog.html":{},"changelog.html#added_1":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#specifying-the-log-level":{}},"title":{}}],["relationship",{"_index":551,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{}},"title":{"api_reference/object_reference.html#relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{}}}],["relationship_upd",{"_index":38,"text":{"api_reference/swarm_events.html":{},"index.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{}},"title":{"api_reference/swarm_events.html#relationship_update":{}}}],["relationships/@me/block",{"_index":1332,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{}},"title":{}}],["relationships/@me/friend",{"_index":1336,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{}},"title":{}}],["releas",{"_index":1430,"text":{"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["remain",{"_index":1052,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{}},"title":{}}],["remov",{"_index":159,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_2":{},"changelog.html#changed_1":{},"changelog.html#changed_3":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{}},"title":{"changelog.html#removed":{},"changelog.html#removed_1":{},"changelog.html#removed_2":{},"changelog.html#removed_3":{},"changelog.html#removed_4":{}}}],["remove_ent",{"_index":1056,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{}}}],["remove_hous",{"_index":1060,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{}}}],["remove_house_memb",{"_index":1062,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{}}}],["remove_listen",{"_index":156,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{}},"title":{"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{}}}],["remove_private_room",{"_index":1064,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{}}}],["remove_relationship",{"_index":1065,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{}}}],["remove_room",{"_index":1061,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{}}}],["remove_us",{"_index":1066,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{}}}],["renam",{"_index":319,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["rep",{"_index":1571,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{}},"title":{}}],["replac",{"_index":78,"text":{"changelog.html":{},"changelog.html#changed":{},"changelog.html#removed_1":{},"changelog.html#removed_3":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{}},"title":{}}],["report",{"_index":802,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/logging.html":{},"getting_started/logging.html#logging-and-debugging":{},"home/bug_reporting.html":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#issue-page":{},"home/contributing.html#summary":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{"home/bug_reporting.html":{},"home/bug_reporting.html#bug-reporting":{}}}],["repositori",{"_index":901,"text":{"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"home/contributing.html#using-github":{}},"title":{}}],["repr",{"_index":1104,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__str__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{}}],["repres",{"_index":650,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.flags":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.attachment.Attachment":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.context.Context":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.feed.Feed":{},"reference/types.html#openhivenpy.types.house.House":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite":{},"reference/types.html#openhivenpy.types.member.Member":{},"reference/types.html#openhivenpy.types.mention.Mention":{},"reference/types.html#openhivenpy.types.message.DeletedMessage":{},"reference/types.html#openhivenpy.types.message.Message":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.textroom.TextRoom":{},"reference/types.html#openhivenpy.types.user.LazyUser":{},"reference/types.html#openhivenpy.types.user.LazyUser.flags":{},"reference/types.html#openhivenpy.types.user.User":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping":{}},"title":{"reference/types.html#list-of-represented-types":{}}}],["request",{"_index":301,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"changelog.html":{},"changelog.html#added_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#using-a-userclient":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{},"api_reference/hiven_exceptions.html#request-exceptions":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#api-request-endpoints":{},"api_reference/hiven_restapi.html#writing-a-request-with-a-json-body":{}}}],["request/latest",{"_index":1353,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{}},"title":{}}],["request_url_format",{"_index":1350,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{}},"title":{}}],["requir",{"_index":385,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{},"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"getting_started/logging.html#simple-example-of-logging":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{}}],["research",{"_index":503,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{}},"title":{}}],["resourc",{"_index":566,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#entity":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{}},"title":{}}],["resource_id",{"_index":570,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#entity":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{}},"title":{}}],["resource_point",{"_index":565,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#entity":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{}},"title":{"reference/types.html#openhivenpy.types.entity.Entity.resource_pointers":{}}}],["resource_typ",{"_index":569,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#entity":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{}},"title":{}}],["resp",{"_index":1338,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{}}],["resp_json",{"_index":1367,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["respond",{"_index":1371,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["respons",{"_index":380,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["response_handl",{"_index":317,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["respositor",{"_index":994,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["rest",{"_index":469,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{}},"title":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{}}}],["restart",{"_index":323,"text":{"changelog.html":{},"changelog.html#changed_5":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["restrict",{"_index":559,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#relationship":{},"home/license.html":{},"home/license.html#license":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{}},"title":{}}],["result",{"_index":443,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["retri",{"_index":1375,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["retry_aft",{"_index":1406,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["retry_on_rate_limit",{"_index":154,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["return",{"_index":141,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#added_1":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__str__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.storage":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__str__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.account":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.api_version":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.application":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.blocked":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.bot":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connection":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connection_status":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email_verified":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.host":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.house_ids":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.http":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.initialised":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.log_websocket":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.loop":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.message_broker":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.mfa_enabled":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.open":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.queue_events":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.room_ids":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.startup_time":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.storage":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.token":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__str__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.loop":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.ready":{},"reference/http.html#openhivenpy.gateway.http.HTTP.session":{},"reference/http.html#openhivenpy.gateway.http.HTTP.token":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.entity.Entity.resource_pointers":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.default_permissions":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__str__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.house_id":{},"reference/types.html#openhivenpy.types.member.Member.roles":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.timestamp":{},"reference/types.html#openhivenpy.types.mention.Mention.user":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__str__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__str__":{},"reference/types.html#openhivenpy.types.message.Message.attachment":{},"reference/types.html#openhivenpy.types.message.Message.author":{},"reference/types.html#openhivenpy.types.message.Message.bucket":{},"reference/types.html#openhivenpy.types.message.Message.content":{},"reference/types.html#openhivenpy.types.message.Message.device_id":{},"reference/types.html#openhivenpy.types.message.Message.edited_at":{},"reference/types.html#openhivenpy.types.message.Message.embed":{},"reference/types.html#openhivenpy.types.message.Message.exploding":{},"reference/types.html#openhivenpy.types.message.Message.exploding_age":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.house":{},"reference/types.html#openhivenpy.types.message.Message.house_id":{},"reference/types.html#openhivenpy.types.message.Message.is_house_message":{},"reference/types.html#openhivenpy.types.message.Message.mentions":{},"reference/types.html#openhivenpy.types.message.Message.room":{},"reference/types.html#openhivenpy.types.message.Message.room_id":{},"reference/types.html#openhivenpy.types.message.Message.timestamp":{},"reference/types.html#openhivenpy.types.message.Message.type":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.client_user":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.description":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.emoji":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.id":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.last_message_id":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.name":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.recipients":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.type":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.client_user":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.description":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.id":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.recipient":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.account":{},"reference/types.html#openhivenpy.types.user.LazyUser.application":{},"reference/types.html#openhivenpy.types.user.LazyUser.bot":{},"reference/types.html#openhivenpy.types.user.LazyUser.email_verified":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.user.User.blocked":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.mfa_enabled":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.is_house_typing":{}},"title":{}}],["rewrit",{"_index":84,"text":{"changelog.html":{},"changelog.html#changed_1":{},"changelog.html#changed_2":{},"changelog.html#changed_5":{},"changelog.html#v02dev1-2021-08-13":{}},"title":{}}],["rewrot",{"_index":322,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["right",{"_index":833,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"home/contributing.html":{},"home/contributing.html#summary":{},"home/contributing.html#using-github":{},"home/license.html":{},"home/license.html#license":{}},"title":{}}],["ring",{"_index":661,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_update":{}},"title":{}}],["risk",{"_index":808,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{}},"title":{}}],["rn",{"_index":1215,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{}},"title":{}}],["role",{"_index":563,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#member":{},"api_reference/object_reference.html#role":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.roles":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.roles":{}},"title":{"api_reference/object_reference.html#role":{},"reference/types.html#openhivenpy.types.house.House.roles":{},"reference/types.html#openhivenpy.types.member.Member.roles":{}}}],["role_upd",{"_index":672,"text":{"api_reference/swarm_events.html":{}},"title":{"api_reference/swarm_events.html#role_update":{}}}],["room",{"_index":337,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersmerooms":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#typing_start":{},"changelog.html":{},"changelog.html#changed_5":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.room_ids":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.house_id":{},"reference/types.html#openhivenpy.types.context.Context.room":{},"reference/types.html#openhivenpy.types.context.Context.room_id":{},"reference/types.html#openhivenpy.types.entity.Entity":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.position":{},"reference/types.html#openhivenpy.types.house.House":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.LazyHouse":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.rooms":{},"reference/types.html#openhivenpy.types.message.DeletedMessage":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__str__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.room_id":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.message.Message.recipient_ids":{},"reference/types.html#openhivenpy.types.message.Message.room":{},"reference/types.html#openhivenpy.types.message.Message.room_id":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.textroom.TextRoom":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.description":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.emoji":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.id":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.name":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.position":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.type":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.room":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.room_id":{}},"title":{"api_reference/hiven_request_endpoints.html#room-endpoints":{},"api_reference/object_reference.html#room":{},"reference/types.html#openhivenpy.types.context.Context.room":{},"reference/types.html#openhivenpy.types.house.LazyHouse.rooms":{},"reference/types.html#openhivenpy.types.message.Message.room":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.room":{}}}],["room_",{"_index":1554,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{}},"title":{}}],["room_creat",{"_index":27,"text":{"api_reference/swarm_events.html":{},"changelog.html":{},"changelog.html#changed_5":{},"index.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{}},"title":{"api_reference/swarm_events.html#room_create":{}}}],["room_delet",{"_index":29,"text":{"api_reference/swarm_events.html":{},"index.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{}},"title":{"api_reference/swarm_events.html#room_delete":{}}}],["room_id",{"_index":455,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_delete":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_delete":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#typing_start":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__str__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.room_ids":{},"reference/types.html#openhivenpy.types.context.Context.room_id":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.room_id":{},"reference/types.html#openhivenpy.types.message.Message.room_id":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.room_id":{}}}],["room_overrid",{"_index":584,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{}},"title":{}}],["room_upd",{"_index":28,"text":{"api_reference/swarm_events.html":{},"index.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{}},"title":{"api_reference/swarm_events.html#room_update":{}}}],["rout",{"_index":386,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{}},"title":{}}],["rtc_state",{"_index":662,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_update":{}},"title":{}}],["run",{"_index":679,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#specifying-the-log-level":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.log_websocket":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.queue_events":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}}}],["run_until_complet",{"_index":1328,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["runtim",{"_index":1095,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["runtimeerror",{"_index":1099,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{}},"title":{}}],["s",{"_index":421,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#entity":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#member":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#relationship":{},"api_reference/object_reference.html#role":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_delete":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_leave":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_delete":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#role_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_delete":{},"api_reference/swarm_events.html#room_update":{},"api_reference/swarm_events.html#typing_start":{},"api_reference/swarm_events.html#user_update":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{}}],["safe_convert",{"_index":1218,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{}},"title":{}}],["sake",{"_index":249,"text":{"changelog.html":{},"changelog.html#added_4":{}},"title":{}}],["save",{"_index":769,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["schema",{"_index":111,"text":{"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_4":{},"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["scope",{"_index":453,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{}},"title":{}}],["search",{"_index":888,"text":{"home/contributing.html":{},"home/contributing.html#contributing":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{}},"title":{}}],["second",{"_index":1260,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{}}],["secur",{"_index":828,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{}},"title":{}}],["see",{"_index":789,"text":{"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["seem",{"_index":1004,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["seen",{"_index":1382,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["select",{"_index":1169,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{}},"title":{}}],["self",{"_index":772,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__str__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.__init__":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__str__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__str__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.feed.Feed.__init__":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__str__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__str__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__str__":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{}}],["sell",{"_index":949,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["semant",{"_index":61,"text":{"changelog.html":{},"changelog.html#changelog":{}},"title":{}}],["send",{"_index":519,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#the-hiven-swarm":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}}}],["send_friend_request",{"_index":1342,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{}},"title":{"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{}}}],["sent",{"_index":105,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#changed_1":{},"getting_started/index.html":{},"getting_started/index.html#the-hiven-swarm":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.message.Message":{},"reference/types.html#openhivenpy.types.message.Message.house":{},"reference/types.html#openhivenpy.types.message.Message.house_id":{},"reference/types.html#openhivenpy.types.message.Message.is_house_message":{},"reference/types.html#openhivenpy.types.message.Message.room":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.last_message_id":{}},"title":{}}],["separ",{"_index":657,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#typing_start":{}},"title":{}}],["serv",{"_index":748,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["server",{"_index":403,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#the-hiven-swarm":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["session",{"_index":853,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.ready":{}},"title":{"reference/http.html#openhivenpy.gateway.http.HTTP.session":{}}}],["sessioncreateerror",{"_index":1368,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["set",{"_index":98,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close_timeout":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.location":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.website":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.User.location":{},"reference/types.html#openhivenpy.types.user.User.website":{}},"title":{"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-eventlistener":{}}}],["set_await",{"_index":1087,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{}},"title":{"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{}}}],["set_event_loop",{"_index":1327,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["setformatt",{"_index":877,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["setlevel",{"_index":869,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["setup",{"_index":767,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"setup/index.html":{}},"title":{"setup/index.html":{},"setup/index.html#setup-of-a-bot":{}}}],["setup.pi",{"_index":998,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["setuptool",{"_index":989,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["shall",{"_index":955,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["share",{"_index":810,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#issue-page":{},"home/contributing.html#summary":{}},"title":{}}],["ship",{"_index":788,"text":{"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["shown",{"_index":805,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{}},"title":{}}],["side",{"_index":582,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{}},"title":{}}],["sidebar",{"_index":1470,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.position":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.position":{}},"title":{}}],["silenc",{"_index":1102,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{}},"title":{}}],["similar",{"_index":719,"text":{"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#using-a-botclient":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{}},"title":{}}],["simpl",{"_index":140,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#added_1":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#quickstart":{},"getting_started/logging.html":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-eventlistener":{},"getting_started/logging.html#simple-example-of-logging":{}}}],["simpli",{"_index":112,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"changelog.html":{},"changelog.html#added_1":{}},"title":{}}],["singl",{"_index":540,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{}},"title":{}}],["singledispatcheventlisten",{"_index":121,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#hiveneventhandler-and-listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{}},"title":{"reference/events.html#openhivenpy.events.SingleDispatchEventListener":{}}}],["singular",{"_index":1177,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{}},"title":{}}],["sleep",{"_index":1148,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{}}],["small",{"_index":206,"text":{"changelog.html":{},"changelog.html#changed_2":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["snippet",{"_index":819,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["softwar",{"_index":942,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["solut",{"_index":919,"text":{"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["solv",{"_index":921,"text":{"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["someth",{"_index":407,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"home/contributing.html":{},"home/contributing.html#issue-page":{}},"title":{}}],["sometim",{"_index":283,"text":{"changelog.html":{},"changelog.html#changed_4":{}},"title":{}}],["somewher",{"_index":827,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{}},"title":{}}],["soon",{"_index":1152,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{}},"title":{}}],["sourc",{"_index":746,"text":{"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{},"home/contributing.html":{},"home/contributing.html#summary":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__str__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.cleanup_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.__init__":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__str__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__str__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.feed.Feed.__init__":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__str__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__str__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__str__":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{}}],["special",{"_index":755,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hivenclient.html":{},"reference/http.html":{},"reference/types.html":{}},"title":{}}],["specif",{"_index":50,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"changelog.html":{},"changelog.html#changelog":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#installation":{},"getting_started/index.html#using-a-botclient":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.botclient.BotClient":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.feed.Feed":{}},"title":{}}],["specifi",{"_index":399,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"getting_started/logging.html#logging-and-debugging":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_room":{}},"title":{"api_reference/hiven_restapi.html#specifying-the-content-type":{},"getting_started/logging.html#specifying-the-log-level":{}}}],["speed",{"_index":250,"text":{"changelog.html":{},"changelog.html#added_4":{}},"title":{}}],["split",{"_index":539,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#privateroom":{}},"title":{}}],["stabl",{"_index":375,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#request-exceptions":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#api-request-endpoints":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/hiven_swarm.html":{},"api_reference/hiven_swarm.html#using-the-hiven-swarm":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#json-object-reference":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#hiven-swarm-events":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{}},"title":{}}],["staff",{"_index":830,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{}},"title":{}}],["stage",{"_index":798,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{}},"title":{}}],["stamp",{"_index":1449,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.timestamp":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.timestamp":{}},"title":{}}],["standard",{"_index":289,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"changelog.html":{},"changelog.html#removed_3":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.message.Message":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.LazyUser":{}},"title":{}}],["start",{"_index":521,"text":{"api_reference/hiven_swarm.html":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{}},"title":{"api_reference/hiven_swarm.html#getting-started-using-the-hiven-swarm":{}}}],["start_cal",{"_index":1569,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{}},"title":{"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{}}}],["start_typ",{"_index":1583,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}}}],["startup",{"_index":1252,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.startup_time":{}},"title":{}}],["startup_tim",{"_index":1249,"text":{"reference/hivenclient.html":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.startup_time":{}}}],["state",{"_index":169,"text":{"changelog.html":{},"changelog.html#added_4":{},"changelog.html#changed_1":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.initialised":{}},"title":{}}],["statu",{"_index":700,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connection_status":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["stay",{"_index":898,"text":{"home/contributing.html":{},"home/contributing.html#contributing":{}},"title":{}}],["steadili",{"_index":896,"text":{"home/contributing.html":{},"home/contributing.html#contributing":{}},"title":{}}],["step",{"_index":814,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{}},"title":{}}],["stick",{"_index":863,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["still",{"_index":17,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"changelog.html":{},"changelog.html#changed":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"index.html":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["stop",{"_index":132,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{}},"title":{}}],["storag",{"_index":822,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.storage":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.storage":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.storage":{}}}],["storage/cach",{"_index":1253,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.storage":{}},"title":{}}],["store",{"_index":95,"text":{"changelog.html":{},"changelog.html#added_1":{},"changelog.html#changed_1":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.relationship.Relationship.id":{}},"title":{}}],["str",{"_index":1058,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__str__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__str__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{},"reference/types.html#openhivenpy.types.feed.Feed.__str__":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__str__":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{}}],["streams/@me/ment",{"_index":451,"text":{"api_reference/hiven_request_endpoints.html":{}},"title":{"api_reference/hiven_request_endpoints.html#streamsmementions":{}}}],["string",{"_index":203,"text":{"changelog.html":{},"changelog.html#added_2":{},"changelog.html#changed_4":{},"changelog.html#removed_1":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.application":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connection_status":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.id":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.content":{},"reference/types.html#openhivenpy.types.user.LazyUser.application":{},"reference/types.html#openhivenpy.types.user.LazyUser.id":{}},"title":{}}],["strongli",{"_index":980,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{}},"title":{}}],["structur",{"_index":85,"text":{"changelog.html":{},"changelog.html#changed_1":{},"changelog.html#removed":{},"changelog.html#v02dev1-2021-08-13":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{}},"title":{}}],["subject",{"_index":952,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["sublicens",{"_index":947,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["substanti",{"_index":956,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["success",{"_index":281,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#400-bad-request-no_auth":{},"api_reference/hiven_exceptions.html#400-bad-request-parent_entity_doesnt_exist":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"changelog.html":{},"changelog.html#changed_4":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{}}],["successfulli",{"_index":581,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["such",{"_index":517,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#quickstart":{}},"title":{}}],["suffici",{"_index":1501,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.delete":{}},"title":{}}],["suffix=non",{"_index":367,"text":{"changelog.html":{},"changelog.html#changed_5":{}},"title":{}}],["summari",{"_index":52,"text":{"changelog.html":{},"changelog.html#changelog":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{}},"title":{"home/contributing.html#summary":{}}}],["super",{"_index":774,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.feed.Feed.__init__":{},"reference/types.html#openhivenpy.types.house.House.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{}}],["support",{"_index":23,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#environment":{},"index.html":{}},"title":{}}],["suppos",{"_index":753,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{}},"title":{}}],["sure",{"_index":927,"text":{"home/contributing.html":{},"home/contributing.html#summary":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["swarm",{"_index":13,"text":{"api_reference/hiven_swarm.html":{},"api_reference/swarm_events.html":{},"getting_started/index.html":{},"getting_started/index.html#the-hiven-swarm":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"index.html":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.raw":{}},"title":{"api_reference/hiven_swarm.html":{},"api_reference/hiven_swarm.html#getting-started-using-the-hiven-swarm":{},"api_reference/hiven_swarm.html#logging-into-the-hiven-swarm":{},"api_reference/hiven_swarm.html#using-the-hiven-swarm":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#hiven-swarm-events":{},"getting_started/index.html#the-hiven-swarm":{}}}],["switch",{"_index":246,"text":{"changelog.html":{},"changelog.html#added_4":{}},"title":{}}],["sy",{"_index":1027,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["syntax",{"_index":1096,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{}},"title":{}}],["system",{"_index":715,"text":{"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#hiven-types":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{}},"title":{}}],["t",{"_index":461,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#member":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#user_update":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__repr__":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__repr__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__repr__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{}},"title":{}}],["ta",{"_index":627,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_member_join":{}},"title":{}}],["tag",{"_index":739,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{}},"title":{}}],["take",{"_index":345,"text":{"changelog.html":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{}},"title":{}}],["target",{"_index":839,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.relationship.Relationship.id":{},"reference/types.html#openhivenpy.types.relationship.Relationship.user":{},"reference/types.html#openhivenpy.types.relationship.Relationship.user_id":{}},"title":{}}],["task",{"_index":103,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["tatu",{"_index":666,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_update":{}},"title":{}}],["te",{"_index":526,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{}},"title":{}}],["test",{"_index":295,"text":{"changelog.html":{},"changelog.html#added_5":{},"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{}},"title":{}}],["text",{"_index":780,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-botclient":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.textroom.TextRoom":{}},"title":{}}],["textroom",{"_index":1048,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.type":{}},"title":{"reference/types.html#openhivenpy.types.textroom.TextRoom":{}}}],["thank",{"_index":929,"text":{"home/contributing.html":{},"home/contributing.html#summary":{}},"title":{}}],["that'",{"_index":909,"text":{"home/contributing.html":{},"home/contributing.html#issue-page":{}},"title":{}}],["theme",{"_index":583,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{}},"title":{}}],["themselv",{"_index":1428,"text":{"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["therefor",{"_index":471,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#using-a-botclient":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#summary":{},"home/contributing.html#using-github":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["thing",{"_index":799,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{}},"title":{}}],["those",{"_index":1001,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["though",{"_index":80,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#changed":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.initialised":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["thousand",{"_index":925,"text":{"home/contributing.html":{},"home/contributing.html#summary":{}},"title":{}}],["thread",{"_index":1324,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{}}],["through",{"_index":477,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{}},"title":{}}],["throughout",{"_index":499,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{}},"title":{}}],["thrown",{"_index":364,"text":{"changelog.html":{},"changelog.html#changed_5":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{}},"title":{}}],["time",{"_index":133,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_update":{},"changelog.html":{},"changelog.html#added_1":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.startup_time":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.context.Context.timestamp":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.timestamp":{}},"title":{}}],["timeout",{"_index":1232,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close_timeout":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["timeout_handl",{"_index":288,"text":{"changelog.html":{},"changelog.html#removed_3":{}},"title":{}}],["timeouterror",{"_index":1424,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["timestamp",{"_index":465,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#typing_start":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.joined_at":{},"reference/types.html#openhivenpy.types.member.Member.joined_house_at":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.timestamp":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.edited_at":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.timestamp":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{"reference/types.html#openhivenpy.types.context.Context.timestamp":{},"reference/types.html#openhivenpy.types.mention.Mention.timestamp":{},"reference/types.html#openhivenpy.types.message.Message.timestamp":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.timestamp":{}}}],["tip",{"_index":803,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{}},"title":{}}],["titl",{"_index":1462,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.title":{}},"title":{"reference/types.html#openhivenpy.types.embed.Embed.title":{}}}],["todo",{"_index":1597,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{}},"title":{}}],["token",{"_index":414,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.token":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.token":{}},"title":{"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.token":{},"reference/http.html#openhivenpy.gateway.http.HTTP.token":{}}}],["took",{"_index":1251,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.startup_time":{}},"title":{}}],["tool",{"_index":675,"text":{"getting_started/index.html":{},"getting_started/index.html#quickstart":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["tort",{"_index":975,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["total",{"_index":1393,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["touch",{"_index":831,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{}},"title":{}}],["tr",{"_index":422,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#entity":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#member":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#relationship":{},"api_reference/object_reference.html#role":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_delete":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_leave":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_delete":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#role_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_delete":{},"api_reference/swarm_events.html#room_update":{},"api_reference/swarm_events.html#typing_start":{},"api_reference/swarm_events.html#user_update":{}},"title":{}}],["trace",{"_index":859,"text":{"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["trace_config",{"_index":1357,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["traceback",{"_index":200,"text":{"changelog.html":{},"changelog.html#added_2":{},"changelog.html#added_5":{},"changelog.html#changed_5":{},"changelog.html#removed_1":{}},"title":{}}],["traceconfig",{"_index":1358,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{}}],["tri",{"_index":813,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"home/contributing.html":{},"home/contributing.html#issue-page":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["trigger",{"_index":635,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#the-hiven-swarm":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.context.Context":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{}},"title":{}}],["troubleshoot",{"_index":978,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{}},"title":{"home/troubleshooting.html":{},"home/troubleshooting.html#troubleshooting":{}}}],["trstr",{"_index":641,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_members_chunk":{}},"title":{}}],["true",{"_index":158,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"changelog.html":{},"changelog.html#added_1":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.bot":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email_verified":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.bot":{},"reference/types.html#openhivenpy.types.user.LazyUser.email_verified":{}},"title":{}}],["ts",{"_index":574,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#role":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#message_create":{}},"title":{}}],["tta",{"_index":605,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{}},"title":{}}],["tupl",{"_index":1106,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{}}],["tuple[list",{"_index":1153,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{}},"title":{}}],["tuple[tupl",{"_index":1146,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{}}],["two",{"_index":651,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#typing_start":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["type",{"_index":171,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#entity":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#relationship":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"api_reference/swarm_events.html#house_entities_update":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#room_create":{},"api_reference/swarm_events.html#room_update":{},"api_reference/swarm_events.html#typing_start":{},"changelog.html":{},"changelog.html#added_3":{},"changelog.html#added_4":{},"changelog.html#added_5":{},"changelog.html#changed_1":{},"changelog.html#changed_4":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.call_listeners":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.remove_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_entities_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_offline":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_online":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_message_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_relationship_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_create":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_delete":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_room_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__repr__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house_member":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.type":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.__repr__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.resource_pointers":{},"reference/types.html#openhivenpy.types.entity.Entity.type":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.find_entity":{},"reference/types.html#openhivenpy.types.house.House.find_member":{},"reference/types.html#openhivenpy.types.house.House.find_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.get_entity":{},"reference/types.html#openhivenpy.types.house.House.get_member":{},"reference/types.html#openhivenpy.types.house.House.get_room":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.type":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{},"reference/types.html#openhivenpy.types.message.Message.__repr__":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.message.Message.type":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.type":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__init__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.__repr__":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.type":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{},"reference/types.html#openhivenpy.types.textroom.TextRoom":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__init__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.__repr__":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.type":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__repr__":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.author":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.is_house_typing":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.timestamp":{}},"title":{"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"getting_started/index.html#hiven-types":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.embed.Embed.type":{},"reference/types.html#openhivenpy.types.entity.Entity.type":{},"reference/types.html#openhivenpy.types.house.LazyHouse.type":{},"reference/types.html#openhivenpy.types.invite.Invite.type":{},"reference/types.html#openhivenpy.types.message.Message.type":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.type":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.type":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.type":{}}}],["typeerror",{"_index":1141,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{}},"title":{}}],["typehint",{"_index":236,"text":{"changelog.html":{},"changelog.html#added_4":{}},"title":{}}],["types.us",{"_index":1334,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{}},"title":{}}],["typescript",{"_index":730,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{}},"title":{}}],["typing_start",{"_index":41,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#typing_start":{},"index.html":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{}},"title":{"api_reference/swarm_events.html#typing_start":{}}}],["u",{"_index":435,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#room":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_update":{},"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["unabl",{"_index":1427,"text":{"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["unavail",{"_index":654,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_down":{}},"title":{}}],["unblock",{"_index":1344,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{}},"title":{}}],["unblock_us",{"_index":1343,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{}},"title":{"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{}}}],["under",{"_index":138,"text":{"changelog.html":{},"changelog.html#added_1":{}},"title":{}}],["understand",{"_index":914,"text":{"home/contributing.html":{},"home/contributing.html#issue-page":{}},"title":{}}],["unexpect",{"_index":999,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{"home/troubleshooting.html#unexpected-behavior":{}}}],["union",{"_index":1074,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__init__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.__init__":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.__init__":{}},"title":{}}],["union[aiohttp.clientrespons",{"_index":1384,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["union[await",{"_index":1094,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{}},"title":{}}],["union[cal",{"_index":1124,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{}},"title":{}}],["union[coroutin",{"_index":1081,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{}},"title":{}}],["uniqu",{"_index":579,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.id":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.recipient_ids":{},"reference/types.html#openhivenpy.types.user.LazyUser.id":{}},"title":{}}],["unix",{"_index":1402,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.member.Member.joined_at":{},"reference/types.html#openhivenpy.types.member.Member.joined_house_at":{},"reference/types.html#openhivenpy.types.message.Message.edited_at":{},"reference/types.html#openhivenpy.types.message.Message.timestamp":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.timestamp":{}},"title":{}}],["unix_t",{"_index":1405,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["unknown",{"_index":440,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.feed.Feed.__repr__":{}},"title":{}}],["unknowneventerror",{"_index":1126,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_multi_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.add_single_listener":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{}},"title":{}}],["unlik",{"_index":147,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.dispatch_event":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{}},"title":{}}],["unneed",{"_index":205,"text":{"changelog.html":{},"changelog.html#added_2":{},"changelog.html#removed_1":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["unstabl",{"_index":699,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["unsupport",{"_index":225,"text":{"api_reference/hiven_exceptions.html":{},"changelog.html":{},"changelog.html#changed_3":{}},"title":{"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{}}}],["until",{"_index":130,"text":{"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_5":{},"changelog.html#changed_1":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.send":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{}}],["up",{"_index":721,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-eventlistener":{}}}],["updat",{"_index":178,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_members_chunk":{},"changelog.html":{},"changelog.html#added_2":{},"changelog.html#changed_1":{},"changelog.html#changed_3":{},"changelog.html#changed_4":{},"changelog.html#changed_5":{},"changelog.html#removed_2":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#using-a-botclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.closing_cleanup":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_entity":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_house":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_group_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_private_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_room":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.entity.Entity.get_cached_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_cached_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.get_cached_data":{}},"title":{}}],["update_and_return",{"_index":1015,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{}},"title":{}}],["update_client_us",{"_index":1049,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{}}}],["update_primary_data",{"_index":1067,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{}},"title":{"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{}}}],["upgrad",{"_index":990,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["upper",{"_index":1423,"text":{"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["url",{"_index":229,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"changelog.html":{},"changelog.html#removed_2":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.host":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.attachment.Attachment.media_url":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.image":{},"reference/types.html#openhivenpy.types.embed.Embed.url":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.LazyHouse.icon":{},"reference/types.html#openhivenpy.types.invite.Invite.__init__":{},"reference/types.html#openhivenpy.types.invite.Invite.__repr__":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{}},"title":{"reference/types.html#openhivenpy.types.embed.Embed.url":{},"reference/types.html#openhivenpy.types.invite.Invite.url":{}}}],["us",{"_index":127,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/hiven_swarm.html":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_4":{},"changelog.html#changed_1":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#installation":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#the-hiven-swarm":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"getting_started/logging.html#logging-and-debugging":{},"getting_started/logging.html#simple-example-of-logging":{},"home/contributing.html":{},"home/contributing.html#issue-page":{},"home/contributing.html#using-github":{},"home/license.html":{},"home/license.html#license":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"home/troubleshooting.html#unexpected-behavior":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/events.html":{},"reference/events.html#hiveneventhandler-and-listeners":{},"reference/events.html#openhivenpy.events.DispatchEventListener.__call__":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{},"reference/events.html#openhivenpy.events.HivenEventHandler":{},"reference/events.html#openhivenpy.events.HivenEventHandler.__init__":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.botclient.BotClient":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.api_version":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.token":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.attachment.Attachment.__init__":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.__init__":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.__init__":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.__init__":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.id":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/hiven_swarm.html":{},"api_reference/hiven_swarm.html#getting-started-using-the-hiven-swarm":{},"api_reference/hiven_swarm.html#using-the-hiven-swarm":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{},"getting_started/index.html#using-openhivenpy":{},"home/contributing.html#using-github":{}}}],["usag",{"_index":502,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{}},"title":{}}],["user",{"_index":69,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#member":{},"api_reference/object_reference.html#privateroom":{},"api_reference/object_reference.html#relationship":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#user_update":{},"changelog.html":{},"changelog.html#added":{},"changelog.html#changed_5":{},"changelog.html#removed_4":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#the-hiven-swarm":{},"getting_started/logging.html":{},"getting_started/logging.html#specifying-the-log-level":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#summary":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.init_client_user_obj":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.remove_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_primary_data":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_join":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_leave":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_presence_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_typing_start":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.bio":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.blocked":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.bot":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.flags":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.header":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.icon":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.id":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.location":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.name":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.presence":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.username":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.website":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.feed.Feed":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.owner_id":{},"reference/types.html#openhivenpy.types.member.Member":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.id":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.member.Member.user_id":{},"reference/types.html#openhivenpy.types.mention.Mention":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.user":{},"reference/types.html#openhivenpy.types.mention.Mention.user_id":{},"reference/types.html#openhivenpy.types.message.Message":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.client_user":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.start_call":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.start_call":{},"reference/types.html#openhivenpy.types.relationship.Relationship":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.id":{},"reference/types.html#openhivenpy.types.relationship.Relationship.type":{},"reference/types.html#openhivenpy.types.relationship.Relationship.user":{},"reference/types.html#openhivenpy.types.relationship.Relationship.user_id":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{},"reference/types.html#openhivenpy.types.user.LazyUser":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.bio":{},"reference/types.html#openhivenpy.types.user.LazyUser.bot":{},"reference/types.html#openhivenpy.types.user.LazyUser.flags":{},"reference/types.html#openhivenpy.types.user.LazyUser.header":{},"reference/types.html#openhivenpy.types.user.LazyUser.icon":{},"reference/types.html#openhivenpy.types.user.LazyUser.id":{},"reference/types.html#openhivenpy.types.user.LazyUser.name":{},"reference/types.html#openhivenpy.types.user.LazyUser.username":{},"reference/types.html#openhivenpy.types.user.User":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{},"reference/types.html#openhivenpy.types.user.User.blocked":{},"reference/types.html#openhivenpy.types.user.User.email":{},"reference/types.html#openhivenpy.types.user.User.location":{},"reference/types.html#openhivenpy.types.user.User.presence":{},"reference/types.html#openhivenpy.types.user.User.website":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.author":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.timestamp":{}},"title":{"api_reference/hiven_request_endpoints.html#user-endpoints":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#objects-for-the-client-user":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"reference/types.html#openhivenpy.types.house.House.users":{},"reference/types.html#openhivenpy.types.mention.Mention.user":{},"reference/types.html#openhivenpy.types.relationship.Relationship.user":{},"reference/types.html#openhivenpy.types.user.User":{}}}],["user_data",{"_index":1225,"text":{"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{}}],["user_flag",{"_index":79,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"changelog.html":{},"changelog.html#changed":{},"reference/hivenclient.html":{},"reference/types.html":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.user_flags":{},"reference/types.html#openhivenpy.types.user.LazyUser.user_flags":{}}}],["user_id",{"_index":347,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#member":{},"api_reference/object_reference.html#relationship":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_leave":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#typing_start":{},"changelog.html":{},"changelog.html#changed_5":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_batch_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_enter":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_update":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_members_chunk":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.find_user":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_relationship":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.get_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.__init__":{},"reference/types.html#openhivenpy.types.member.Member.id":{},"reference/types.html#openhivenpy.types.mention.Mention.__init__":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__init__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.__repr__":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.get_cached_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.id":{}},"title":{"reference/types.html#openhivenpy.types.member.Member.user_id":{},"reference/types.html#openhivenpy.types.mention.Mention.user_id":{},"reference/types.html#openhivenpy.types.relationship.Relationship.user_id":{}}}],["user_not_found",{"_index":448,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersusername":{}},"title":{}}],["user_token_len",{"_index":1288,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{}},"title":{}}],["user_upd",{"_index":270,"text":{"api_reference/swarm_events.html":{},"changelog.html":{},"changelog.html#added_4":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_user_update":{}},"title":{"api_reference/swarm_events.html#user_update":{}}}],["usercli",{"_index":742,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#using-a-botclient":{},"getting_started/index.html#using-a-userclient":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.client_type":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{}},"title":{"getting_started/index.html#using-a-userclient":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient":{}}}],["usernam",{"_index":309,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/object_reference.html#relationship":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#batch_house_member_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_join":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#house_members_chunk":{},"api_reference/swarm_events.html#house_update":{},"api_reference/swarm_events.html#init_state":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{},"api_reference/swarm_events.html#presence_update":{},"api_reference/swarm_events.html#relationship_update":{},"api_reference/swarm_events.html#user_update":{},"changelog.html":{},"changelog.html#added_5":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.username":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.member.Member.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{},"reference/types.html#openhivenpy.types.user.LazyUser.__repr__":{},"reference/types.html#openhivenpy.types.user.LazyUser.username":{},"reference/types.html#openhivenpy.types.user.User.__repr__":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.username":{},"reference/types.html#openhivenpy.types.user.LazyUser.username":{}}}],["users/175697072878514388",{"_index":450,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{}},"title":{}}],["users/@m",{"_index":411,"text":{"api_reference/hiven_request_endpoints.html":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{}},"title":{"api_reference/hiven_request_endpoints.html#usersme":{}}}],["users/@me/hous",{"_index":1507,"text":{"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.leave":{}},"title":{}}],["users/@me/room",{"_index":466,"text":{"api_reference/hiven_request_endpoints.html":{}},"title":{"api_reference/hiven_request_endpoints.html#usersmerooms":{}}}],["users/id",{"_index":449,"text":{"api_reference/hiven_request_endpoints.html":{}},"title":{"api_reference/hiven_request_endpoints.html#usersid":{}}}],["users/kudo",{"_index":447,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersusername":{}},"title":{}}],["users/usernam",{"_index":446,"text":{"api_reference/hiven_request_endpoints.html":{}},"title":{"api_reference/hiven_request_endpoints.html#usersusername":{}}}],["usertyp",{"_index":1437,"text":{"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.__init__":{}},"title":{"reference/types.html#openhivenpy.types.usertyping.UserTyping":{}}}],["usual",{"_index":523,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{}},"title":{}}],["utf",{"_index":873,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["util",{"_index":368,"text":{"changelog.html":{},"changelog.html#changed_5":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.MultiDispatchEventListener.dispatch":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.block_user":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.cancel_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.fetch_current_friend_requests":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.send_friend_request":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.close":{},"reference/http.html#openhivenpy.gateway.http.HTTP.connect":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.create_entity":{},"reference/types.html#openhivenpy.types.house.House.create_invite":{},"reference/types.html#openhivenpy.types.house.House.create_room":{},"reference/types.html#openhivenpy.types.house.House.delete":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.house.House.leave":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.kick":{},"reference/types.html#openhivenpy.types.message.Message.delete":{},"reference/types.html#openhivenpy.types.message.Message.edit":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.mark_as_read":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.get_recent_messages":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.start_typing":{}},"title":{}}],["utilis",{"_index":146,"text":{"changelog.html":{},"changelog.html#added_1":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#using-a-botclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{}},"title":{}}],["uuid",{"_index":663,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_create":{},"api_reference/swarm_events.html#call_update":{}},"title":{}}],["v0.1.2",{"_index":291,"text":{"changelog.html":{}},"title":{"changelog.html#v012-2021-02-03":{}}}],["v0.1.3",{"_index":231,"text":{"changelog.html":{}},"title":{"changelog.html#v013-2021-02-16":{}}}],["v0.1.3.1",{"_index":216,"text":{"changelog.html":{}},"title":{"changelog.html#v0131-2021-04-09":{}}}],["v0.1.3.2",{"_index":196,"text":{"changelog.html":{}},"title":{"changelog.html#v0132-2021-04-09":{}}}],["v0.2",{"_index":210,"text":{"changelog.html":{},"changelog.html#changed_2":{}},"title":{}}],["v0.2.dev1",{"_index":82,"text":{"changelog.html":{}},"title":{"changelog.html#v02dev1-2021-08-13":{}}}],["v0.2.dev2",{"_index":62,"text":{"changelog.html":{}},"title":{"changelog.html#v02dev2-2021-08-23":{}}}],["v1",{"_index":483,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{}},"title":{}}],["valid",{"_index":199,"text":{"changelog.html":{},"changelog.html#added_2":{},"changelog.html#added_4":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_entity":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house_member":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_relationship":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_user":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.update_client_user":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers":{},"reference/types.html":{},"reference/types.html#hiven-types":{},"reference/types.html#openhivenpy.types.attachment.Attachment.format_obj_data":{},"reference/types.html#openhivenpy.types.context.Context.format_obj_data":{},"reference/types.html#openhivenpy.types.embed.Embed.format_obj_data":{},"reference/types.html#openhivenpy.types.entity.Entity.format_obj_data":{},"reference/types.html#openhivenpy.types.house.House.format_obj_data":{},"reference/types.html#openhivenpy.types.house.LazyHouse.format_obj_data":{},"reference/types.html#openhivenpy.types.invite.Invite.format_obj_data":{},"reference/types.html#openhivenpy.types.member.Member.format_obj_data":{},"reference/types.html#openhivenpy.types.mention.Mention.format_obj_data":{},"reference/types.html#openhivenpy.types.message.DeletedMessage.format_obj_data":{},"reference/types.html#openhivenpy.types.message.Message.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.private_room.PrivateRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.relationship.Relationship.format_obj_data":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.format_obj_data":{},"reference/types.html#openhivenpy.types.user.LazyUser.format_obj_data":{},"reference/types.html#openhivenpy.types.user.User.format_obj_data":{}},"title":{}}],["validationerror",{"_index":218,"text":{"changelog.html":{},"changelog.html#added_3":{}},"title":{}}],["valu",{"_index":177,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"changelog.html":{},"changelog.html#changed_1":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.house.House.edit":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.edit":{}},"title":{"api_reference/hiven_restapi.html#passing-values-in-the-body":{}}}],["value/str",{"_index":1240,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.flags":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.flags":{}},"title":{}}],["valueerror",{"_index":1045,"text":{"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_private_room":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{}},"title":{}}],["variabl",{"_index":186,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_down":{},"changelog.html":{},"changelog.html#changed_1":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.connect":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.http_request":{}},"title":{}}],["variou",{"_index":757,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{}},"title":{}}],["veri",{"_index":716,"text":{"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/deploying_your_first_bot.html#setting-up-a-simple-bot":{},"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#using-a-botclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["verifi",{"_index":1238,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.email_verified":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.email_verified":{}},"title":{}}],["version",{"_index":16,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"changelog.html":{},"changelog.html#changelog":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"getting_started/index.html#using-a-botclient":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"index.html":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.api_version":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.__init__":{}},"title":{}}],["video",{"_index":670,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_update":{}},"title":{}}],["visibl",{"_index":524,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{}},"title":{}}],["visit",{"_index":886,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["vital",{"_index":752,"text":{"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"getting_started/logging.html#specifying-the-log-level":{}},"title":{}}],["voic",{"_index":665,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#call_update":{}},"title":{}}],["w",{"_index":876,"text":{"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{}},"title":{}}],["wait",{"_index":137,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#init_state":{},"changelog.html":{},"changelog.html#added_1":{},"changelog.html#added_4":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-bot-token":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.private_room.PrivateGroupRoom.send":{},"reference/types.html#openhivenpy.types.textroom.TextRoom.send":{}},"title":{}}],["wait_for",{"_index":136,"text":{"changelog.html":{},"changelog.html#added_1":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{"reference/events.html#openhivenpy.events.HivenEventHandler.wait_for":{}}}],["wait_for_initialis",{"_index":253,"text":{"changelog.html":{},"changelog.html#added_4":{}},"title":{}}],["wait_for_readi",{"_index":254,"text":{"changelog.html":{},"changelog.html#added_4":{}},"title":{}}],["want",{"_index":489,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#authentication-header":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"getting_started/logging.html":{},"getting_started/logging.html#advanced-logging":{},"home/contributing.html":{},"home/contributing.html#contributing-changes":{},"home/contributing.html#issue-page":{},"home/contributing.html#summary":{},"home/troubleshooting.html":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["warn",{"_index":372,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#request-exceptions":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#api-request-endpoints":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"api_reference/hiven_swarm.html":{},"api_reference/hiven_swarm.html#using-the-hiven-swarm":{},"api_reference/object_reference.html":{},"api_reference/object_reference.html#json-object-reference":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#hiven-swarm-events":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#deploying-your-first-hiven-bot":{},"getting_started/event_handling.html":{},"getting_started/event_handling.html#event-handling":{},"getting_started/index.html":{},"getting_started/index.html#installation":{},"getting_started/logging.html":{},"getting_started/logging.html#specifying-the-log-level":{},"home/bug_reporting.html":{},"home/bug_reporting.html#bug-reporting":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"home/troubleshooting.html#troubleshooting":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_join":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{},"setup/index.html":{},"setup/index.html#setup-of-a-bot":{}},"title":{}}],["warranti",{"_index":958,"text":{"home/license.html":{},"home/license.html#license":{}},"title":{}}],["watch",{"_index":1429,"text":{"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["way",{"_index":900,"text":{"home/contributing.html":{},"home/contributing.html#using-github":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.user.LazyUser.__init__":{}},"title":{}}],["web",{"_index":395,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#404-not-found-not_found":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#getting-a-user-token":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.embed.Embed.url":{}},"title":{}}],["websit",{"_index":428,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersid":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/hiven_request_endpoints.html#usersusername":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_update":{},"api_reference/swarm_events.html#relationship_update":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.edit":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.website":{},"reference/types.html":{},"reference/types.html#list-of-represented-types":{},"reference/types.html#openhivenpy.types.embed.Embed":{},"reference/types.html#openhivenpy.types.embed.Embed.__init__":{},"reference/types.html#openhivenpy.types.user.User.__init__":{},"reference/types.html#openhivenpy.types.user.User.website":{}},"title":{"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.website":{},"reference/types.html#openhivenpy.types.user.User.website":{}}}],["websocket",{"_index":164,"text":{"changelog.html":{},"changelog.html#added_4":{},"changelog.html#changed_1":{},"changelog.html#changed_4":{},"changelog.html#changed_5":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#the-hiven-swarm":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{}},"title":{"reference/hivenclient.html":{},"reference/hivenclient.html#websocket-clients":{}}}],["welcom",{"_index":674,"text":{"getting_started/index.html":{},"getting_started/index.html#quickstart":{},"home/contributing.html":{},"home/contributing.html#contributing":{}},"title":{}}],["well",{"_index":142,"text":{"changelog.html":{},"changelog.html#added_1":{},"getting_started/index.html":{},"getting_started/index.html#environment":{},"getting_started/index.html#using-a-userclient":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.__init__":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.SingleDispatchEventListener.dispatch":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.run":{},"reference/hivenclient.html#openhivenpy.client.userclient.UserClient.unblock_user":{}},"title":{}}],["went",{"_index":408,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_member_enter":{},"api_reference/swarm_events.html#house_member_exit":{},"reference/hiven_parsers.html":{},"reference/hiven_parsers.html#openhivenpy.events.event_parsers.HivenParsers.on_house_member_exit":{}},"title":{}}],["whe",{"_index":532,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{}},"title":{}}],["wheel",{"_index":983,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["whenev",{"_index":741,"text":{"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{}},"title":{}}],["whether",{"_index":972,"text":{"home/license.html":{},"home/license.html#license":{},"reference/cache.html":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.add_or_update_house":{},"reference/cache.html#openhivenpy.client.cache.ClientCache.check_if_initialised":{},"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.blocked":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.initialised":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.log_websocket":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.mfa_enabled":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.open":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.queue_events":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.ready":{},"reference/types.html":{},"reference/types.html#openhivenpy.types.message.Message.exploding":{},"reference/types.html#openhivenpy.types.message.Message.is_house_message":{},"reference/types.html#openhivenpy.types.user.User.blocked":{},"reference/types.html#openhivenpy.types.user.User.mfa_enabled":{},"reference/types.html#openhivenpy.types.usertyping.UserTyping.is_house_typing":{}},"title":{}}],["width",{"_index":610,"text":{"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#message_create":{},"api_reference/swarm_events.html#message_update":{}},"title":{}}],["window",{"_index":995,"text":{"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{}},"title":{}}],["without",{"_index":332,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{},"changelog.html":{},"changelog.html#changed_5":{},"getting_started/deploying_your_first_bot.html":{},"getting_started/deploying_your_first_bot.html#authentication-and-tokens":{},"getting_started/index.html":{},"getting_started/index.html#using-a-userclient":{},"home/license.html":{},"home/license.html#license":{},"reference/types.html":{},"reference/types.html#hiven-types":{}},"title":{}}],["work",{"_index":512,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"getting_started/index.html":{},"getting_started/index.html#event-listening-with-the-eventhandler":{},"getting_started/logging.html":{},"getting_started/logging.html#simple-example-of-logging":{},"home/contributing.html":{},"home/contributing.html#contributing":{},"home/contributing.html#contributing-changes":{},"home/troubleshooting.html":{},"home/troubleshooting.html#issues-downloading-the-module":{},"home/troubleshooting.html#unexpected-behavior":{}},"title":{}}],["worker",{"_index":1283,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.close":{}},"title":{}}],["wrap",{"_index":454,"text":{"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#streamsmementions":{},"getting_started/index.html":{},"getting_started/index.html#the-hiven-swarm":{},"getting_started/index.html#using-a-userclient":{},"reference/events.html":{},"reference/events.html#openhivenpy.events.HivenEventHandler.event":{},"reference/http.html":{},"reference/http.html#openhivenpy.gateway.http.HTTP.delete":{},"reference/http.html#openhivenpy.gateway.http.HTTP.get":{},"reference/http.html#openhivenpy.gateway.http.HTTP.options":{},"reference/http.html#openhivenpy.gateway.http.HTTP.patch":{},"reference/http.html#openhivenpy.gateway.http.HTTP.post":{},"reference/http.html#openhivenpy.gateway.http.HTTP.put":{},"reference/http.html#openhivenpy.gateway.http.HTTP.raw_request":{}},"title":{}}],["wrapper",{"_index":6,"text":{"getting_started/index.html":{},"getting_started/index.html#basic-concept":{},"getting_started/index.html#quickstart":{},"getting_started/index.html#using-a-botclient":{},"index.html":{}},"title":{}}],["write",{"_index":473,"text":{"api_reference/hiven_restapi.html":{},"api_reference/hiven_restapi.html#passing-values-in-the-body":{},"api_reference/hiven_restapi.html#specifying-the-content-type":{},"api_reference/hiven_restapi.html#using-the-rest-api":{},"getting_started/index.html":{},"getting_started/index.html#hiven-types":{},"getting_started/index.html#quickstart":{}},"title":{"api_reference/hiven_restapi.html#writing-a-request-with-a-json-body":{}}}],["written",{"_index":7,"text":{"getting_started/index.html":{},"getting_started/index.html#quickstart":{},"index.html":{}},"title":{}}],["wrong",{"_index":409,"text":{"api_reference/hiven_exceptions.html":{},"api_reference/hiven_exceptions.html#415-unsupported-media-type-internal_server_error":{},"api_reference/hiven_request_endpoints.html":{},"api_reference/hiven_request_endpoints.html#usersme":{}},"title":{}}],["ws",{"_index":1093,"text":{"reference/events.html":{},"reference/events.html#openhivenpy.events.DispatchEventListener.set_awaitable":{}},"title":{}}],["ws_close_timeout",{"_index":1281,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["ws_heartbeat",{"_index":1279,"text":{"reference/hivenclient.html":{},"reference/hivenclient.html#openhivenpy.client.hivenclient.HivenClient.__init__":{}},"title":{}}],["y",{"_index":531,"text":{"api_reference/object_reference.html":{},"api_reference/object_reference.html#default-user":{},"api_reference/object_reference.html#lazy-user":{},"api_reference/swarm_events.html":{},"api_reference/swarm_events.html#house_entity_update":{},"api_reference/swarm_events.html#house_join":{},"api_reference/swarm_events.html#house_update":{}},"title":{}}],["yarl",{"_index":709,"text":{"getting_started/index.html":{},"getting_started/index.html#installation":{}},"title":{}}],["yourself",{"_index":787,"text":{"getting_started/index.html":{},"getting_started/index.html#hiven-types":{}},"title":{}}]],"pipeline":["stemmer"],"version":"2.3.8"}}